
mouse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e2c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004fb4  08004fb4  00014fb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004fcc  08004fcc  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08004fcc  08004fcc  00014fcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004fd4  08004fd4  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004fd4  08004fd4  00014fd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004fd8  08004fd8  00014fd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08004fdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f4  20000020  08004ff8  00020020  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000314  08004ff8  00020314  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d8f7  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023d8  00000000  00000000  0002d93c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c78  00000000  00000000  0002fd18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b50  00000000  00000000  00030990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000027c4  00000000  00000000  000314e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000efec  00000000  00000000  00033ca4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ba6b3  00000000  00000000  00042c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fd343  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003548  00000000  00000000  000fd398  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000020 	.word	0x20000020
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004f9c 	.word	0x08004f9c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000024 	.word	0x20000024
 80001c4:	08004f9c 	.word	0x08004f9c

080001c8 <__aeabi_fmul>:
 80001c8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001cc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80001d0:	bf1e      	ittt	ne
 80001d2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80001d6:	ea92 0f0c 	teqne	r2, ip
 80001da:	ea93 0f0c 	teqne	r3, ip
 80001de:	d06f      	beq.n	80002c0 <__aeabi_fmul+0xf8>
 80001e0:	441a      	add	r2, r3
 80001e2:	ea80 0c01 	eor.w	ip, r0, r1
 80001e6:	0240      	lsls	r0, r0, #9
 80001e8:	bf18      	it	ne
 80001ea:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80001ee:	d01e      	beq.n	800022e <__aeabi_fmul+0x66>
 80001f0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80001f4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80001f8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80001fc:	fba0 3101 	umull	r3, r1, r0, r1
 8000200:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000204:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000208:	bf3e      	ittt	cc
 800020a:	0049      	lslcc	r1, r1, #1
 800020c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000210:	005b      	lslcc	r3, r3, #1
 8000212:	ea40 0001 	orr.w	r0, r0, r1
 8000216:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800021a:	2afd      	cmp	r2, #253	; 0xfd
 800021c:	d81d      	bhi.n	800025a <__aeabi_fmul+0x92>
 800021e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000222:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000226:	bf08      	it	eq
 8000228:	f020 0001 	biceq.w	r0, r0, #1
 800022c:	4770      	bx	lr
 800022e:	f090 0f00 	teq	r0, #0
 8000232:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000236:	bf08      	it	eq
 8000238:	0249      	lsleq	r1, r1, #9
 800023a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800023e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000242:	3a7f      	subs	r2, #127	; 0x7f
 8000244:	bfc2      	ittt	gt
 8000246:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800024a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800024e:	4770      	bxgt	lr
 8000250:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000254:	f04f 0300 	mov.w	r3, #0
 8000258:	3a01      	subs	r2, #1
 800025a:	dc5d      	bgt.n	8000318 <__aeabi_fmul+0x150>
 800025c:	f112 0f19 	cmn.w	r2, #25
 8000260:	bfdc      	itt	le
 8000262:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000266:	4770      	bxle	lr
 8000268:	f1c2 0200 	rsb	r2, r2, #0
 800026c:	0041      	lsls	r1, r0, #1
 800026e:	fa21 f102 	lsr.w	r1, r1, r2
 8000272:	f1c2 0220 	rsb	r2, r2, #32
 8000276:	fa00 fc02 	lsl.w	ip, r0, r2
 800027a:	ea5f 0031 	movs.w	r0, r1, rrx
 800027e:	f140 0000 	adc.w	r0, r0, #0
 8000282:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000286:	bf08      	it	eq
 8000288:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800028c:	4770      	bx	lr
 800028e:	f092 0f00 	teq	r2, #0
 8000292:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000296:	bf02      	ittt	eq
 8000298:	0040      	lsleq	r0, r0, #1
 800029a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800029e:	3a01      	subeq	r2, #1
 80002a0:	d0f9      	beq.n	8000296 <__aeabi_fmul+0xce>
 80002a2:	ea40 000c 	orr.w	r0, r0, ip
 80002a6:	f093 0f00 	teq	r3, #0
 80002aa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80002ae:	bf02      	ittt	eq
 80002b0:	0049      	lsleq	r1, r1, #1
 80002b2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80002b6:	3b01      	subeq	r3, #1
 80002b8:	d0f9      	beq.n	80002ae <__aeabi_fmul+0xe6>
 80002ba:	ea41 010c 	orr.w	r1, r1, ip
 80002be:	e78f      	b.n	80001e0 <__aeabi_fmul+0x18>
 80002c0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80002c4:	ea92 0f0c 	teq	r2, ip
 80002c8:	bf18      	it	ne
 80002ca:	ea93 0f0c 	teqne	r3, ip
 80002ce:	d00a      	beq.n	80002e6 <__aeabi_fmul+0x11e>
 80002d0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80002d4:	bf18      	it	ne
 80002d6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80002da:	d1d8      	bne.n	800028e <__aeabi_fmul+0xc6>
 80002dc:	ea80 0001 	eor.w	r0, r0, r1
 80002e0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002e4:	4770      	bx	lr
 80002e6:	f090 0f00 	teq	r0, #0
 80002ea:	bf17      	itett	ne
 80002ec:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80002f0:	4608      	moveq	r0, r1
 80002f2:	f091 0f00 	teqne	r1, #0
 80002f6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80002fa:	d014      	beq.n	8000326 <__aeabi_fmul+0x15e>
 80002fc:	ea92 0f0c 	teq	r2, ip
 8000300:	d101      	bne.n	8000306 <__aeabi_fmul+0x13e>
 8000302:	0242      	lsls	r2, r0, #9
 8000304:	d10f      	bne.n	8000326 <__aeabi_fmul+0x15e>
 8000306:	ea93 0f0c 	teq	r3, ip
 800030a:	d103      	bne.n	8000314 <__aeabi_fmul+0x14c>
 800030c:	024b      	lsls	r3, r1, #9
 800030e:	bf18      	it	ne
 8000310:	4608      	movne	r0, r1
 8000312:	d108      	bne.n	8000326 <__aeabi_fmul+0x15e>
 8000314:	ea80 0001 	eor.w	r0, r0, r1
 8000318:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800031c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000320:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000324:	4770      	bx	lr
 8000326:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800032a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 800032e:	4770      	bx	lr

08000330 <__aeabi_drsub>:
 8000330:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000334:	e002      	b.n	800033c <__adddf3>
 8000336:	bf00      	nop

08000338 <__aeabi_dsub>:
 8000338:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800033c <__adddf3>:
 800033c:	b530      	push	{r4, r5, lr}
 800033e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000342:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000346:	ea94 0f05 	teq	r4, r5
 800034a:	bf08      	it	eq
 800034c:	ea90 0f02 	teqeq	r0, r2
 8000350:	bf1f      	itttt	ne
 8000352:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000356:	ea55 0c02 	orrsne.w	ip, r5, r2
 800035a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800035e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000362:	f000 80e2 	beq.w	800052a <__adddf3+0x1ee>
 8000366:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800036a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800036e:	bfb8      	it	lt
 8000370:	426d      	neglt	r5, r5
 8000372:	dd0c      	ble.n	800038e <__adddf3+0x52>
 8000374:	442c      	add	r4, r5
 8000376:	ea80 0202 	eor.w	r2, r0, r2
 800037a:	ea81 0303 	eor.w	r3, r1, r3
 800037e:	ea82 0000 	eor.w	r0, r2, r0
 8000382:	ea83 0101 	eor.w	r1, r3, r1
 8000386:	ea80 0202 	eor.w	r2, r0, r2
 800038a:	ea81 0303 	eor.w	r3, r1, r3
 800038e:	2d36      	cmp	r5, #54	; 0x36
 8000390:	bf88      	it	hi
 8000392:	bd30      	pophi	{r4, r5, pc}
 8000394:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000398:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800039c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003a4:	d002      	beq.n	80003ac <__adddf3+0x70>
 80003a6:	4240      	negs	r0, r0
 80003a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80003b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003b8:	d002      	beq.n	80003c0 <__adddf3+0x84>
 80003ba:	4252      	negs	r2, r2
 80003bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003c0:	ea94 0f05 	teq	r4, r5
 80003c4:	f000 80a7 	beq.w	8000516 <__adddf3+0x1da>
 80003c8:	f1a4 0401 	sub.w	r4, r4, #1
 80003cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80003d0:	db0d      	blt.n	80003ee <__adddf3+0xb2>
 80003d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003d6:	fa22 f205 	lsr.w	r2, r2, r5
 80003da:	1880      	adds	r0, r0, r2
 80003dc:	f141 0100 	adc.w	r1, r1, #0
 80003e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003e4:	1880      	adds	r0, r0, r2
 80003e6:	fa43 f305 	asr.w	r3, r3, r5
 80003ea:	4159      	adcs	r1, r3
 80003ec:	e00e      	b.n	800040c <__adddf3+0xd0>
 80003ee:	f1a5 0520 	sub.w	r5, r5, #32
 80003f2:	f10e 0e20 	add.w	lr, lr, #32
 80003f6:	2a01      	cmp	r2, #1
 80003f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003fc:	bf28      	it	cs
 80003fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000402:	fa43 f305 	asr.w	r3, r3, r5
 8000406:	18c0      	adds	r0, r0, r3
 8000408:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800040c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000410:	d507      	bpl.n	8000422 <__adddf3+0xe6>
 8000412:	f04f 0e00 	mov.w	lr, #0
 8000416:	f1dc 0c00 	rsbs	ip, ip, #0
 800041a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800041e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000422:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000426:	d31b      	bcc.n	8000460 <__adddf3+0x124>
 8000428:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800042c:	d30c      	bcc.n	8000448 <__adddf3+0x10c>
 800042e:	0849      	lsrs	r1, r1, #1
 8000430:	ea5f 0030 	movs.w	r0, r0, rrx
 8000434:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000438:	f104 0401 	add.w	r4, r4, #1
 800043c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000440:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000444:	f080 809a 	bcs.w	800057c <__adddf3+0x240>
 8000448:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800044c:	bf08      	it	eq
 800044e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000452:	f150 0000 	adcs.w	r0, r0, #0
 8000456:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800045a:	ea41 0105 	orr.w	r1, r1, r5
 800045e:	bd30      	pop	{r4, r5, pc}
 8000460:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000464:	4140      	adcs	r0, r0
 8000466:	eb41 0101 	adc.w	r1, r1, r1
 800046a:	3c01      	subs	r4, #1
 800046c:	bf28      	it	cs
 800046e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000472:	d2e9      	bcs.n	8000448 <__adddf3+0x10c>
 8000474:	f091 0f00 	teq	r1, #0
 8000478:	bf04      	itt	eq
 800047a:	4601      	moveq	r1, r0
 800047c:	2000      	moveq	r0, #0
 800047e:	fab1 f381 	clz	r3, r1
 8000482:	bf08      	it	eq
 8000484:	3320      	addeq	r3, #32
 8000486:	f1a3 030b 	sub.w	r3, r3, #11
 800048a:	f1b3 0220 	subs.w	r2, r3, #32
 800048e:	da0c      	bge.n	80004aa <__adddf3+0x16e>
 8000490:	320c      	adds	r2, #12
 8000492:	dd08      	ble.n	80004a6 <__adddf3+0x16a>
 8000494:	f102 0c14 	add.w	ip, r2, #20
 8000498:	f1c2 020c 	rsb	r2, r2, #12
 800049c:	fa01 f00c 	lsl.w	r0, r1, ip
 80004a0:	fa21 f102 	lsr.w	r1, r1, r2
 80004a4:	e00c      	b.n	80004c0 <__adddf3+0x184>
 80004a6:	f102 0214 	add.w	r2, r2, #20
 80004aa:	bfd8      	it	le
 80004ac:	f1c2 0c20 	rsble	ip, r2, #32
 80004b0:	fa01 f102 	lsl.w	r1, r1, r2
 80004b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004b8:	bfdc      	itt	le
 80004ba:	ea41 010c 	orrle.w	r1, r1, ip
 80004be:	4090      	lslle	r0, r2
 80004c0:	1ae4      	subs	r4, r4, r3
 80004c2:	bfa2      	ittt	ge
 80004c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004c8:	4329      	orrge	r1, r5
 80004ca:	bd30      	popge	{r4, r5, pc}
 80004cc:	ea6f 0404 	mvn.w	r4, r4
 80004d0:	3c1f      	subs	r4, #31
 80004d2:	da1c      	bge.n	800050e <__adddf3+0x1d2>
 80004d4:	340c      	adds	r4, #12
 80004d6:	dc0e      	bgt.n	80004f6 <__adddf3+0x1ba>
 80004d8:	f104 0414 	add.w	r4, r4, #20
 80004dc:	f1c4 0220 	rsb	r2, r4, #32
 80004e0:	fa20 f004 	lsr.w	r0, r0, r4
 80004e4:	fa01 f302 	lsl.w	r3, r1, r2
 80004e8:	ea40 0003 	orr.w	r0, r0, r3
 80004ec:	fa21 f304 	lsr.w	r3, r1, r4
 80004f0:	ea45 0103 	orr.w	r1, r5, r3
 80004f4:	bd30      	pop	{r4, r5, pc}
 80004f6:	f1c4 040c 	rsb	r4, r4, #12
 80004fa:	f1c4 0220 	rsb	r2, r4, #32
 80004fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000502:	fa01 f304 	lsl.w	r3, r1, r4
 8000506:	ea40 0003 	orr.w	r0, r0, r3
 800050a:	4629      	mov	r1, r5
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	fa21 f004 	lsr.w	r0, r1, r4
 8000512:	4629      	mov	r1, r5
 8000514:	bd30      	pop	{r4, r5, pc}
 8000516:	f094 0f00 	teq	r4, #0
 800051a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800051e:	bf06      	itte	eq
 8000520:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000524:	3401      	addeq	r4, #1
 8000526:	3d01      	subne	r5, #1
 8000528:	e74e      	b.n	80003c8 <__adddf3+0x8c>
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf18      	it	ne
 8000530:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000534:	d029      	beq.n	800058a <__adddf3+0x24e>
 8000536:	ea94 0f05 	teq	r4, r5
 800053a:	bf08      	it	eq
 800053c:	ea90 0f02 	teqeq	r0, r2
 8000540:	d005      	beq.n	800054e <__adddf3+0x212>
 8000542:	ea54 0c00 	orrs.w	ip, r4, r0
 8000546:	bf04      	itt	eq
 8000548:	4619      	moveq	r1, r3
 800054a:	4610      	moveq	r0, r2
 800054c:	bd30      	pop	{r4, r5, pc}
 800054e:	ea91 0f03 	teq	r1, r3
 8000552:	bf1e      	ittt	ne
 8000554:	2100      	movne	r1, #0
 8000556:	2000      	movne	r0, #0
 8000558:	bd30      	popne	{r4, r5, pc}
 800055a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800055e:	d105      	bne.n	800056c <__adddf3+0x230>
 8000560:	0040      	lsls	r0, r0, #1
 8000562:	4149      	adcs	r1, r1
 8000564:	bf28      	it	cs
 8000566:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800056a:	bd30      	pop	{r4, r5, pc}
 800056c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000570:	bf3c      	itt	cc
 8000572:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000576:	bd30      	popcc	{r4, r5, pc}
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000580:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000584:	f04f 0000 	mov.w	r0, #0
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf1a      	itte	ne
 8000590:	4619      	movne	r1, r3
 8000592:	4610      	movne	r0, r2
 8000594:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000598:	bf1c      	itt	ne
 800059a:	460b      	movne	r3, r1
 800059c:	4602      	movne	r2, r0
 800059e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005a2:	bf06      	itte	eq
 80005a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005a8:	ea91 0f03 	teqeq	r1, r3
 80005ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80005b0:	bd30      	pop	{r4, r5, pc}
 80005b2:	bf00      	nop

080005b4 <__aeabi_ui2d>:
 80005b4:	f090 0f00 	teq	r0, #0
 80005b8:	bf04      	itt	eq
 80005ba:	2100      	moveq	r1, #0
 80005bc:	4770      	bxeq	lr
 80005be:	b530      	push	{r4, r5, lr}
 80005c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c8:	f04f 0500 	mov.w	r5, #0
 80005cc:	f04f 0100 	mov.w	r1, #0
 80005d0:	e750      	b.n	8000474 <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_i2d>:
 80005d4:	f090 0f00 	teq	r0, #0
 80005d8:	bf04      	itt	eq
 80005da:	2100      	moveq	r1, #0
 80005dc:	4770      	bxeq	lr
 80005de:	b530      	push	{r4, r5, lr}
 80005e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ec:	bf48      	it	mi
 80005ee:	4240      	negmi	r0, r0
 80005f0:	f04f 0100 	mov.w	r1, #0
 80005f4:	e73e      	b.n	8000474 <__adddf3+0x138>
 80005f6:	bf00      	nop

080005f8 <__aeabi_f2d>:
 80005f8:	0042      	lsls	r2, r0, #1
 80005fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000602:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000606:	bf1f      	itttt	ne
 8000608:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800060c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000610:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000614:	4770      	bxne	lr
 8000616:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800061a:	bf08      	it	eq
 800061c:	4770      	bxeq	lr
 800061e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000622:	bf04      	itt	eq
 8000624:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000628:	4770      	bxeq	lr
 800062a:	b530      	push	{r4, r5, lr}
 800062c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000630:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000634:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000638:	e71c      	b.n	8000474 <__adddf3+0x138>
 800063a:	bf00      	nop

0800063c <__aeabi_ul2d>:
 800063c:	ea50 0201 	orrs.w	r2, r0, r1
 8000640:	bf08      	it	eq
 8000642:	4770      	bxeq	lr
 8000644:	b530      	push	{r4, r5, lr}
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	e00a      	b.n	8000662 <__aeabi_l2d+0x16>

0800064c <__aeabi_l2d>:
 800064c:	ea50 0201 	orrs.w	r2, r0, r1
 8000650:	bf08      	it	eq
 8000652:	4770      	bxeq	lr
 8000654:	b530      	push	{r4, r5, lr}
 8000656:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800065a:	d502      	bpl.n	8000662 <__aeabi_l2d+0x16>
 800065c:	4240      	negs	r0, r0
 800065e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000662:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000666:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800066a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800066e:	f43f aed8 	beq.w	8000422 <__adddf3+0xe6>
 8000672:	f04f 0203 	mov.w	r2, #3
 8000676:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800067a:	bf18      	it	ne
 800067c:	3203      	addne	r2, #3
 800067e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000682:	bf18      	it	ne
 8000684:	3203      	addne	r2, #3
 8000686:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800068a:	f1c2 0320 	rsb	r3, r2, #32
 800068e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 fe03 	lsl.w	lr, r1, r3
 800069a:	ea40 000e 	orr.w	r0, r0, lr
 800069e:	fa21 f102 	lsr.w	r1, r1, r2
 80006a2:	4414      	add	r4, r2
 80006a4:	e6bd      	b.n	8000422 <__adddf3+0xe6>
 80006a6:	bf00      	nop

080006a8 <__gedf2>:
 80006a8:	f04f 3cff 	mov.w	ip, #4294967295
 80006ac:	e006      	b.n	80006bc <__cmpdf2+0x4>
 80006ae:	bf00      	nop

080006b0 <__ledf2>:
 80006b0:	f04f 0c01 	mov.w	ip, #1
 80006b4:	e002      	b.n	80006bc <__cmpdf2+0x4>
 80006b6:	bf00      	nop

080006b8 <__cmpdf2>:
 80006b8:	f04f 0c01 	mov.w	ip, #1
 80006bc:	f84d cd04 	str.w	ip, [sp, #-4]!
 80006c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80006c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006c8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80006cc:	bf18      	it	ne
 80006ce:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80006d2:	d01b      	beq.n	800070c <__cmpdf2+0x54>
 80006d4:	b001      	add	sp, #4
 80006d6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80006da:	bf0c      	ite	eq
 80006dc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80006e0:	ea91 0f03 	teqne	r1, r3
 80006e4:	bf02      	ittt	eq
 80006e6:	ea90 0f02 	teqeq	r0, r2
 80006ea:	2000      	moveq	r0, #0
 80006ec:	4770      	bxeq	lr
 80006ee:	f110 0f00 	cmn.w	r0, #0
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf58      	it	pl
 80006f8:	4299      	cmppl	r1, r3
 80006fa:	bf08      	it	eq
 80006fc:	4290      	cmpeq	r0, r2
 80006fe:	bf2c      	ite	cs
 8000700:	17d8      	asrcs	r0, r3, #31
 8000702:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000706:	f040 0001 	orr.w	r0, r0, #1
 800070a:	4770      	bx	lr
 800070c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000710:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000714:	d102      	bne.n	800071c <__cmpdf2+0x64>
 8000716:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800071a:	d107      	bne.n	800072c <__cmpdf2+0x74>
 800071c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000720:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000724:	d1d6      	bne.n	80006d4 <__cmpdf2+0x1c>
 8000726:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800072a:	d0d3      	beq.n	80006d4 <__cmpdf2+0x1c>
 800072c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop

08000734 <__aeabi_cdrcmple>:
 8000734:	4684      	mov	ip, r0
 8000736:	4610      	mov	r0, r2
 8000738:	4662      	mov	r2, ip
 800073a:	468c      	mov	ip, r1
 800073c:	4619      	mov	r1, r3
 800073e:	4663      	mov	r3, ip
 8000740:	e000      	b.n	8000744 <__aeabi_cdcmpeq>
 8000742:	bf00      	nop

08000744 <__aeabi_cdcmpeq>:
 8000744:	b501      	push	{r0, lr}
 8000746:	f7ff ffb7 	bl	80006b8 <__cmpdf2>
 800074a:	2800      	cmp	r0, #0
 800074c:	bf48      	it	mi
 800074e:	f110 0f00 	cmnmi.w	r0, #0
 8000752:	bd01      	pop	{r0, pc}

08000754 <__aeabi_dcmpeq>:
 8000754:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000758:	f7ff fff4 	bl	8000744 <__aeabi_cdcmpeq>
 800075c:	bf0c      	ite	eq
 800075e:	2001      	moveq	r0, #1
 8000760:	2000      	movne	r0, #0
 8000762:	f85d fb08 	ldr.w	pc, [sp], #8
 8000766:	bf00      	nop

08000768 <__aeabi_dcmplt>:
 8000768:	f84d ed08 	str.w	lr, [sp, #-8]!
 800076c:	f7ff ffea 	bl	8000744 <__aeabi_cdcmpeq>
 8000770:	bf34      	ite	cc
 8000772:	2001      	movcc	r0, #1
 8000774:	2000      	movcs	r0, #0
 8000776:	f85d fb08 	ldr.w	pc, [sp], #8
 800077a:	bf00      	nop

0800077c <__aeabi_dcmple>:
 800077c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000780:	f7ff ffe0 	bl	8000744 <__aeabi_cdcmpeq>
 8000784:	bf94      	ite	ls
 8000786:	2001      	movls	r0, #1
 8000788:	2000      	movhi	r0, #0
 800078a:	f85d fb08 	ldr.w	pc, [sp], #8
 800078e:	bf00      	nop

08000790 <__aeabi_dcmpge>:
 8000790:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000794:	f7ff ffce 	bl	8000734 <__aeabi_cdrcmple>
 8000798:	bf94      	ite	ls
 800079a:	2001      	movls	r0, #1
 800079c:	2000      	movhi	r0, #0
 800079e:	f85d fb08 	ldr.w	pc, [sp], #8
 80007a2:	bf00      	nop

080007a4 <__aeabi_dcmpgt>:
 80007a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007a8:	f7ff ffc4 	bl	8000734 <__aeabi_cdrcmple>
 80007ac:	bf34      	ite	cc
 80007ae:	2001      	movcc	r0, #1
 80007b0:	2000      	movcs	r0, #0
 80007b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80007b6:	bf00      	nop

080007b8 <__aeabi_d2f>:
 80007b8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007bc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80007c0:	bf24      	itt	cs
 80007c2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007c6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007ca:	d90d      	bls.n	80007e8 <__aeabi_d2f+0x30>
 80007cc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007d0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007d4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007d8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80007dc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007e0:	bf08      	it	eq
 80007e2:	f020 0001 	biceq.w	r0, r0, #1
 80007e6:	4770      	bx	lr
 80007e8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80007ec:	d121      	bne.n	8000832 <__aeabi_d2f+0x7a>
 80007ee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80007f2:	bfbc      	itt	lt
 80007f4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80007f8:	4770      	bxlt	lr
 80007fa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007fe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000802:	f1c2 0218 	rsb	r2, r2, #24
 8000806:	f1c2 0c20 	rsb	ip, r2, #32
 800080a:	fa10 f30c 	lsls.w	r3, r0, ip
 800080e:	fa20 f002 	lsr.w	r0, r0, r2
 8000812:	bf18      	it	ne
 8000814:	f040 0001 	orrne.w	r0, r0, #1
 8000818:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800081c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000820:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000824:	ea40 000c 	orr.w	r0, r0, ip
 8000828:	fa23 f302 	lsr.w	r3, r3, r2
 800082c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000830:	e7cc      	b.n	80007cc <__aeabi_d2f+0x14>
 8000832:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000836:	d107      	bne.n	8000848 <__aeabi_d2f+0x90>
 8000838:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800083c:	bf1e      	ittt	ne
 800083e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000842:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000846:	4770      	bxne	lr
 8000848:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800084c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000850:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop

08000858 <__aeabi_frsub>:
 8000858:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800085c:	e002      	b.n	8000864 <__addsf3>
 800085e:	bf00      	nop

08000860 <__aeabi_fsub>:
 8000860:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000864 <__addsf3>:
 8000864:	0042      	lsls	r2, r0, #1
 8000866:	bf1f      	itttt	ne
 8000868:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800086c:	ea92 0f03 	teqne	r2, r3
 8000870:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000874:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000878:	d06a      	beq.n	8000950 <__addsf3+0xec>
 800087a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800087e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000882:	bfc1      	itttt	gt
 8000884:	18d2      	addgt	r2, r2, r3
 8000886:	4041      	eorgt	r1, r0
 8000888:	4048      	eorgt	r0, r1
 800088a:	4041      	eorgt	r1, r0
 800088c:	bfb8      	it	lt
 800088e:	425b      	neglt	r3, r3
 8000890:	2b19      	cmp	r3, #25
 8000892:	bf88      	it	hi
 8000894:	4770      	bxhi	lr
 8000896:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800089a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800089e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80008a2:	bf18      	it	ne
 80008a4:	4240      	negne	r0, r0
 80008a6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80008aa:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80008ae:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80008b2:	bf18      	it	ne
 80008b4:	4249      	negne	r1, r1
 80008b6:	ea92 0f03 	teq	r2, r3
 80008ba:	d03f      	beq.n	800093c <__addsf3+0xd8>
 80008bc:	f1a2 0201 	sub.w	r2, r2, #1
 80008c0:	fa41 fc03 	asr.w	ip, r1, r3
 80008c4:	eb10 000c 	adds.w	r0, r0, ip
 80008c8:	f1c3 0320 	rsb	r3, r3, #32
 80008cc:	fa01 f103 	lsl.w	r1, r1, r3
 80008d0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80008d4:	d502      	bpl.n	80008dc <__addsf3+0x78>
 80008d6:	4249      	negs	r1, r1
 80008d8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80008dc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80008e0:	d313      	bcc.n	800090a <__addsf3+0xa6>
 80008e2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80008e6:	d306      	bcc.n	80008f6 <__addsf3+0x92>
 80008e8:	0840      	lsrs	r0, r0, #1
 80008ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80008ee:	f102 0201 	add.w	r2, r2, #1
 80008f2:	2afe      	cmp	r2, #254	; 0xfe
 80008f4:	d251      	bcs.n	800099a <__addsf3+0x136>
 80008f6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80008fa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008fe:	bf08      	it	eq
 8000900:	f020 0001 	biceq.w	r0, r0, #1
 8000904:	ea40 0003 	orr.w	r0, r0, r3
 8000908:	4770      	bx	lr
 800090a:	0049      	lsls	r1, r1, #1
 800090c:	eb40 0000 	adc.w	r0, r0, r0
 8000910:	3a01      	subs	r2, #1
 8000912:	bf28      	it	cs
 8000914:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000918:	d2ed      	bcs.n	80008f6 <__addsf3+0x92>
 800091a:	fab0 fc80 	clz	ip, r0
 800091e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000922:	ebb2 020c 	subs.w	r2, r2, ip
 8000926:	fa00 f00c 	lsl.w	r0, r0, ip
 800092a:	bfaa      	itet	ge
 800092c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000930:	4252      	neglt	r2, r2
 8000932:	4318      	orrge	r0, r3
 8000934:	bfbc      	itt	lt
 8000936:	40d0      	lsrlt	r0, r2
 8000938:	4318      	orrlt	r0, r3
 800093a:	4770      	bx	lr
 800093c:	f092 0f00 	teq	r2, #0
 8000940:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000944:	bf06      	itte	eq
 8000946:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800094a:	3201      	addeq	r2, #1
 800094c:	3b01      	subne	r3, #1
 800094e:	e7b5      	b.n	80008bc <__addsf3+0x58>
 8000950:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000954:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000958:	bf18      	it	ne
 800095a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800095e:	d021      	beq.n	80009a4 <__addsf3+0x140>
 8000960:	ea92 0f03 	teq	r2, r3
 8000964:	d004      	beq.n	8000970 <__addsf3+0x10c>
 8000966:	f092 0f00 	teq	r2, #0
 800096a:	bf08      	it	eq
 800096c:	4608      	moveq	r0, r1
 800096e:	4770      	bx	lr
 8000970:	ea90 0f01 	teq	r0, r1
 8000974:	bf1c      	itt	ne
 8000976:	2000      	movne	r0, #0
 8000978:	4770      	bxne	lr
 800097a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800097e:	d104      	bne.n	800098a <__addsf3+0x126>
 8000980:	0040      	lsls	r0, r0, #1
 8000982:	bf28      	it	cs
 8000984:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000988:	4770      	bx	lr
 800098a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800098e:	bf3c      	itt	cc
 8000990:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000994:	4770      	bxcc	lr
 8000996:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800099a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800099e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009a2:	4770      	bx	lr
 80009a4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80009a8:	bf16      	itet	ne
 80009aa:	4608      	movne	r0, r1
 80009ac:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80009b0:	4601      	movne	r1, r0
 80009b2:	0242      	lsls	r2, r0, #9
 80009b4:	bf06      	itte	eq
 80009b6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80009ba:	ea90 0f01 	teqeq	r0, r1
 80009be:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80009c2:	4770      	bx	lr

080009c4 <__aeabi_ui2f>:
 80009c4:	f04f 0300 	mov.w	r3, #0
 80009c8:	e004      	b.n	80009d4 <__aeabi_i2f+0x8>
 80009ca:	bf00      	nop

080009cc <__aeabi_i2f>:
 80009cc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80009d0:	bf48      	it	mi
 80009d2:	4240      	negmi	r0, r0
 80009d4:	ea5f 0c00 	movs.w	ip, r0
 80009d8:	bf08      	it	eq
 80009da:	4770      	bxeq	lr
 80009dc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80009e0:	4601      	mov	r1, r0
 80009e2:	f04f 0000 	mov.w	r0, #0
 80009e6:	e01c      	b.n	8000a22 <__aeabi_l2f+0x2a>

080009e8 <__aeabi_ul2f>:
 80009e8:	ea50 0201 	orrs.w	r2, r0, r1
 80009ec:	bf08      	it	eq
 80009ee:	4770      	bxeq	lr
 80009f0:	f04f 0300 	mov.w	r3, #0
 80009f4:	e00a      	b.n	8000a0c <__aeabi_l2f+0x14>
 80009f6:	bf00      	nop

080009f8 <__aeabi_l2f>:
 80009f8:	ea50 0201 	orrs.w	r2, r0, r1
 80009fc:	bf08      	it	eq
 80009fe:	4770      	bxeq	lr
 8000a00:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000a04:	d502      	bpl.n	8000a0c <__aeabi_l2f+0x14>
 8000a06:	4240      	negs	r0, r0
 8000a08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000a0c:	ea5f 0c01 	movs.w	ip, r1
 8000a10:	bf02      	ittt	eq
 8000a12:	4684      	moveq	ip, r0
 8000a14:	4601      	moveq	r1, r0
 8000a16:	2000      	moveq	r0, #0
 8000a18:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000a1c:	bf08      	it	eq
 8000a1e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000a22:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000a26:	fabc f28c 	clz	r2, ip
 8000a2a:	3a08      	subs	r2, #8
 8000a2c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000a30:	db10      	blt.n	8000a54 <__aeabi_l2f+0x5c>
 8000a32:	fa01 fc02 	lsl.w	ip, r1, r2
 8000a36:	4463      	add	r3, ip
 8000a38:	fa00 fc02 	lsl.w	ip, r0, r2
 8000a3c:	f1c2 0220 	rsb	r2, r2, #32
 8000a40:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000a44:	fa20 f202 	lsr.w	r2, r0, r2
 8000a48:	eb43 0002 	adc.w	r0, r3, r2
 8000a4c:	bf08      	it	eq
 8000a4e:	f020 0001 	biceq.w	r0, r0, #1
 8000a52:	4770      	bx	lr
 8000a54:	f102 0220 	add.w	r2, r2, #32
 8000a58:	fa01 fc02 	lsl.w	ip, r1, r2
 8000a5c:	f1c2 0220 	rsb	r2, r2, #32
 8000a60:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000a64:	fa21 f202 	lsr.w	r2, r1, r2
 8000a68:	eb43 0002 	adc.w	r0, r3, r2
 8000a6c:	bf08      	it	eq
 8000a6e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000a72:	4770      	bx	lr

08000a74 <__gesf2>:
 8000a74:	f04f 3cff 	mov.w	ip, #4294967295
 8000a78:	e006      	b.n	8000a88 <__cmpsf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__lesf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	e002      	b.n	8000a88 <__cmpsf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__cmpsf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a8c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000a90:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a98:	bf18      	it	ne
 8000a9a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a9e:	d011      	beq.n	8000ac4 <__cmpsf2+0x40>
 8000aa0:	b001      	add	sp, #4
 8000aa2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000aa6:	bf18      	it	ne
 8000aa8:	ea90 0f01 	teqne	r0, r1
 8000aac:	bf58      	it	pl
 8000aae:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ab2:	bf88      	it	hi
 8000ab4:	17c8      	asrhi	r0, r1, #31
 8000ab6:	bf38      	it	cc
 8000ab8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000abc:	bf18      	it	ne
 8000abe:	f040 0001 	orrne.w	r0, r0, #1
 8000ac2:	4770      	bx	lr
 8000ac4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ac8:	d102      	bne.n	8000ad0 <__cmpsf2+0x4c>
 8000aca:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000ace:	d105      	bne.n	8000adc <__cmpsf2+0x58>
 8000ad0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ad4:	d1e4      	bne.n	8000aa0 <__cmpsf2+0x1c>
 8000ad6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000ada:	d0e1      	beq.n	8000aa0 <__cmpsf2+0x1c>
 8000adc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_cfrcmple>:
 8000ae4:	4684      	mov	ip, r0
 8000ae6:	4608      	mov	r0, r1
 8000ae8:	4661      	mov	r1, ip
 8000aea:	e7ff      	b.n	8000aec <__aeabi_cfcmpeq>

08000aec <__aeabi_cfcmpeq>:
 8000aec:	b50f      	push	{r0, r1, r2, r3, lr}
 8000aee:	f7ff ffc9 	bl	8000a84 <__cmpsf2>
 8000af2:	2800      	cmp	r0, #0
 8000af4:	bf48      	it	mi
 8000af6:	f110 0f00 	cmnmi.w	r0, #0
 8000afa:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000afc <__aeabi_fcmpeq>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff fff4 	bl	8000aec <__aeabi_cfcmpeq>
 8000b04:	bf0c      	ite	eq
 8000b06:	2001      	moveq	r0, #1
 8000b08:	2000      	movne	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_fcmplt>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffea 	bl	8000aec <__aeabi_cfcmpeq>
 8000b18:	bf34      	ite	cc
 8000b1a:	2001      	movcc	r0, #1
 8000b1c:	2000      	movcs	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_fcmple>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffe0 	bl	8000aec <__aeabi_cfcmpeq>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_fcmpge>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffd2 	bl	8000ae4 <__aeabi_cfrcmple>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_fcmpgt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffc8 	bl	8000ae4 <__aeabi_cfrcmple>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_f2uiz>:
 8000b60:	0042      	lsls	r2, r0, #1
 8000b62:	d20e      	bcs.n	8000b82 <__aeabi_f2uiz+0x22>
 8000b64:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000b68:	d30b      	bcc.n	8000b82 <__aeabi_f2uiz+0x22>
 8000b6a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000b6e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b72:	d409      	bmi.n	8000b88 <__aeabi_f2uiz+0x28>
 8000b74:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b78:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7c:	fa23 f002 	lsr.w	r0, r3, r2
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0000 	mov.w	r0, #0
 8000b86:	4770      	bx	lr
 8000b88:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000b8c:	d101      	bne.n	8000b92 <__aeabi_f2uiz+0x32>
 8000b8e:	0242      	lsls	r2, r0, #9
 8000b90:	d102      	bne.n	8000b98 <__aeabi_f2uiz+0x38>
 8000b92:	f04f 30ff 	mov.w	r0, #4294967295
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_uldivmod>:
 8000ba0:	b953      	cbnz	r3, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba2:	b94a      	cbnz	r2, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba4:	2900      	cmp	r1, #0
 8000ba6:	bf08      	it	eq
 8000ba8:	2800      	cmpeq	r0, #0
 8000baa:	bf1c      	itt	ne
 8000bac:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb4:	f000 b96e 	b.w	8000e94 <__aeabi_idiv0>
 8000bb8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bbc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc0:	f000 f806 	bl	8000bd0 <__udivmoddi4>
 8000bc4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bcc:	b004      	add	sp, #16
 8000bce:	4770      	bx	lr

08000bd0 <__udivmoddi4>:
 8000bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd4:	9e08      	ldr	r6, [sp, #32]
 8000bd6:	460d      	mov	r5, r1
 8000bd8:	4604      	mov	r4, r0
 8000bda:	468e      	mov	lr, r1
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	f040 8083 	bne.w	8000ce8 <__udivmoddi4+0x118>
 8000be2:	428a      	cmp	r2, r1
 8000be4:	4617      	mov	r7, r2
 8000be6:	d947      	bls.n	8000c78 <__udivmoddi4+0xa8>
 8000be8:	fab2 f382 	clz	r3, r2
 8000bec:	b14b      	cbz	r3, 8000c02 <__udivmoddi4+0x32>
 8000bee:	f1c3 0120 	rsb	r1, r3, #32
 8000bf2:	fa05 fe03 	lsl.w	lr, r5, r3
 8000bf6:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfa:	409f      	lsls	r7, r3
 8000bfc:	ea41 0e0e 	orr.w	lr, r1, lr
 8000c00:	409c      	lsls	r4, r3
 8000c02:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c06:	fbbe fcf8 	udiv	ip, lr, r8
 8000c0a:	fa1f f987 	uxth.w	r9, r7
 8000c0e:	fb08 e21c 	mls	r2, r8, ip, lr
 8000c12:	fb0c f009 	mul.w	r0, ip, r9
 8000c16:	0c21      	lsrs	r1, r4, #16
 8000c18:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8000c1c:	4290      	cmp	r0, r2
 8000c1e:	d90a      	bls.n	8000c36 <__udivmoddi4+0x66>
 8000c20:	18ba      	adds	r2, r7, r2
 8000c22:	f10c 31ff 	add.w	r1, ip, #4294967295
 8000c26:	f080 8118 	bcs.w	8000e5a <__udivmoddi4+0x28a>
 8000c2a:	4290      	cmp	r0, r2
 8000c2c:	f240 8115 	bls.w	8000e5a <__udivmoddi4+0x28a>
 8000c30:	f1ac 0c02 	sub.w	ip, ip, #2
 8000c34:	443a      	add	r2, r7
 8000c36:	1a12      	subs	r2, r2, r0
 8000c38:	fbb2 f0f8 	udiv	r0, r2, r8
 8000c3c:	fb08 2210 	mls	r2, r8, r0, r2
 8000c40:	fb00 f109 	mul.w	r1, r0, r9
 8000c44:	b2a4      	uxth	r4, r4
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	42a1      	cmp	r1, r4
 8000c4c:	d909      	bls.n	8000c62 <__udivmoddi4+0x92>
 8000c4e:	193c      	adds	r4, r7, r4
 8000c50:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c54:	f080 8103 	bcs.w	8000e5e <__udivmoddi4+0x28e>
 8000c58:	42a1      	cmp	r1, r4
 8000c5a:	f240 8100 	bls.w	8000e5e <__udivmoddi4+0x28e>
 8000c5e:	3802      	subs	r0, #2
 8000c60:	443c      	add	r4, r7
 8000c62:	1a64      	subs	r4, r4, r1
 8000c64:	2100      	movs	r1, #0
 8000c66:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c6a:	b11e      	cbz	r6, 8000c74 <__udivmoddi4+0xa4>
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	40dc      	lsrs	r4, r3
 8000c70:	e9c6 4200 	strd	r4, r2, [r6]
 8000c74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c78:	b902      	cbnz	r2, 8000c7c <__udivmoddi4+0xac>
 8000c7a:	deff      	udf	#255	; 0xff
 8000c7c:	fab2 f382 	clz	r3, r2
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d14f      	bne.n	8000d24 <__udivmoddi4+0x154>
 8000c84:	1a8d      	subs	r5, r1, r2
 8000c86:	2101      	movs	r1, #1
 8000c88:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000c8c:	fa1f f882 	uxth.w	r8, r2
 8000c90:	fbb5 fcfe 	udiv	ip, r5, lr
 8000c94:	fb0e 551c 	mls	r5, lr, ip, r5
 8000c98:	fb08 f00c 	mul.w	r0, r8, ip
 8000c9c:	0c22      	lsrs	r2, r4, #16
 8000c9e:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8000ca2:	42a8      	cmp	r0, r5
 8000ca4:	d907      	bls.n	8000cb6 <__udivmoddi4+0xe6>
 8000ca6:	197d      	adds	r5, r7, r5
 8000ca8:	f10c 32ff 	add.w	r2, ip, #4294967295
 8000cac:	d202      	bcs.n	8000cb4 <__udivmoddi4+0xe4>
 8000cae:	42a8      	cmp	r0, r5
 8000cb0:	f200 80e9 	bhi.w	8000e86 <__udivmoddi4+0x2b6>
 8000cb4:	4694      	mov	ip, r2
 8000cb6:	1a2d      	subs	r5, r5, r0
 8000cb8:	fbb5 f0fe 	udiv	r0, r5, lr
 8000cbc:	fb0e 5510 	mls	r5, lr, r0, r5
 8000cc0:	fb08 f800 	mul.w	r8, r8, r0
 8000cc4:	b2a4      	uxth	r4, r4
 8000cc6:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000cca:	45a0      	cmp	r8, r4
 8000ccc:	d907      	bls.n	8000cde <__udivmoddi4+0x10e>
 8000cce:	193c      	adds	r4, r7, r4
 8000cd0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cd4:	d202      	bcs.n	8000cdc <__udivmoddi4+0x10c>
 8000cd6:	45a0      	cmp	r8, r4
 8000cd8:	f200 80d9 	bhi.w	8000e8e <__udivmoddi4+0x2be>
 8000cdc:	4610      	mov	r0, r2
 8000cde:	eba4 0408 	sub.w	r4, r4, r8
 8000ce2:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ce6:	e7c0      	b.n	8000c6a <__udivmoddi4+0x9a>
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	d908      	bls.n	8000cfe <__udivmoddi4+0x12e>
 8000cec:	2e00      	cmp	r6, #0
 8000cee:	f000 80b1 	beq.w	8000e54 <__udivmoddi4+0x284>
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	e9c6 0500 	strd	r0, r5, [r6]
 8000cf8:	4608      	mov	r0, r1
 8000cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfe:	fab3 f183 	clz	r1, r3
 8000d02:	2900      	cmp	r1, #0
 8000d04:	d14b      	bne.n	8000d9e <__udivmoddi4+0x1ce>
 8000d06:	42ab      	cmp	r3, r5
 8000d08:	d302      	bcc.n	8000d10 <__udivmoddi4+0x140>
 8000d0a:	4282      	cmp	r2, r0
 8000d0c:	f200 80b9 	bhi.w	8000e82 <__udivmoddi4+0x2b2>
 8000d10:	1a84      	subs	r4, r0, r2
 8000d12:	eb65 0303 	sbc.w	r3, r5, r3
 8000d16:	2001      	movs	r0, #1
 8000d18:	469e      	mov	lr, r3
 8000d1a:	2e00      	cmp	r6, #0
 8000d1c:	d0aa      	beq.n	8000c74 <__udivmoddi4+0xa4>
 8000d1e:	e9c6 4e00 	strd	r4, lr, [r6]
 8000d22:	e7a7      	b.n	8000c74 <__udivmoddi4+0xa4>
 8000d24:	409f      	lsls	r7, r3
 8000d26:	f1c3 0220 	rsb	r2, r3, #32
 8000d2a:	40d1      	lsrs	r1, r2
 8000d2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d30:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d34:	fa1f f887 	uxth.w	r8, r7
 8000d38:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d3c:	fa24 f202 	lsr.w	r2, r4, r2
 8000d40:	409d      	lsls	r5, r3
 8000d42:	fb00 fc08 	mul.w	ip, r0, r8
 8000d46:	432a      	orrs	r2, r5
 8000d48:	0c15      	lsrs	r5, r2, #16
 8000d4a:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8000d4e:	45ac      	cmp	ip, r5
 8000d50:	fa04 f403 	lsl.w	r4, r4, r3
 8000d54:	d909      	bls.n	8000d6a <__udivmoddi4+0x19a>
 8000d56:	197d      	adds	r5, r7, r5
 8000d58:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d5c:	f080 808f 	bcs.w	8000e7e <__udivmoddi4+0x2ae>
 8000d60:	45ac      	cmp	ip, r5
 8000d62:	f240 808c 	bls.w	8000e7e <__udivmoddi4+0x2ae>
 8000d66:	3802      	subs	r0, #2
 8000d68:	443d      	add	r5, r7
 8000d6a:	eba5 050c 	sub.w	r5, r5, ip
 8000d6e:	fbb5 f1fe 	udiv	r1, r5, lr
 8000d72:	fb0e 5c11 	mls	ip, lr, r1, r5
 8000d76:	fb01 f908 	mul.w	r9, r1, r8
 8000d7a:	b295      	uxth	r5, r2
 8000d7c:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000d80:	45a9      	cmp	r9, r5
 8000d82:	d907      	bls.n	8000d94 <__udivmoddi4+0x1c4>
 8000d84:	197d      	adds	r5, r7, r5
 8000d86:	f101 32ff 	add.w	r2, r1, #4294967295
 8000d8a:	d274      	bcs.n	8000e76 <__udivmoddi4+0x2a6>
 8000d8c:	45a9      	cmp	r9, r5
 8000d8e:	d972      	bls.n	8000e76 <__udivmoddi4+0x2a6>
 8000d90:	3902      	subs	r1, #2
 8000d92:	443d      	add	r5, r7
 8000d94:	eba5 0509 	sub.w	r5, r5, r9
 8000d98:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d9c:	e778      	b.n	8000c90 <__udivmoddi4+0xc0>
 8000d9e:	f1c1 0720 	rsb	r7, r1, #32
 8000da2:	408b      	lsls	r3, r1
 8000da4:	fa22 fc07 	lsr.w	ip, r2, r7
 8000da8:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dac:	fa25 f407 	lsr.w	r4, r5, r7
 8000db0:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000db4:	fbb4 f9fe 	udiv	r9, r4, lr
 8000db8:	fa1f f88c 	uxth.w	r8, ip
 8000dbc:	fb0e 4419 	mls	r4, lr, r9, r4
 8000dc0:	fa20 f307 	lsr.w	r3, r0, r7
 8000dc4:	fb09 fa08 	mul.w	sl, r9, r8
 8000dc8:	408d      	lsls	r5, r1
 8000dca:	431d      	orrs	r5, r3
 8000dcc:	0c2b      	lsrs	r3, r5, #16
 8000dce:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dd2:	45a2      	cmp	sl, r4
 8000dd4:	fa02 f201 	lsl.w	r2, r2, r1
 8000dd8:	fa00 f301 	lsl.w	r3, r0, r1
 8000ddc:	d909      	bls.n	8000df2 <__udivmoddi4+0x222>
 8000dde:	eb1c 0404 	adds.w	r4, ip, r4
 8000de2:	f109 30ff 	add.w	r0, r9, #4294967295
 8000de6:	d248      	bcs.n	8000e7a <__udivmoddi4+0x2aa>
 8000de8:	45a2      	cmp	sl, r4
 8000dea:	d946      	bls.n	8000e7a <__udivmoddi4+0x2aa>
 8000dec:	f1a9 0902 	sub.w	r9, r9, #2
 8000df0:	4464      	add	r4, ip
 8000df2:	eba4 040a 	sub.w	r4, r4, sl
 8000df6:	fbb4 f0fe 	udiv	r0, r4, lr
 8000dfa:	fb0e 4410 	mls	r4, lr, r0, r4
 8000dfe:	fb00 fa08 	mul.w	sl, r0, r8
 8000e02:	b2ad      	uxth	r5, r5
 8000e04:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e08:	45a2      	cmp	sl, r4
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x24e>
 8000e0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e10:	f100 35ff 	add.w	r5, r0, #4294967295
 8000e14:	d22d      	bcs.n	8000e72 <__udivmoddi4+0x2a2>
 8000e16:	45a2      	cmp	sl, r4
 8000e18:	d92b      	bls.n	8000e72 <__udivmoddi4+0x2a2>
 8000e1a:	3802      	subs	r0, #2
 8000e1c:	4464      	add	r4, ip
 8000e1e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e22:	fba0 8902 	umull	r8, r9, r0, r2
 8000e26:	eba4 040a 	sub.w	r4, r4, sl
 8000e2a:	454c      	cmp	r4, r9
 8000e2c:	46c6      	mov	lr, r8
 8000e2e:	464d      	mov	r5, r9
 8000e30:	d319      	bcc.n	8000e66 <__udivmoddi4+0x296>
 8000e32:	d016      	beq.n	8000e62 <__udivmoddi4+0x292>
 8000e34:	b15e      	cbz	r6, 8000e4e <__udivmoddi4+0x27e>
 8000e36:	ebb3 020e 	subs.w	r2, r3, lr
 8000e3a:	eb64 0405 	sbc.w	r4, r4, r5
 8000e3e:	fa04 f707 	lsl.w	r7, r4, r7
 8000e42:	fa22 f301 	lsr.w	r3, r2, r1
 8000e46:	431f      	orrs	r7, r3
 8000e48:	40cc      	lsrs	r4, r1
 8000e4a:	e9c6 7400 	strd	r7, r4, [r6]
 8000e4e:	2100      	movs	r1, #0
 8000e50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e54:	4631      	mov	r1, r6
 8000e56:	4630      	mov	r0, r6
 8000e58:	e70c      	b.n	8000c74 <__udivmoddi4+0xa4>
 8000e5a:	468c      	mov	ip, r1
 8000e5c:	e6eb      	b.n	8000c36 <__udivmoddi4+0x66>
 8000e5e:	4610      	mov	r0, r2
 8000e60:	e6ff      	b.n	8000c62 <__udivmoddi4+0x92>
 8000e62:	4543      	cmp	r3, r8
 8000e64:	d2e6      	bcs.n	8000e34 <__udivmoddi4+0x264>
 8000e66:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e6a:	eb69 050c 	sbc.w	r5, r9, ip
 8000e6e:	3801      	subs	r0, #1
 8000e70:	e7e0      	b.n	8000e34 <__udivmoddi4+0x264>
 8000e72:	4628      	mov	r0, r5
 8000e74:	e7d3      	b.n	8000e1e <__udivmoddi4+0x24e>
 8000e76:	4611      	mov	r1, r2
 8000e78:	e78c      	b.n	8000d94 <__udivmoddi4+0x1c4>
 8000e7a:	4681      	mov	r9, r0
 8000e7c:	e7b9      	b.n	8000df2 <__udivmoddi4+0x222>
 8000e7e:	4608      	mov	r0, r1
 8000e80:	e773      	b.n	8000d6a <__udivmoddi4+0x19a>
 8000e82:	4608      	mov	r0, r1
 8000e84:	e749      	b.n	8000d1a <__udivmoddi4+0x14a>
 8000e86:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e8a:	443d      	add	r5, r7
 8000e8c:	e713      	b.n	8000cb6 <__udivmoddi4+0xe6>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	443c      	add	r4, r7
 8000e92:	e724      	b.n	8000cde <__udivmoddi4+0x10e>

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <Delay_Init>:

#include "main.h"
#include "delay.h"

void Delay_Init(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
    if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk))
 8000e9c:	4b0c      	ldr	r3, [pc, #48]	; (8000ed0 <Delay_Init+0x38>)
 8000e9e:	68db      	ldr	r3, [r3, #12]
 8000ea0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d10e      	bne.n	8000ec6 <Delay_Init+0x2e>
    {
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000ea8:	4b09      	ldr	r3, [pc, #36]	; (8000ed0 <Delay_Init+0x38>)
 8000eaa:	68db      	ldr	r3, [r3, #12]
 8000eac:	4a08      	ldr	r2, [pc, #32]	; (8000ed0 <Delay_Init+0x38>)
 8000eae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000eb2:	60d3      	str	r3, [r2, #12]
        DWT->CYCCNT = 0;
 8000eb4:	4b07      	ldr	r3, [pc, #28]	; (8000ed4 <Delay_Init+0x3c>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000eba:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <Delay_Init+0x3c>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4a05      	ldr	r2, [pc, #20]	; (8000ed4 <Delay_Init+0x3c>)
 8000ec0:	f043 0301 	orr.w	r3, r3, #1
 8000ec4:	6013      	str	r3, [r2, #0]
    }
}
 8000ec6:	bf00      	nop
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bc80      	pop	{r7}
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	e000edf0 	.word	0xe000edf0
 8000ed4:	e0001000 	.word	0xe0001000

08000ed8 <delayMicroseconds>:

// Delays for us microseconds
void delayMicroseconds(uint32_t us)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b085      	sub	sp, #20
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
    uint32_t startTick = DWT->CYCCNT,
 8000ee0:	4b09      	ldr	r3, [pc, #36]	; (8000f08 <delayMicroseconds+0x30>)
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	60fb      	str	r3, [r7, #12]
    delayTicks = us * 16; // Our MCU runs at 16 MHz, so each microsecond lasts 16 clock ticks
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	011b      	lsls	r3, r3, #4
 8000eea:	60bb      	str	r3, [r7, #8]

    while (DWT->CYCCNT - startTick < delayTicks);
 8000eec:	bf00      	nop
 8000eee:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <delayMicroseconds+0x30>)
 8000ef0:	685a      	ldr	r2, [r3, #4]
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	1ad3      	subs	r3, r2, r3
 8000ef6:	68ba      	ldr	r2, [r7, #8]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	d8f8      	bhi.n	8000eee <delayMicroseconds+0x16>
}
 8000efc:	bf00      	nop
 8000efe:	bf00      	nop
 8000f00:	3714      	adds	r7, #20
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bc80      	pop	{r7}
 8000f06:	4770      	bx	lr
 8000f08:	e0001000 	.word	0xe0001000

08000f0c <getRightEncoderCounts>:
#include "encoders.h"

/*
 * Implement this function so it returns the right encoder value
 */
int16_t getRightEncoderCounts() {
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
	return (int16_t) TIM3->CNT;
 8000f10:	4b03      	ldr	r3, [pc, #12]	; (8000f20 <getRightEncoderCounts+0x14>)
 8000f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f14:	b21b      	sxth	r3, r3
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bc80      	pop	{r7}
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	40000400 	.word	0x40000400

08000f24 <getLeftEncoderCounts>:

/*
 * Implement this function so it returns the left encoder value
 */
int16_t getLeftEncoderCounts() {
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
	return (int16_t) TIM2->CNT * -1;
 8000f28:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f2e:	b29b      	uxth	r3, r3
 8000f30:	425b      	negs	r3, r3
 8000f32:	b29b      	uxth	r3, r3
 8000f34:	b21b      	sxth	r3, r3
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bc80      	pop	{r7}
 8000f3c:	4770      	bx	lr
	...

08000f40 <resetEncoders>:

/*
 * This function has already been implemented for you. Enjoy! :)
 */
void resetEncoders() {
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
	TIM2->CNT = (int16_t) 0;
 8000f44:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f48:	2200      	movs	r2, #0
 8000f4a:	625a      	str	r2, [r3, #36]	; 0x24
	TIM3->CNT = (int16_t) 0;
 8000f4c:	4b03      	ldr	r3, [pc, #12]	; (8000f5c <resetEncoders+0x1c>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000f52:	bf00      	nop
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bc80      	pop	{r7}
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	40000400 	.word	0x40000400

08000f60 <readIR>:
 Wait for a small amount of time (at least 20 us) so the photodiode can react
 Then read the correct receiver
 Lastly turn off the emitter
 */
uint16_t readIR(IR ir)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	71fb      	strb	r3, [r7, #7]
	uint16_t reading;
	switch (ir) {
 8000f6a:	79fb      	ldrb	r3, [r7, #7]
 8000f6c:	2b03      	cmp	r3, #3
 8000f6e:	d85b      	bhi.n	8001028 <readIR+0xc8>
 8000f70:	a201      	add	r2, pc, #4	; (adr r2, 8000f78 <readIR+0x18>)
 8000f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f76:	bf00      	nop
 8000f78:	08000f89 	.word	0x08000f89
 8000f7c:	08000fd9 	.word	0x08000fd9
 8000f80:	08001001 	.word	0x08001001
 8000f84:	08000fb1 	.word	0x08000fb1
	case IR_LEFT:
		HAL_GPIO_WritePin(LeftEmitter_GPIO_Port, LeftEmitter_Pin, GPIO_PIN_SET);
 8000f88:	2201      	movs	r2, #1
 8000f8a:	2140      	movs	r1, #64	; 0x40
 8000f8c:	4829      	ldr	r0, [pc, #164]	; (8001034 <readIR+0xd4>)
 8000f8e:	f002 fc95 	bl	80038bc <HAL_GPIO_WritePin>
		delayMicroseconds(25);
 8000f92:	2019      	movs	r0, #25
 8000f94:	f7ff ffa0 	bl	8000ed8 <delayMicroseconds>
		reading = analogRead(ir);
 8000f98:	79fb      	ldrb	r3, [r7, #7]
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f000 f86e 	bl	800107c <analogRead>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	81fb      	strh	r3, [r7, #14]
		HAL_GPIO_WritePin(LeftEmitter_GPIO_Port, LeftEmitter_Pin, GPIO_PIN_RESET);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	2140      	movs	r1, #64	; 0x40
 8000fa8:	4822      	ldr	r0, [pc, #136]	; (8001034 <readIR+0xd4>)
 8000faa:	f002 fc87 	bl	80038bc <HAL_GPIO_WritePin>
		break;
 8000fae:	e03c      	b.n	800102a <readIR+0xca>
	case IR_RIGHT:
		HAL_GPIO_WritePin(RightEmitter_GPIO_Port, RightEmitter_Pin, GPIO_PIN_SET);
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	2108      	movs	r1, #8
 8000fb4:	4820      	ldr	r0, [pc, #128]	; (8001038 <readIR+0xd8>)
 8000fb6:	f002 fc81 	bl	80038bc <HAL_GPIO_WritePin>
		delayMicroseconds(25);
 8000fba:	2019      	movs	r0, #25
 8000fbc:	f7ff ff8c 	bl	8000ed8 <delayMicroseconds>
		reading = analogRead(ir);
 8000fc0:	79fb      	ldrb	r3, [r7, #7]
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f000 f85a 	bl	800107c <analogRead>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	81fb      	strh	r3, [r7, #14]
		HAL_GPIO_WritePin(RightEmitter_GPIO_Port, RightEmitter_Pin, GPIO_PIN_RESET);
 8000fcc:	2200      	movs	r2, #0
 8000fce:	2108      	movs	r1, #8
 8000fd0:	4819      	ldr	r0, [pc, #100]	; (8001038 <readIR+0xd8>)
 8000fd2:	f002 fc73 	bl	80038bc <HAL_GPIO_WritePin>
		break;
 8000fd6:	e028      	b.n	800102a <readIR+0xca>
	case IR_FRONT_LEFT:
		HAL_GPIO_WritePin(FrontLeftEmitter_GPIO_Port, FrontLeftEmitter_Pin, GPIO_PIN_SET);
 8000fd8:	2201      	movs	r2, #1
 8000fda:	2180      	movs	r1, #128	; 0x80
 8000fdc:	4816      	ldr	r0, [pc, #88]	; (8001038 <readIR+0xd8>)
 8000fde:	f002 fc6d 	bl	80038bc <HAL_GPIO_WritePin>
		delayMicroseconds(25);
 8000fe2:	2019      	movs	r0, #25
 8000fe4:	f7ff ff78 	bl	8000ed8 <delayMicroseconds>
		reading = analogRead(ir);
 8000fe8:	79fb      	ldrb	r3, [r7, #7]
 8000fea:	4618      	mov	r0, r3
 8000fec:	f000 f846 	bl	800107c <analogRead>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	81fb      	strh	r3, [r7, #14]
		HAL_GPIO_WritePin(FrontLeftEmitter_GPIO_Port, FrontLeftEmitter_Pin, GPIO_PIN_RESET);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	2180      	movs	r1, #128	; 0x80
 8000ff8:	480f      	ldr	r0, [pc, #60]	; (8001038 <readIR+0xd8>)
 8000ffa:	f002 fc5f 	bl	80038bc <HAL_GPIO_WritePin>
		break;
 8000ffe:	e014      	b.n	800102a <readIR+0xca>
	case IR_FRONT_RIGHT:
		HAL_GPIO_WritePin(FrontRightEmitter_GPIO_Port, FrontRightEmitter_Pin, GPIO_PIN_SET);
 8001000:	2201      	movs	r2, #1
 8001002:	2120      	movs	r1, #32
 8001004:	480c      	ldr	r0, [pc, #48]	; (8001038 <readIR+0xd8>)
 8001006:	f002 fc59 	bl	80038bc <HAL_GPIO_WritePin>
		delayMicroseconds(25);
 800100a:	2019      	movs	r0, #25
 800100c:	f7ff ff64 	bl	8000ed8 <delayMicroseconds>
		reading = analogRead(ir);
 8001010:	79fb      	ldrb	r3, [r7, #7]
 8001012:	4618      	mov	r0, r3
 8001014:	f000 f832 	bl	800107c <analogRead>
 8001018:	4603      	mov	r3, r0
 800101a:	81fb      	strh	r3, [r7, #14]
		HAL_GPIO_WritePin(FrontRightEmitter_GPIO_Port, FrontRightEmitter_Pin, GPIO_PIN_RESET);
 800101c:	2200      	movs	r2, #0
 800101e:	2120      	movs	r1, #32
 8001020:	4805      	ldr	r0, [pc, #20]	; (8001038 <readIR+0xd8>)
 8001022:	f002 fc4b 	bl	80038bc <HAL_GPIO_WritePin>
		break;
 8001026:	e000      	b.n	800102a <readIR+0xca>
	default:
		break;
 8001028:	bf00      	nop
	}
	return reading;
 800102a:	89fb      	ldrh	r3, [r7, #14]
}
 800102c:	4618      	mov	r0, r3
 800102e:	3710      	adds	r7, #16
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	40020800 	.word	0x40020800
 8001038:	40020000 	.word	0x40020000

0800103c <readLeftIR>:
/*
 Implement the following 4 functions to read each IR
 Hint: Each function may just be one line
 */
uint16_t readLeftIR(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
	return readIR(IR_LEFT);
 8001040:	2000      	movs	r0, #0
 8001042:	f7ff ff8d 	bl	8000f60 <readIR>
 8001046:	4603      	mov	r3, r0
}
 8001048:	4618      	mov	r0, r3
 800104a:	bd80      	pop	{r7, pc}

0800104c <readFrontLeftIR>:

uint16_t readFrontLeftIR(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
	return readIR(IR_FRONT_LEFT);
 8001050:	2001      	movs	r0, #1
 8001052:	f7ff ff85 	bl	8000f60 <readIR>
 8001056:	4603      	mov	r3, r0
}
 8001058:	4618      	mov	r0, r3
 800105a:	bd80      	pop	{r7, pc}

0800105c <readFrontRightIR>:

uint16_t readFrontRightIR(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
	return readIR(IR_FRONT_RIGHT);
 8001060:	2002      	movs	r0, #2
 8001062:	f7ff ff7d 	bl	8000f60 <readIR>
 8001066:	4603      	mov	r3, r0
}
 8001068:	4618      	mov	r0, r3
 800106a:	bd80      	pop	{r7, pc}

0800106c <readRightIR>:


uint16_t readRightIR(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
	return readIR(IR_RIGHT);
 8001070:	2003      	movs	r0, #3
 8001072:	f7ff ff75 	bl	8000f60 <readIR>
 8001076:	4603      	mov	r3, r0
}
 8001078:	4618      	mov	r0, r3
 800107a:	bd80      	pop	{r7, pc}

0800107c <analogRead>:
/*
 This function reads the specific channel of the ADC corresponding to the correct IR
 You should not have to edit this function
 */
uint16_t analogRead(IR ir)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b08a      	sub	sp, #40	; 0x28
 8001080:	af00      	add	r7, sp, #0
 8001082:	4603      	mov	r3, r0
 8001084:	71fb      	strb	r3, [r7, #7]
    ADC_ChannelConfTypeDef sConfig = {0}; //this initializes the IR ADC [Analog to Digital Converter]
 8001086:	f107 030c 	add.w	r3, r7, #12
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]
 800108e:	605a      	str	r2, [r3, #4]
 8001090:	609a      	str	r2, [r3, #8]
 8001092:	60da      	str	r2, [r3, #12]
    ADC_HandleTypeDef *hadc1_ptr = Get_HADC1_Ptr(); //this is a pointer to your hal_adc
 8001094:	f000 fb10 	bl	80016b8 <Get_HADC1_Ptr>
 8001098:	61f8      	str	r0, [r7, #28]
    //this pointer will also be used to read the analog value, val = HAL_ADC_GetValue(hadc1_ptr);

    //this picks the IR direction to choose the right ADC.
    switch(ir)
 800109a:	79fb      	ldrb	r3, [r7, #7]
 800109c:	2b03      	cmp	r3, #3
 800109e:	d817      	bhi.n	80010d0 <analogRead+0x54>
 80010a0:	a201      	add	r2, pc, #4	; (adr r2, 80010a8 <analogRead+0x2c>)
 80010a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010a6:	bf00      	nop
 80010a8:	080010b9 	.word	0x080010b9
 80010ac:	080010bf 	.word	0x080010bf
 80010b0:	080010c5 	.word	0x080010c5
 80010b4:	080010cb 	.word	0x080010cb
    {
        case IR_LEFT:
            sConfig.Channel = ADC_CHANNEL_15;
 80010b8:	230f      	movs	r3, #15
 80010ba:	60fb      	str	r3, [r7, #12]
            break;
 80010bc:	e00a      	b.n	80010d4 <analogRead+0x58>
        case IR_FRONT_LEFT:
            sConfig.Channel = ADC_CHANNEL_6;
 80010be:	2306      	movs	r3, #6
 80010c0:	60fb      	str	r3, [r7, #12]
            break;
 80010c2:	e007      	b.n	80010d4 <analogRead+0x58>
        case IR_FRONT_RIGHT:
            sConfig.Channel = ADC_CHANNEL_9;
 80010c4:	2309      	movs	r3, #9
 80010c6:	60fb      	str	r3, [r7, #12]
            break;
 80010c8:	e004      	b.n	80010d4 <analogRead+0x58>
        case IR_RIGHT:
            sConfig.Channel = ADC_CHANNEL_14;
 80010ca:	230e      	movs	r3, #14
 80010cc:	60fb      	str	r3, [r7, #12]
            break;
 80010ce:	e001      	b.n	80010d4 <analogRead+0x58>
        default:
            return 0;
 80010d0:	2300      	movs	r3, #0
 80010d2:	e032      	b.n	800113a <analogRead+0xbe>
    }

    sConfig.Rank = 1;
 80010d4:	2301      	movs	r3, #1
 80010d6:	613b      	str	r3, [r7, #16]
    sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010d8:	2300      	movs	r3, #0
 80010da:	617b      	str	r3, [r7, #20]

    // make sure everything was set up correctly
    if (HAL_ADC_ConfigChannel(hadc1_ptr, &sConfig) != HAL_OK)
 80010dc:	f107 030c 	add.w	r3, r7, #12
 80010e0:	4619      	mov	r1, r3
 80010e2:	69f8      	ldr	r0, [r7, #28]
 80010e4:	f001 faba 	bl	800265c <HAL_ADC_ConfigChannel>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <analogRead+0x76>
    {
        return 0;
 80010ee:	2300      	movs	r3, #0
 80010f0:	e023      	b.n	800113a <analogRead+0xbe>
    }

    complete = 0;
 80010f2:	4b14      	ldr	r3, [pc, #80]	; (8001144 <analogRead+0xc8>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	701a      	strb	r2, [r3, #0]

    // start filling up the ADC buffer
    HAL_ADC_Start_DMA(hadc1_ptr, (uint32_t*)adc_buf, NUM_SAMPLES);
 80010f8:	2280      	movs	r2, #128	; 0x80
 80010fa:	4913      	ldr	r1, [pc, #76]	; (8001148 <analogRead+0xcc>)
 80010fc:	69f8      	ldr	r0, [r7, #28]
 80010fe:	f001 f96b 	bl	80023d8 <HAL_ADC_Start_DMA>

    // wait for the buffer to become full
    while (complete == 0)
 8001102:	e000      	b.n	8001106 <analogRead+0x8a>
    {
        continue;
 8001104:	bf00      	nop
    while (complete == 0)
 8001106:	4b0f      	ldr	r3, [pc, #60]	; (8001144 <analogRead+0xc8>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d0fa      	beq.n	8001104 <analogRead+0x88>
    }

    uint32_t sum = 0;
 800110e:	2300      	movs	r3, #0
 8001110:	627b      	str	r3, [r7, #36]	; 0x24
    // calculate the sum of the measurements in order to calculate the average
    uint16_t measurement = 0;
 8001112:	2300      	movs	r3, #0
 8001114:	847b      	strh	r3, [r7, #34]	; 0x22
    while(measurement < NUM_SAMPLES) //this takes multiple measurements
 8001116:	e00a      	b.n	800112e <analogRead+0xb2>
    {
        sum += adc_buf[measurement];
 8001118:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800111a:	4a0b      	ldr	r2, [pc, #44]	; (8001148 <analogRead+0xcc>)
 800111c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001120:	461a      	mov	r2, r3
 8001122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001124:	4413      	add	r3, r2
 8001126:	627b      	str	r3, [r7, #36]	; 0x24
        ++measurement;
 8001128:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800112a:	3301      	adds	r3, #1
 800112c:	847b      	strh	r3, [r7, #34]	; 0x22
    while(measurement < NUM_SAMPLES) //this takes multiple measurements
 800112e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001130:	2b7f      	cmp	r3, #127	; 0x7f
 8001132:	d9f1      	bls.n	8001118 <analogRead+0x9c>
    }

    return sum/NUM_SAMPLES;
 8001134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001136:	09db      	lsrs	r3, r3, #7
 8001138:	b29b      	uxth	r3, r3
}
 800113a:	4618      	mov	r0, r3
 800113c:	3728      	adds	r7, #40	; 0x28
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	2000003c 	.word	0x2000003c
 8001148:	20000058 	.word	0x20000058

0800114c <HAL_ADC_ConvCpltCallback>:

/*
 This function is called when the ADC buffer is filled
 It stops the ADC and changes our "complete" variable to be "true"
 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
    // stop the ADC
    HAL_ADC_Stop_DMA(hadc);
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f001 fa1d 	bl	8002594 <HAL_ADC_Stop_DMA>
    complete = 1;
 800115a:	4b03      	ldr	r3, [pc, #12]	; (8001168 <HAL_ADC_ConvCpltCallback+0x1c>)
 800115c:	2201      	movs	r2, #1
 800115e:	701a      	strb	r2, [r3, #0]
}
 8001160:	bf00      	nop
 8001162:	3708      	adds	r7, #8
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	2000003c 	.word	0x2000003c

0800116c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001170:	f001 f880 	bl	8002274 <HAL_Init>

  /* USER CODE BEGIN Init */
  Delay_Init();
 8001174:	f7ff fe90 	bl	8000e98 <Delay_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001178:	f000 f868 	bl	800124c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800117c:	f000 fa36 	bl	80015ec <MX_GPIO_Init>
  MX_TIM3_Init();
 8001180:	f000 f946 	bl	8001410 <MX_TIM3_Init>
  MX_TIM2_Init();
 8001184:	f000 f8f0 	bl	8001368 <MX_TIM2_Init>
  MX_DMA_Init();
 8001188:	f000 fa10 	bl	80015ac <MX_DMA_Init>
  MX_ADC1_Init();
 800118c:	f000 f89a 	bl	80012c4 <MX_ADC1_Init>
  MX_TIM4_Init();
 8001190:	f000 f992 	bl	80014b8 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001194:	213c      	movs	r1, #60	; 0x3c
 8001196:	4823      	ldr	r0, [pc, #140]	; (8001224 <main+0xb8>)
 8001198:	f003 f958 	bl	800444c <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 800119c:	213c      	movs	r1, #60	; 0x3c
 800119e:	4822      	ldr	r0, [pc, #136]	; (8001228 <main+0xbc>)
 80011a0:	f003 f954 	bl	800444c <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80011a4:	2100      	movs	r1, #0
 80011a6:	4821      	ldr	r0, [pc, #132]	; (800122c <main+0xc0>)
 80011a8:	f002 ffe2 	bl	8004170 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80011ac:	2104      	movs	r1, #4
 80011ae:	481f      	ldr	r0, [pc, #124]	; (800122c <main+0xc0>)
 80011b0:	f002 ffde 	bl	8004170 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80011b4:	2108      	movs	r1, #8
 80011b6:	481d      	ldr	r0, [pc, #116]	; (800122c <main+0xc0>)
 80011b8:	f002 ffda 	bl	8004170 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80011bc:	210c      	movs	r1, #12
 80011be:	481b      	ldr	r0, [pc, #108]	; (800122c <main+0xc0>)
 80011c0:	f002 ffd6 	bl	8004170 <HAL_TIM_PWM_Start>

  resetPID();
 80011c4:	f000 fb3c 	bl	8001840 <resetPID>

  HAL_GPIO_WritePin(GPIOC, LED1_Pin, GPIO_PIN_SET);
 80011c8:	2201      	movs	r2, #1
 80011ca:	2101      	movs	r1, #1
 80011cc:	4818      	ldr	r0, [pc, #96]	; (8001230 <main+0xc4>)
 80011ce:	f002 fb75 	bl	80038bc <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	delayMicroseconds(5);
 80011d2:	2005      	movs	r0, #5
 80011d4:	f7ff fe80 	bl	8000ed8 <delayMicroseconds>
	left_counts = getLeftEncoderCounts();
 80011d8:	f7ff fea4 	bl	8000f24 <getLeftEncoderCounts>
 80011dc:	4603      	mov	r3, r0
 80011de:	b21a      	sxth	r2, r3
 80011e0:	4b14      	ldr	r3, [pc, #80]	; (8001234 <main+0xc8>)
 80011e2:	801a      	strh	r2, [r3, #0]
	right_counts = getRightEncoderCounts();
 80011e4:	f7ff fe92 	bl	8000f0c <getRightEncoderCounts>
 80011e8:	4603      	mov	r3, r0
 80011ea:	b21a      	sxth	r2, r3
 80011ec:	4b12      	ldr	r3, [pc, #72]	; (8001238 <main+0xcc>)
 80011ee:	801a      	strh	r2, [r3, #0]
	left_IR = readLeftIR();
 80011f0:	f7ff ff24 	bl	800103c <readLeftIR>
 80011f4:	4603      	mov	r3, r0
 80011f6:	b21a      	sxth	r2, r3
 80011f8:	4b10      	ldr	r3, [pc, #64]	; (800123c <main+0xd0>)
 80011fa:	801a      	strh	r2, [r3, #0]
	right_IR = readRightIR();
 80011fc:	f7ff ff36 	bl	800106c <readRightIR>
 8001200:	4603      	mov	r3, r0
 8001202:	b21a      	sxth	r2, r3
 8001204:	4b0e      	ldr	r3, [pc, #56]	; (8001240 <main+0xd4>)
 8001206:	801a      	strh	r2, [r3, #0]
	fleft_IR = readFrontLeftIR();
 8001208:	f7ff ff20 	bl	800104c <readFrontLeftIR>
 800120c:	4603      	mov	r3, r0
 800120e:	b21a      	sxth	r2, r3
 8001210:	4b0c      	ldr	r3, [pc, #48]	; (8001244 <main+0xd8>)
 8001212:	801a      	strh	r2, [r3, #0]
	fright_IR = readFrontRightIR();
 8001214:	f7ff ff22 	bl	800105c <readFrontRightIR>
 8001218:	4603      	mov	r3, r0
 800121a:	b21a      	sxth	r2, r3
 800121c:	4b0a      	ldr	r3, [pc, #40]	; (8001248 <main+0xdc>)
 800121e:	801a      	strh	r2, [r3, #0]
  {
 8001220:	e7d7      	b.n	80011d2 <main+0x66>
 8001222:	bf00      	nop
 8001224:	2000029c 	.word	0x2000029c
 8001228:	200001a8 	.word	0x200001a8
 800122c:	2000015c 	.word	0x2000015c
 8001230:	40020800 	.word	0x40020800
 8001234:	2000003e 	.word	0x2000003e
 8001238:	20000040 	.word	0x20000040
 800123c:	200001a6 	.word	0x200001a6
 8001240:	200001f0 	.word	0x200001f0
 8001244:	20000158 	.word	0x20000158
 8001248:	200001a4 	.word	0x200001a4

0800124c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b092      	sub	sp, #72	; 0x48
 8001250:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001252:	f107 0318 	add.w	r3, r7, #24
 8001256:	2230      	movs	r2, #48	; 0x30
 8001258:	2100      	movs	r1, #0
 800125a:	4618      	mov	r0, r3
 800125c:	f003 fe96 	bl	8004f8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001260:	1d3b      	adds	r3, r7, #4
 8001262:	2200      	movs	r2, #0
 8001264:	601a      	str	r2, [r3, #0]
 8001266:	605a      	str	r2, [r3, #4]
 8001268:	609a      	str	r2, [r3, #8]
 800126a:	60da      	str	r2, [r3, #12]
 800126c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800126e:	2302      	movs	r3, #2
 8001270:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001272:	2301      	movs	r3, #1
 8001274:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001276:	2310      	movs	r3, #16
 8001278:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800127a:	2300      	movs	r3, #0
 800127c:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800127e:	f107 0318 	add.w	r3, r7, #24
 8001282:	4618      	mov	r0, r3
 8001284:	f002 fb32 	bl	80038ec <HAL_RCC_OscConfig>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800128e:	f000 fa1d 	bl	80016cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001292:	230f      	movs	r3, #15
 8001294:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001296:	2300      	movs	r3, #0
 8001298:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800129a:	2300      	movs	r3, #0
 800129c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800129e:	2300      	movs	r3, #0
 80012a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012a2:	2300      	movs	r3, #0
 80012a4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80012a6:	1d3b      	adds	r3, r7, #4
 80012a8:	2100      	movs	r1, #0
 80012aa:	4618      	mov	r0, r3
 80012ac:	f002 fd6e 	bl	8003d8c <HAL_RCC_ClockConfig>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80012b6:	f000 fa09 	bl	80016cc <Error_Handler>
  }
}
 80012ba:	bf00      	nop
 80012bc:	3748      	adds	r7, #72	; 0x48
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
	...

080012c4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012ca:	463b      	mov	r3, r7
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	605a      	str	r2, [r3, #4]
 80012d2:	609a      	str	r2, [r3, #8]
 80012d4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80012d6:	4b21      	ldr	r3, [pc, #132]	; (800135c <MX_ADC1_Init+0x98>)
 80012d8:	4a21      	ldr	r2, [pc, #132]	; (8001360 <MX_ADC1_Init+0x9c>)
 80012da:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80012dc:	4b1f      	ldr	r3, [pc, #124]	; (800135c <MX_ADC1_Init+0x98>)
 80012de:	2200      	movs	r2, #0
 80012e0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012e2:	4b1e      	ldr	r3, [pc, #120]	; (800135c <MX_ADC1_Init+0x98>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80012e8:	4b1c      	ldr	r3, [pc, #112]	; (800135c <MX_ADC1_Init+0x98>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80012ee:	4b1b      	ldr	r3, [pc, #108]	; (800135c <MX_ADC1_Init+0x98>)
 80012f0:	2201      	movs	r2, #1
 80012f2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012f4:	4b19      	ldr	r3, [pc, #100]	; (800135c <MX_ADC1_Init+0x98>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012fc:	4b17      	ldr	r3, [pc, #92]	; (800135c <MX_ADC1_Init+0x98>)
 80012fe:	2200      	movs	r2, #0
 8001300:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001302:	4b16      	ldr	r3, [pc, #88]	; (800135c <MX_ADC1_Init+0x98>)
 8001304:	4a17      	ldr	r2, [pc, #92]	; (8001364 <MX_ADC1_Init+0xa0>)
 8001306:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001308:	4b14      	ldr	r3, [pc, #80]	; (800135c <MX_ADC1_Init+0x98>)
 800130a:	2200      	movs	r2, #0
 800130c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800130e:	4b13      	ldr	r3, [pc, #76]	; (800135c <MX_ADC1_Init+0x98>)
 8001310:	2201      	movs	r2, #1
 8001312:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001314:	4b11      	ldr	r3, [pc, #68]	; (800135c <MX_ADC1_Init+0x98>)
 8001316:	2200      	movs	r2, #0
 8001318:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800131c:	4b0f      	ldr	r3, [pc, #60]	; (800135c <MX_ADC1_Init+0x98>)
 800131e:	2201      	movs	r2, #1
 8001320:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001322:	480e      	ldr	r0, [pc, #56]	; (800135c <MX_ADC1_Init+0x98>)
 8001324:	f001 f814 	bl	8002350 <HAL_ADC_Init>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800132e:	f000 f9cd 	bl	80016cc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001332:	2302      	movs	r3, #2
 8001334:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001336:	2301      	movs	r3, #1
 8001338:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800133a:	2300      	movs	r3, #0
 800133c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800133e:	463b      	mov	r3, r7
 8001340:	4619      	mov	r1, r3
 8001342:	4806      	ldr	r0, [pc, #24]	; (800135c <MX_ADC1_Init+0x98>)
 8001344:	f001 f98a 	bl	800265c <HAL_ADC_ConfigChannel>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800134e:	f000 f9bd 	bl	80016cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001352:	bf00      	nop
 8001354:	3710      	adds	r7, #16
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	200001f4 	.word	0x200001f4
 8001360:	40012000 	.word	0x40012000
 8001364:	0f000001 	.word	0x0f000001

08001368 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b08c      	sub	sp, #48	; 0x30
 800136c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800136e:	f107 030c 	add.w	r3, r7, #12
 8001372:	2224      	movs	r2, #36	; 0x24
 8001374:	2100      	movs	r1, #0
 8001376:	4618      	mov	r0, r3
 8001378:	f003 fe08 	bl	8004f8c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800137c:	1d3b      	adds	r3, r7, #4
 800137e:	2200      	movs	r2, #0
 8001380:	601a      	str	r2, [r3, #0]
 8001382:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001384:	4b21      	ldr	r3, [pc, #132]	; (800140c <MX_TIM2_Init+0xa4>)
 8001386:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800138a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800138c:	4b1f      	ldr	r3, [pc, #124]	; (800140c <MX_TIM2_Init+0xa4>)
 800138e:	2200      	movs	r2, #0
 8001390:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001392:	4b1e      	ldr	r3, [pc, #120]	; (800140c <MX_TIM2_Init+0xa4>)
 8001394:	2200      	movs	r2, #0
 8001396:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001398:	4b1c      	ldr	r3, [pc, #112]	; (800140c <MX_TIM2_Init+0xa4>)
 800139a:	f04f 32ff 	mov.w	r2, #4294967295
 800139e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013a0:	4b1a      	ldr	r3, [pc, #104]	; (800140c <MX_TIM2_Init+0xa4>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013a6:	4b19      	ldr	r3, [pc, #100]	; (800140c <MX_TIM2_Init+0xa4>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80013ac:	2303      	movs	r3, #3
 80013ae:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80013b0:	2300      	movs	r3, #0
 80013b2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80013b4:	2301      	movs	r3, #1
 80013b6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80013b8:	2300      	movs	r3, #0
 80013ba:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80013bc:	2300      	movs	r3, #0
 80013be:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80013c0:	2300      	movs	r3, #0
 80013c2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80013c4:	2301      	movs	r3, #1
 80013c6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80013c8:	2300      	movs	r3, #0
 80013ca:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80013cc:	2300      	movs	r3, #0
 80013ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80013d0:	f107 030c 	add.w	r3, r7, #12
 80013d4:	4619      	mov	r1, r3
 80013d6:	480d      	ldr	r0, [pc, #52]	; (800140c <MX_TIM2_Init+0xa4>)
 80013d8:	f002 ff92 	bl	8004300 <HAL_TIM_Encoder_Init>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80013e2:	f000 f973 	bl	80016cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013e6:	2300      	movs	r3, #0
 80013e8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013ea:	2300      	movs	r3, #0
 80013ec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013ee:	1d3b      	adds	r3, r7, #4
 80013f0:	4619      	mov	r1, r3
 80013f2:	4806      	ldr	r0, [pc, #24]	; (800140c <MX_TIM2_Init+0xa4>)
 80013f4:	f003 fd1a 	bl	8004e2c <HAL_TIMEx_MasterConfigSynchronization>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80013fe:	f000 f965 	bl	80016cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001402:	bf00      	nop
 8001404:	3730      	adds	r7, #48	; 0x30
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	2000029c 	.word	0x2000029c

08001410 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b08c      	sub	sp, #48	; 0x30
 8001414:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001416:	f107 030c 	add.w	r3, r7, #12
 800141a:	2224      	movs	r2, #36	; 0x24
 800141c:	2100      	movs	r1, #0
 800141e:	4618      	mov	r0, r3
 8001420:	f003 fdb4 	bl	8004f8c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001424:	1d3b      	adds	r3, r7, #4
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800142c:	4b20      	ldr	r3, [pc, #128]	; (80014b0 <MX_TIM3_Init+0xa0>)
 800142e:	4a21      	ldr	r2, [pc, #132]	; (80014b4 <MX_TIM3_Init+0xa4>)
 8001430:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001432:	4b1f      	ldr	r3, [pc, #124]	; (80014b0 <MX_TIM3_Init+0xa0>)
 8001434:	2200      	movs	r2, #0
 8001436:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001438:	4b1d      	ldr	r3, [pc, #116]	; (80014b0 <MX_TIM3_Init+0xa0>)
 800143a:	2200      	movs	r2, #0
 800143c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800143e:	4b1c      	ldr	r3, [pc, #112]	; (80014b0 <MX_TIM3_Init+0xa0>)
 8001440:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001444:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001446:	4b1a      	ldr	r3, [pc, #104]	; (80014b0 <MX_TIM3_Init+0xa0>)
 8001448:	2200      	movs	r2, #0
 800144a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800144c:	4b18      	ldr	r3, [pc, #96]	; (80014b0 <MX_TIM3_Init+0xa0>)
 800144e:	2200      	movs	r2, #0
 8001450:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001452:	2303      	movs	r3, #3
 8001454:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001456:	2300      	movs	r3, #0
 8001458:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800145a:	2301      	movs	r3, #1
 800145c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800145e:	2300      	movs	r3, #0
 8001460:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001462:	2300      	movs	r3, #0
 8001464:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001466:	2300      	movs	r3, #0
 8001468:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800146a:	2301      	movs	r3, #1
 800146c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800146e:	2300      	movs	r3, #0
 8001470:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001472:	2300      	movs	r3, #0
 8001474:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001476:	f107 030c 	add.w	r3, r7, #12
 800147a:	4619      	mov	r1, r3
 800147c:	480c      	ldr	r0, [pc, #48]	; (80014b0 <MX_TIM3_Init+0xa0>)
 800147e:	f002 ff3f 	bl	8004300 <HAL_TIM_Encoder_Init>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001488:	f000 f920 	bl	80016cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800148c:	2300      	movs	r3, #0
 800148e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001490:	2300      	movs	r3, #0
 8001492:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001494:	1d3b      	adds	r3, r7, #4
 8001496:	4619      	mov	r1, r3
 8001498:	4805      	ldr	r0, [pc, #20]	; (80014b0 <MX_TIM3_Init+0xa0>)
 800149a:	f003 fcc7 	bl	8004e2c <HAL_TIMEx_MasterConfigSynchronization>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80014a4:	f000 f912 	bl	80016cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80014a8:	bf00      	nop
 80014aa:	3730      	adds	r7, #48	; 0x30
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	200001a8 	.word	0x200001a8
 80014b4:	40000400 	.word	0x40000400

080014b8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b08a      	sub	sp, #40	; 0x28
 80014bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014be:	f107 0320 	add.w	r3, r7, #32
 80014c2:	2200      	movs	r2, #0
 80014c4:	601a      	str	r2, [r3, #0]
 80014c6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014c8:	1d3b      	adds	r3, r7, #4
 80014ca:	2200      	movs	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]
 80014ce:	605a      	str	r2, [r3, #4]
 80014d0:	609a      	str	r2, [r3, #8]
 80014d2:	60da      	str	r2, [r3, #12]
 80014d4:	611a      	str	r2, [r3, #16]
 80014d6:	615a      	str	r2, [r3, #20]
 80014d8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80014da:	4b32      	ldr	r3, [pc, #200]	; (80015a4 <MX_TIM4_Init+0xec>)
 80014dc:	4a32      	ldr	r2, [pc, #200]	; (80015a8 <MX_TIM4_Init+0xf0>)
 80014de:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80014e0:	4b30      	ldr	r3, [pc, #192]	; (80015a4 <MX_TIM4_Init+0xec>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014e6:	4b2f      	ldr	r3, [pc, #188]	; (80015a4 <MX_TIM4_Init+0xec>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 3199;
 80014ec:	4b2d      	ldr	r3, [pc, #180]	; (80015a4 <MX_TIM4_Init+0xec>)
 80014ee:	f640 427f 	movw	r2, #3199	; 0xc7f
 80014f2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014f4:	4b2b      	ldr	r3, [pc, #172]	; (80015a4 <MX_TIM4_Init+0xec>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014fa:	4b2a      	ldr	r3, [pc, #168]	; (80015a4 <MX_TIM4_Init+0xec>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001500:	4828      	ldr	r0, [pc, #160]	; (80015a4 <MX_TIM4_Init+0xec>)
 8001502:	f002 fde5 	bl	80040d0 <HAL_TIM_PWM_Init>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 800150c:	f000 f8de 	bl	80016cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001510:	2300      	movs	r3, #0
 8001512:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001514:	2300      	movs	r3, #0
 8001516:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001518:	f107 0320 	add.w	r3, r7, #32
 800151c:	4619      	mov	r1, r3
 800151e:	4821      	ldr	r0, [pc, #132]	; (80015a4 <MX_TIM4_Init+0xec>)
 8001520:	f003 fc84 	bl	8004e2c <HAL_TIMEx_MasterConfigSynchronization>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800152a:	f000 f8cf 	bl	80016cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800152e:	2360      	movs	r3, #96	; 0x60
 8001530:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001532:	2300      	movs	r3, #0
 8001534:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001536:	2300      	movs	r3, #0
 8001538:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800153a:	2300      	movs	r3, #0
 800153c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800153e:	1d3b      	adds	r3, r7, #4
 8001540:	2200      	movs	r2, #0
 8001542:	4619      	mov	r1, r3
 8001544:	4817      	ldr	r0, [pc, #92]	; (80015a4 <MX_TIM4_Init+0xec>)
 8001546:	f003 f917 	bl	8004778 <HAL_TIM_PWM_ConfigChannel>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001550:	f000 f8bc 	bl	80016cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001554:	1d3b      	adds	r3, r7, #4
 8001556:	2204      	movs	r2, #4
 8001558:	4619      	mov	r1, r3
 800155a:	4812      	ldr	r0, [pc, #72]	; (80015a4 <MX_TIM4_Init+0xec>)
 800155c:	f003 f90c 	bl	8004778 <HAL_TIM_PWM_ConfigChannel>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001566:	f000 f8b1 	bl	80016cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800156a:	1d3b      	adds	r3, r7, #4
 800156c:	2208      	movs	r2, #8
 800156e:	4619      	mov	r1, r3
 8001570:	480c      	ldr	r0, [pc, #48]	; (80015a4 <MX_TIM4_Init+0xec>)
 8001572:	f003 f901 	bl	8004778 <HAL_TIM_PWM_ConfigChannel>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 800157c:	f000 f8a6 	bl	80016cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001580:	1d3b      	adds	r3, r7, #4
 8001582:	220c      	movs	r2, #12
 8001584:	4619      	mov	r1, r3
 8001586:	4807      	ldr	r0, [pc, #28]	; (80015a4 <MX_TIM4_Init+0xec>)
 8001588:	f003 f8f6 	bl	8004778 <HAL_TIM_PWM_ConfigChannel>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 8001592:	f000 f89b 	bl	80016cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001596:	4803      	ldr	r0, [pc, #12]	; (80015a4 <MX_TIM4_Init+0xec>)
 8001598:	f000 fd88 	bl	80020ac <HAL_TIM_MspPostInit>

}
 800159c:	bf00      	nop
 800159e:	3728      	adds	r7, #40	; 0x28
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	2000015c 	.word	0x2000015c
 80015a8:	40000800 	.word	0x40000800

080015ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80015b2:	2300      	movs	r3, #0
 80015b4:	607b      	str	r3, [r7, #4]
 80015b6:	4b0c      	ldr	r3, [pc, #48]	; (80015e8 <MX_DMA_Init+0x3c>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ba:	4a0b      	ldr	r2, [pc, #44]	; (80015e8 <MX_DMA_Init+0x3c>)
 80015bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80015c0:	6313      	str	r3, [r2, #48]	; 0x30
 80015c2:	4b09      	ldr	r3, [pc, #36]	; (80015e8 <MX_DMA_Init+0x3c>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015ca:	607b      	str	r3, [r7, #4]
 80015cc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80015ce:	2200      	movs	r2, #0
 80015d0:	2100      	movs	r1, #0
 80015d2:	2038      	movs	r0, #56	; 0x38
 80015d4:	f001 fbc1 	bl	8002d5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80015d8:	2038      	movs	r0, #56	; 0x38
 80015da:	f001 fbda 	bl	8002d92 <HAL_NVIC_EnableIRQ>

}
 80015de:	bf00      	nop
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	40023800 	.word	0x40023800

080015ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b088      	sub	sp, #32
 80015f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f2:	f107 030c 	add.w	r3, r7, #12
 80015f6:	2200      	movs	r2, #0
 80015f8:	601a      	str	r2, [r3, #0]
 80015fa:	605a      	str	r2, [r3, #4]
 80015fc:	609a      	str	r2, [r3, #8]
 80015fe:	60da      	str	r2, [r3, #12]
 8001600:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	60bb      	str	r3, [r7, #8]
 8001606:	4b29      	ldr	r3, [pc, #164]	; (80016ac <MX_GPIO_Init+0xc0>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	4a28      	ldr	r2, [pc, #160]	; (80016ac <MX_GPIO_Init+0xc0>)
 800160c:	f043 0304 	orr.w	r3, r3, #4
 8001610:	6313      	str	r3, [r2, #48]	; 0x30
 8001612:	4b26      	ldr	r3, [pc, #152]	; (80016ac <MX_GPIO_Init+0xc0>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	f003 0304 	and.w	r3, r3, #4
 800161a:	60bb      	str	r3, [r7, #8]
 800161c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800161e:	2300      	movs	r3, #0
 8001620:	607b      	str	r3, [r7, #4]
 8001622:	4b22      	ldr	r3, [pc, #136]	; (80016ac <MX_GPIO_Init+0xc0>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	4a21      	ldr	r2, [pc, #132]	; (80016ac <MX_GPIO_Init+0xc0>)
 8001628:	f043 0301 	orr.w	r3, r3, #1
 800162c:	6313      	str	r3, [r2, #48]	; 0x30
 800162e:	4b1f      	ldr	r3, [pc, #124]	; (80016ac <MX_GPIO_Init+0xc0>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001632:	f003 0301 	and.w	r3, r3, #1
 8001636:	607b      	str	r3, [r7, #4]
 8001638:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800163a:	2300      	movs	r3, #0
 800163c:	603b      	str	r3, [r7, #0]
 800163e:	4b1b      	ldr	r3, [pc, #108]	; (80016ac <MX_GPIO_Init+0xc0>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001642:	4a1a      	ldr	r2, [pc, #104]	; (80016ac <MX_GPIO_Init+0xc0>)
 8001644:	f043 0302 	orr.w	r3, r3, #2
 8001648:	6313      	str	r3, [r2, #48]	; 0x30
 800164a:	4b18      	ldr	r3, [pc, #96]	; (80016ac <MX_GPIO_Init+0xc0>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164e:	f003 0302 	and.w	r3, r3, #2
 8001652:	603b      	str	r3, [r7, #0]
 8001654:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin|LeftEmitter_Pin, GPIO_PIN_RESET);
 8001656:	2200      	movs	r2, #0
 8001658:	2143      	movs	r1, #67	; 0x43
 800165a:	4815      	ldr	r0, [pc, #84]	; (80016b0 <MX_GPIO_Init+0xc4>)
 800165c:	f002 f92e 	bl	80038bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RightEmitter_Pin|FrontRightEmitter_Pin|FrontLeftEmitter_Pin, GPIO_PIN_RESET);
 8001660:	2200      	movs	r2, #0
 8001662:	21a8      	movs	r1, #168	; 0xa8
 8001664:	4813      	ldr	r0, [pc, #76]	; (80016b4 <MX_GPIO_Init+0xc8>)
 8001666:	f002 f929 	bl	80038bc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LeftEmitter_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LeftEmitter_Pin;
 800166a:	2343      	movs	r3, #67	; 0x43
 800166c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800166e:	2301      	movs	r3, #1
 8001670:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001672:	2300      	movs	r3, #0
 8001674:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001676:	2300      	movs	r3, #0
 8001678:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800167a:	f107 030c 	add.w	r3, r7, #12
 800167e:	4619      	mov	r1, r3
 8001680:	480b      	ldr	r0, [pc, #44]	; (80016b0 <MX_GPIO_Init+0xc4>)
 8001682:	f001 ff7d 	bl	8003580 <HAL_GPIO_Init>

  /*Configure GPIO pins : RightEmitter_Pin FrontRightEmitter_Pin FrontLeftEmitter_Pin */
  GPIO_InitStruct.Pin = RightEmitter_Pin|FrontRightEmitter_Pin|FrontLeftEmitter_Pin;
 8001686:	23a8      	movs	r3, #168	; 0xa8
 8001688:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800168a:	2301      	movs	r3, #1
 800168c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168e:	2300      	movs	r3, #0
 8001690:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001692:	2300      	movs	r3, #0
 8001694:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001696:	f107 030c 	add.w	r3, r7, #12
 800169a:	4619      	mov	r1, r3
 800169c:	4805      	ldr	r0, [pc, #20]	; (80016b4 <MX_GPIO_Init+0xc8>)
 800169e:	f001 ff6f 	bl	8003580 <HAL_GPIO_Init>

}
 80016a2:	bf00      	nop
 80016a4:	3720      	adds	r7, #32
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	40023800 	.word	0x40023800
 80016b0:	40020800 	.word	0x40020800
 80016b4:	40020000 	.word	0x40020000

080016b8 <Get_HADC1_Ptr>:

/* USER CODE BEGIN 4 */
ADC_HandleTypeDef* Get_HADC1_Ptr(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
    return &hadc1;
 80016bc:	4b02      	ldr	r3, [pc, #8]	; (80016c8 <Get_HADC1_Ptr+0x10>)
}
 80016be:	4618      	mov	r0, r3
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bc80      	pop	{r7}
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	200001f4 	.word	0x200001f4

080016cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016d0:	b672      	cpsid	i
}
 80016d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016d4:	e7fe      	b.n	80016d4 <Error_Handler+0x8>
	...

080016d8 <limitPWM>:
#include "motors.h"

/*
 * This function should return PWM_MAX if pwm > PWM_MAX, -PWM_MAX if pwm < -PWM_MAX, and pwm otherwise.
 */
float limitPWM(float pwm) {
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
	if (pwm > PWM_MAX) {
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	f7fe ff89 	bl	80005f8 <__aeabi_f2d>
 80016e6:	a30e      	add	r3, pc, #56	; (adr r3, 8001720 <limitPWM+0x48>)
 80016e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ec:	f7ff f85a 	bl	80007a4 <__aeabi_dcmpgt>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <limitPWM+0x22>
		return PWM_MAX;
 80016f6:	4b0e      	ldr	r3, [pc, #56]	; (8001730 <limitPWM+0x58>)
 80016f8:	e00d      	b.n	8001716 <limitPWM+0x3e>
	} else if (pwm < -PWM_MAX) {
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f7fe ff7c 	bl	80005f8 <__aeabi_f2d>
 8001700:	a309      	add	r3, pc, #36	; (adr r3, 8001728 <limitPWM+0x50>)
 8001702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001706:	f7ff f82f 	bl	8000768 <__aeabi_dcmplt>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <limitPWM+0x3c>
		return -PWM_MAX;
 8001710:	4b08      	ldr	r3, [pc, #32]	; (8001734 <limitPWM+0x5c>)
 8001712:	e000      	b.n	8001716 <limitPWM+0x3e>
	} else {
		return pwm;
 8001714:	687b      	ldr	r3, [r7, #4]
	}
}
 8001716:	4618      	mov	r0, r3
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	9999999a 	.word	0x9999999a
 8001724:	3fe99999 	.word	0x3fe99999
 8001728:	9999999a 	.word	0x9999999a
 800172c:	bfe99999 	.word	0xbfe99999
 8001730:	3f4ccccd 	.word	0x3f4ccccd
 8001734:	bf4ccccd 	.word	0xbf4ccccd

08001738 <setMotorLPWM>:
 * IMPORTANT: NEVER SET BOTH THE FORWARD AND BACKWARD CHANNELS TO NON-ZERO VALUES AT THE SAME TIME. As mentioned in lecture, this can
 * destroy your h-bridge. When setting a channel, always set the other channel to zero first.
 *
 * Implement this function to make the left wheel spin forwards when pwm is >= 0, and spin backwards when pwm < 0.
 */
void setMotorLPWM(float pwm) {
 8001738:	b590      	push	{r4, r7, lr}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
	if (pwm >= 0) {
 8001740:	f04f 0100 	mov.w	r1, #0
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f7ff f9f7 	bl	8000b38 <__aeabi_fcmpge>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d012      	beq.n	8001776 <setMotorLPWM+0x3e>
		TIM4->CCR2 = 0;
 8001750:	4b14      	ldr	r3, [pc, #80]	; (80017a4 <setMotorLPWM+0x6c>)
 8001752:	2200      	movs	r2, #0
 8001754:	639a      	str	r2, [r3, #56]	; 0x38
		TIM4->CCR1 = (uint32_t) (limitPWM(pwm) * MAX_TIMER_COUNTS);
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f7ff ffbe 	bl	80016d8 <limitPWM>
 800175c:	4603      	mov	r3, r0
 800175e:	4912      	ldr	r1, [pc, #72]	; (80017a8 <setMotorLPWM+0x70>)
 8001760:	4618      	mov	r0, r3
 8001762:	f7fe fd31 	bl	80001c8 <__aeabi_fmul>
 8001766:	4603      	mov	r3, r0
 8001768:	4c0e      	ldr	r4, [pc, #56]	; (80017a4 <setMotorLPWM+0x6c>)
 800176a:	4618      	mov	r0, r3
 800176c:	f7ff f9f8 	bl	8000b60 <__aeabi_f2uiz>
 8001770:	4603      	mov	r3, r0
 8001772:	6363      	str	r3, [r4, #52]	; 0x34
	} else {
		TIM4->CCR1 = 0;
		TIM4->CCR2 = (uint32_t) (limitPWM(pwm) * -MAX_TIMER_COUNTS);
	}
}
 8001774:	e011      	b.n	800179a <setMotorLPWM+0x62>
		TIM4->CCR1 = 0;
 8001776:	4b0b      	ldr	r3, [pc, #44]	; (80017a4 <setMotorLPWM+0x6c>)
 8001778:	2200      	movs	r2, #0
 800177a:	635a      	str	r2, [r3, #52]	; 0x34
		TIM4->CCR2 = (uint32_t) (limitPWM(pwm) * -MAX_TIMER_COUNTS);
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f7ff ffab 	bl	80016d8 <limitPWM>
 8001782:	4603      	mov	r3, r0
 8001784:	4909      	ldr	r1, [pc, #36]	; (80017ac <setMotorLPWM+0x74>)
 8001786:	4618      	mov	r0, r3
 8001788:	f7fe fd1e 	bl	80001c8 <__aeabi_fmul>
 800178c:	4603      	mov	r3, r0
 800178e:	4c05      	ldr	r4, [pc, #20]	; (80017a4 <setMotorLPWM+0x6c>)
 8001790:	4618      	mov	r0, r3
 8001792:	f7ff f9e5 	bl	8000b60 <__aeabi_f2uiz>
 8001796:	4603      	mov	r3, r0
 8001798:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800179a:	bf00      	nop
 800179c:	370c      	adds	r7, #12
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd90      	pop	{r4, r7, pc}
 80017a2:	bf00      	nop
 80017a4:	40000800 	.word	0x40000800
 80017a8:	4547f000 	.word	0x4547f000
 80017ac:	c547f000 	.word	0xc547f000

080017b0 <setMotorRPWM>:
 * IMPORTANT: NEVER SET BOTH THE FORWARD AND BACKWARD CHANNELS TO NON-ZERO VALUES AT THE SAME TIME. As mentioned in lecture, this can
 * destroy your h-bridge. When setting a channel, always set the other channel to zero first.
 *
 * Implement this function to make the right wheel spin forwards when pwm is >= 0, and spin backwards when pwm < 0.
 */
void setMotorRPWM(float pwm) {
 80017b0:	b590      	push	{r4, r7, lr}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
	if (pwm >= 0) {
 80017b8:	f04f 0100 	mov.w	r1, #0
 80017bc:	6878      	ldr	r0, [r7, #4]
 80017be:	f7ff f9bb 	bl	8000b38 <__aeabi_fcmpge>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d012      	beq.n	80017ee <setMotorRPWM+0x3e>
		TIM4->CCR4 = 0;
 80017c8:	4b14      	ldr	r3, [pc, #80]	; (800181c <setMotorRPWM+0x6c>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	641a      	str	r2, [r3, #64]	; 0x40
		TIM4->CCR3 = (uint32_t) (limitPWM(pwm) * MAX_TIMER_COUNTS);
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f7ff ff82 	bl	80016d8 <limitPWM>
 80017d4:	4603      	mov	r3, r0
 80017d6:	4912      	ldr	r1, [pc, #72]	; (8001820 <setMotorRPWM+0x70>)
 80017d8:	4618      	mov	r0, r3
 80017da:	f7fe fcf5 	bl	80001c8 <__aeabi_fmul>
 80017de:	4603      	mov	r3, r0
 80017e0:	4c0e      	ldr	r4, [pc, #56]	; (800181c <setMotorRPWM+0x6c>)
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7ff f9bc 	bl	8000b60 <__aeabi_f2uiz>
 80017e8:	4603      	mov	r3, r0
 80017ea:	63e3      	str	r3, [r4, #60]	; 0x3c
	} else {
		TIM4->CCR3 = 0;
		TIM4->CCR4 = (uint32_t) (limitPWM(pwm) * -MAX_TIMER_COUNTS);
	}
}
 80017ec:	e011      	b.n	8001812 <setMotorRPWM+0x62>
		TIM4->CCR3 = 0;
 80017ee:	4b0b      	ldr	r3, [pc, #44]	; (800181c <setMotorRPWM+0x6c>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM4->CCR4 = (uint32_t) (limitPWM(pwm) * -MAX_TIMER_COUNTS);
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f7ff ff6f 	bl	80016d8 <limitPWM>
 80017fa:	4603      	mov	r3, r0
 80017fc:	4909      	ldr	r1, [pc, #36]	; (8001824 <setMotorRPWM+0x74>)
 80017fe:	4618      	mov	r0, r3
 8001800:	f7fe fce2 	bl	80001c8 <__aeabi_fmul>
 8001804:	4603      	mov	r3, r0
 8001806:	4c05      	ldr	r4, [pc, #20]	; (800181c <setMotorRPWM+0x6c>)
 8001808:	4618      	mov	r0, r3
 800180a:	f7ff f9a9 	bl	8000b60 <__aeabi_f2uiz>
 800180e:	4603      	mov	r3, r0
 8001810:	6423      	str	r3, [r4, #64]	; 0x40
}
 8001812:	bf00      	nop
 8001814:	370c      	adds	r7, #12
 8001816:	46bd      	mov	sp, r7
 8001818:	bd90      	pop	{r4, r7, pc}
 800181a:	bf00      	nop
 800181c:	40000800 	.word	0x40000800
 8001820:	4547f000 	.word	0x4547f000
 8001824:	c547f000 	.word	0xc547f000

08001828 <resetMotors>:

/*
 * Using the two previous setMotorPWM functions, implement resetMotors to set the PWM for both wheels to zero, effectively stopping them.
 */
void resetMotors() {
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
	setMotorLPWM(0);
 800182c:	f04f 0000 	mov.w	r0, #0
 8001830:	f7ff ff82 	bl	8001738 <setMotorLPWM>
	setMotorRPWM(0);
 8001834:	f04f 0000 	mov.w	r0, #0
 8001838:	f7ff ffba 	bl	80017b0 <setMotorRPWM>
}
 800183c:	bf00      	nop
 800183e:	bd80      	pop	{r7, pc}

08001840 <resetPID>:
double wallCorrectionLeft = 0;
double wallCorrectionRight = 0;

int8_t crashCorrecting = 0;

void resetPID() {
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
	 * difference in encoder counts after it turns. If you follow that by telling your rat to drive straight without first
	 * resetting the encoder counts, your rat is going to see a huge angle error and be very unhappy).
	 *
	 * You should additionally set your distance and error goal values (and your oldDistanceError and oldAngleError) to zero.
	 */
	goalAngle = 0;
 8001844:	4b0c      	ldr	r3, [pc, #48]	; (8001878 <resetPID+0x38>)
 8001846:	2200      	movs	r2, #0
 8001848:	601a      	str	r2, [r3, #0]
	goalDistance = 0;
 800184a:	4b0c      	ldr	r3, [pc, #48]	; (800187c <resetPID+0x3c>)
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]
	angleError = 0;
 8001850:	4b0b      	ldr	r3, [pc, #44]	; (8001880 <resetPID+0x40>)
 8001852:	2200      	movs	r2, #0
 8001854:	601a      	str	r2, [r3, #0]
	distanceError = 0;
 8001856:	4b0b      	ldr	r3, [pc, #44]	; (8001884 <resetPID+0x44>)
 8001858:	f04f 0200 	mov.w	r2, #0
 800185c:	601a      	str	r2, [r3, #0]
	oldDistanceError = 0;
 800185e:	4b0a      	ldr	r3, [pc, #40]	; (8001888 <resetPID+0x48>)
 8001860:	f04f 0200 	mov.w	r2, #0
 8001864:	601a      	str	r2, [r3, #0]
	oldAngleError = 0;
 8001866:	4b09      	ldr	r3, [pc, #36]	; (800188c <resetPID+0x4c>)
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]
	resetMotors();
 800186c:	f7ff ffdc 	bl	8001828 <resetMotors>
	resetEncoders();
 8001870:	f7ff fb66 	bl	8000f40 <resetEncoders>
}
 8001874:	bf00      	nop
 8001876:	bd80      	pop	{r7, pc}
 8001878:	2000004c 	.word	0x2000004c
 800187c:	20000050 	.word	0x20000050
 8001880:	20000044 	.word	0x20000044
 8001884:	200002fc 	.word	0x200002fc
 8001888:	200002f8 	.word	0x200002f8
 800188c:	20000048 	.word	0x20000048

08001890 <limitAngleCorrection>:

double limitAngleCorrection(double angleCorrection) {
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	e9c7 0100 	strd	r0, r1, [r7]
	if (angleCorrection > BASE_SPEED) return BASE_SPEED;
 800189a:	4b3a      	ldr	r3, [pc, #232]	; (8001984 <limitAngleCorrection+0xf4>)
 800189c:	4618      	mov	r0, r3
 800189e:	f7fe feab 	bl	80005f8 <__aeabi_f2d>
 80018a2:	4602      	mov	r2, r0
 80018a4:	460b      	mov	r3, r1
 80018a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80018aa:	f7fe ff7b 	bl	80007a4 <__aeabi_dcmpgt>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d006      	beq.n	80018c2 <limitAngleCorrection+0x32>
 80018b4:	4b33      	ldr	r3, [pc, #204]	; (8001984 <limitAngleCorrection+0xf4>)
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7fe fe9e 	bl	80005f8 <__aeabi_f2d>
 80018bc:	4602      	mov	r2, r0
 80018be:	460b      	mov	r3, r1
 80018c0:	e05b      	b.n	800197a <limitAngleCorrection+0xea>
	else if (angleCorrection < -BASE_SPEED) return -BASE_SPEED;
 80018c2:	4b30      	ldr	r3, [pc, #192]	; (8001984 <limitAngleCorrection+0xf4>)
 80018c4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7fe fe95 	bl	80005f8 <__aeabi_f2d>
 80018ce:	4602      	mov	r2, r0
 80018d0:	460b      	mov	r3, r1
 80018d2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80018d6:	f7fe ff47 	bl	8000768 <__aeabi_dcmplt>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d008      	beq.n	80018f2 <limitAngleCorrection+0x62>
 80018e0:	4b28      	ldr	r3, [pc, #160]	; (8001984 <limitAngleCorrection+0xf4>)
 80018e2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7fe fe86 	bl	80005f8 <__aeabi_f2d>
 80018ec:	4602      	mov	r2, r0
 80018ee:	460b      	mov	r3, r1
 80018f0:	e043      	b.n	800197a <limitAngleCorrection+0xea>
	else if (angleCorrection > 0 && angleCorrection <= MIN_SPEED) return MIN_SPEED;
 80018f2:	f04f 0200 	mov.w	r2, #0
 80018f6:	f04f 0300 	mov.w	r3, #0
 80018fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80018fe:	f7fe ff51 	bl	80007a4 <__aeabi_dcmpgt>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d013      	beq.n	8001930 <limitAngleCorrection+0xa0>
 8001908:	4b1f      	ldr	r3, [pc, #124]	; (8001988 <limitAngleCorrection+0xf8>)
 800190a:	4618      	mov	r0, r3
 800190c:	f7fe fe74 	bl	80005f8 <__aeabi_f2d>
 8001910:	4602      	mov	r2, r0
 8001912:	460b      	mov	r3, r1
 8001914:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001918:	f7fe ff30 	bl	800077c <__aeabi_dcmple>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d006      	beq.n	8001930 <limitAngleCorrection+0xa0>
 8001922:	4b19      	ldr	r3, [pc, #100]	; (8001988 <limitAngleCorrection+0xf8>)
 8001924:	4618      	mov	r0, r3
 8001926:	f7fe fe67 	bl	80005f8 <__aeabi_f2d>
 800192a:	4602      	mov	r2, r0
 800192c:	460b      	mov	r3, r1
 800192e:	e024      	b.n	800197a <limitAngleCorrection+0xea>
	else if (angleCorrection < 0 && angleCorrection >= -MIN_SPEED) return -MIN_SPEED;
 8001930:	f04f 0200 	mov.w	r2, #0
 8001934:	f04f 0300 	mov.w	r3, #0
 8001938:	e9d7 0100 	ldrd	r0, r1, [r7]
 800193c:	f7fe ff14 	bl	8000768 <__aeabi_dcmplt>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d017      	beq.n	8001976 <limitAngleCorrection+0xe6>
 8001946:	4b10      	ldr	r3, [pc, #64]	; (8001988 <limitAngleCorrection+0xf8>)
 8001948:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800194c:	4618      	mov	r0, r3
 800194e:	f7fe fe53 	bl	80005f8 <__aeabi_f2d>
 8001952:	4602      	mov	r2, r0
 8001954:	460b      	mov	r3, r1
 8001956:	e9d7 0100 	ldrd	r0, r1, [r7]
 800195a:	f7fe ff19 	bl	8000790 <__aeabi_dcmpge>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d008      	beq.n	8001976 <limitAngleCorrection+0xe6>
 8001964:	4b08      	ldr	r3, [pc, #32]	; (8001988 <limitAngleCorrection+0xf8>)
 8001966:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800196a:	4618      	mov	r0, r3
 800196c:	f7fe fe44 	bl	80005f8 <__aeabi_f2d>
 8001970:	4602      	mov	r2, r0
 8001972:	460b      	mov	r3, r1
 8001974:	e001      	b.n	800197a <limitAngleCorrection+0xea>
	else return angleCorrection;
 8001976:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800197a:	4610      	mov	r0, r2
 800197c:	4619      	mov	r1, r3
 800197e:	3708      	adds	r7, #8
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	3f0ccccd 	.word	0x3f0ccccd
 8001988:	3ea8f5c3 	.word	0x3ea8f5c3

0800198c <limitDistanceCorrection>:

double limitDistanceCorrection(double distanceCorrection) {
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	e9c7 0100 	strd	r0, r1, [r7]
	if (distanceCorrection > BASE_SPEED) return BASE_SPEED;
 8001996:	4b3a      	ldr	r3, [pc, #232]	; (8001a80 <limitDistanceCorrection+0xf4>)
 8001998:	4618      	mov	r0, r3
 800199a:	f7fe fe2d 	bl	80005f8 <__aeabi_f2d>
 800199e:	4602      	mov	r2, r0
 80019a0:	460b      	mov	r3, r1
 80019a2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80019a6:	f7fe fefd 	bl	80007a4 <__aeabi_dcmpgt>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d006      	beq.n	80019be <limitDistanceCorrection+0x32>
 80019b0:	4b33      	ldr	r3, [pc, #204]	; (8001a80 <limitDistanceCorrection+0xf4>)
 80019b2:	4618      	mov	r0, r3
 80019b4:	f7fe fe20 	bl	80005f8 <__aeabi_f2d>
 80019b8:	4602      	mov	r2, r0
 80019ba:	460b      	mov	r3, r1
 80019bc:	e05b      	b.n	8001a76 <limitDistanceCorrection+0xea>
	else if (distanceCorrection < -BASE_SPEED) return -BASE_SPEED;
 80019be:	4b30      	ldr	r3, [pc, #192]	; (8001a80 <limitDistanceCorrection+0xf4>)
 80019c0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7fe fe17 	bl	80005f8 <__aeabi_f2d>
 80019ca:	4602      	mov	r2, r0
 80019cc:	460b      	mov	r3, r1
 80019ce:	e9d7 0100 	ldrd	r0, r1, [r7]
 80019d2:	f7fe fec9 	bl	8000768 <__aeabi_dcmplt>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d008      	beq.n	80019ee <limitDistanceCorrection+0x62>
 80019dc:	4b28      	ldr	r3, [pc, #160]	; (8001a80 <limitDistanceCorrection+0xf4>)
 80019de:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7fe fe08 	bl	80005f8 <__aeabi_f2d>
 80019e8:	4602      	mov	r2, r0
 80019ea:	460b      	mov	r3, r1
 80019ec:	e043      	b.n	8001a76 <limitDistanceCorrection+0xea>
	else if (distanceCorrection > 0 && distanceCorrection <= MIN_SPEED) return MIN_SPEED;
 80019ee:	f04f 0200 	mov.w	r2, #0
 80019f2:	f04f 0300 	mov.w	r3, #0
 80019f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80019fa:	f7fe fed3 	bl	80007a4 <__aeabi_dcmpgt>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d013      	beq.n	8001a2c <limitDistanceCorrection+0xa0>
 8001a04:	4b1f      	ldr	r3, [pc, #124]	; (8001a84 <limitDistanceCorrection+0xf8>)
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7fe fdf6 	bl	80005f8 <__aeabi_f2d>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	460b      	mov	r3, r1
 8001a10:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001a14:	f7fe feb2 	bl	800077c <__aeabi_dcmple>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d006      	beq.n	8001a2c <limitDistanceCorrection+0xa0>
 8001a1e:	4b19      	ldr	r3, [pc, #100]	; (8001a84 <limitDistanceCorrection+0xf8>)
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7fe fde9 	bl	80005f8 <__aeabi_f2d>
 8001a26:	4602      	mov	r2, r0
 8001a28:	460b      	mov	r3, r1
 8001a2a:	e024      	b.n	8001a76 <limitDistanceCorrection+0xea>
	else if (distanceCorrection < 0 && distanceCorrection >= -MIN_SPEED) return -MIN_SPEED;
 8001a2c:	f04f 0200 	mov.w	r2, #0
 8001a30:	f04f 0300 	mov.w	r3, #0
 8001a34:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001a38:	f7fe fe96 	bl	8000768 <__aeabi_dcmplt>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d017      	beq.n	8001a72 <limitDistanceCorrection+0xe6>
 8001a42:	4b10      	ldr	r3, [pc, #64]	; (8001a84 <limitDistanceCorrection+0xf8>)
 8001a44:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7fe fdd5 	bl	80005f8 <__aeabi_f2d>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	460b      	mov	r3, r1
 8001a52:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001a56:	f7fe fe9b 	bl	8000790 <__aeabi_dcmpge>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d008      	beq.n	8001a72 <limitDistanceCorrection+0xe6>
 8001a60:	4b08      	ldr	r3, [pc, #32]	; (8001a84 <limitDistanceCorrection+0xf8>)
 8001a62:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7fe fdc6 	bl	80005f8 <__aeabi_f2d>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	460b      	mov	r3, r1
 8001a70:	e001      	b.n	8001a76 <limitDistanceCorrection+0xea>
	else return distanceCorrection;
 8001a72:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8001a76:	4610      	mov	r0, r2
 8001a78:	4619      	mov	r1, r3
 8001a7a:	3708      	adds	r7, #8
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	3f0ccccd 	.word	0x3f0ccccd
 8001a84:	3ea8f5c3 	.word	0x3ea8f5c3

08001a88 <limitFinalPWM>:

double limitFinalPWM(double finalPWM) {
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	e9c7 0100 	strd	r0, r1, [r7]
	if (finalPWM > BASE_SPEED) return BASE_SPEED;
 8001a92:	4b3a      	ldr	r3, [pc, #232]	; (8001b7c <limitFinalPWM+0xf4>)
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7fe fdaf 	bl	80005f8 <__aeabi_f2d>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001aa2:	f7fe fe7f 	bl	80007a4 <__aeabi_dcmpgt>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d006      	beq.n	8001aba <limitFinalPWM+0x32>
 8001aac:	4b33      	ldr	r3, [pc, #204]	; (8001b7c <limitFinalPWM+0xf4>)
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7fe fda2 	bl	80005f8 <__aeabi_f2d>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	e05b      	b.n	8001b72 <limitFinalPWM+0xea>
	else if (finalPWM < -BASE_SPEED) return -BASE_SPEED;
 8001aba:	4b30      	ldr	r3, [pc, #192]	; (8001b7c <limitFinalPWM+0xf4>)
 8001abc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7fe fd99 	bl	80005f8 <__aeabi_f2d>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	460b      	mov	r3, r1
 8001aca:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001ace:	f7fe fe4b 	bl	8000768 <__aeabi_dcmplt>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d008      	beq.n	8001aea <limitFinalPWM+0x62>
 8001ad8:	4b28      	ldr	r3, [pc, #160]	; (8001b7c <limitFinalPWM+0xf4>)
 8001ada:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f7fe fd8a 	bl	80005f8 <__aeabi_f2d>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	460b      	mov	r3, r1
 8001ae8:	e043      	b.n	8001b72 <limitFinalPWM+0xea>
	else if (finalPWM > 0 && finalPWM <= MIN_SPEED) return MIN_SPEED;
 8001aea:	f04f 0200 	mov.w	r2, #0
 8001aee:	f04f 0300 	mov.w	r3, #0
 8001af2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001af6:	f7fe fe55 	bl	80007a4 <__aeabi_dcmpgt>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d013      	beq.n	8001b28 <limitFinalPWM+0xa0>
 8001b00:	4b1f      	ldr	r3, [pc, #124]	; (8001b80 <limitFinalPWM+0xf8>)
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7fe fd78 	bl	80005f8 <__aeabi_f2d>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b10:	f7fe fe34 	bl	800077c <__aeabi_dcmple>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d006      	beq.n	8001b28 <limitFinalPWM+0xa0>
 8001b1a:	4b19      	ldr	r3, [pc, #100]	; (8001b80 <limitFinalPWM+0xf8>)
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7fe fd6b 	bl	80005f8 <__aeabi_f2d>
 8001b22:	4602      	mov	r2, r0
 8001b24:	460b      	mov	r3, r1
 8001b26:	e024      	b.n	8001b72 <limitFinalPWM+0xea>
	else if (finalPWM < 0 && finalPWM >= -MIN_SPEED) return -MIN_SPEED;
 8001b28:	f04f 0200 	mov.w	r2, #0
 8001b2c:	f04f 0300 	mov.w	r3, #0
 8001b30:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b34:	f7fe fe18 	bl	8000768 <__aeabi_dcmplt>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d017      	beq.n	8001b6e <limitFinalPWM+0xe6>
 8001b3e:	4b10      	ldr	r3, [pc, #64]	; (8001b80 <limitFinalPWM+0xf8>)
 8001b40:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7fe fd57 	bl	80005f8 <__aeabi_f2d>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b52:	f7fe fe1d 	bl	8000790 <__aeabi_dcmpge>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d008      	beq.n	8001b6e <limitFinalPWM+0xe6>
 8001b5c:	4b08      	ldr	r3, [pc, #32]	; (8001b80 <limitFinalPWM+0xf8>)
 8001b5e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7fe fd48 	bl	80005f8 <__aeabi_f2d>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	e001      	b.n	8001b72 <limitFinalPWM+0xea>
	else return finalPWM;
 8001b6e:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8001b72:	4610      	mov	r0, r2
 8001b74:	4619      	mov	r1, r3
 8001b76:	3708      	adds	r7, #8
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	3f0ccccd 	.word	0x3f0ccccd
 8001b80:	3ea8f5c3 	.word	0x3ea8f5c3

08001b84 <updatePID>:

void updatePID() {
 8001b84:	b598      	push	{r3, r4, r7, lr}
 8001b86:	af00      	add	r7, sp, #0
	 * For assignment 3.2: implement this function so it calculates distanceError as the difference between your goal distance and the average of
	 * your left and right encoder counts. Calculate angleError as the difference between your goal angle and the difference between your left and
	 * right encoder counts. Refer to pseudocode example document on the google drive for some pointers.
	 */

	if (goalAngle == 0 && goalDistance == 0) return;
 8001b88:	4b7b      	ldr	r3, [pc, #492]	; (8001d78 <updatePID+0x1f4>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d104      	bne.n	8001b9a <updatePID+0x16>
 8001b90:	4b7a      	ldr	r3, [pc, #488]	; (8001d7c <updatePID+0x1f8>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	f000 80ed 	beq.w	8001d74 <updatePID+0x1f0>
	lc = getLeftEncoderCounts();
 8001b9a:	f7ff f9c3 	bl	8000f24 <getLeftEncoderCounts>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	4b77      	ldr	r3, [pc, #476]	; (8001d80 <updatePID+0x1fc>)
 8001ba4:	601a      	str	r2, [r3, #0]
	rc = getRightEncoderCounts();
 8001ba6:	f7ff f9b1 	bl	8000f0c <getRightEncoderCounts>
 8001baa:	4603      	mov	r3, r0
 8001bac:	461a      	mov	r2, r3
 8001bae:	4b75      	ldr	r3, [pc, #468]	; (8001d84 <updatePID+0x200>)
 8001bb0:	601a      	str	r2, [r3, #0]

	angleError = goalAngle - (lc - rc);
 8001bb2:	4b71      	ldr	r3, [pc, #452]	; (8001d78 <updatePID+0x1f4>)
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	4b72      	ldr	r3, [pc, #456]	; (8001d80 <updatePID+0x1fc>)
 8001bb8:	6819      	ldr	r1, [r3, #0]
 8001bba:	4b72      	ldr	r3, [pc, #456]	; (8001d84 <updatePID+0x200>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	1acb      	subs	r3, r1, r3
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	4a71      	ldr	r2, [pc, #452]	; (8001d88 <updatePID+0x204>)
 8001bc4:	6013      	str	r3, [r2, #0]
	angleCorrection = limitAngleCorrection(kPw * angleError + kDw * (angleError - oldAngleError));
 8001bc6:	4b70      	ldr	r3, [pc, #448]	; (8001d88 <updatePID+0x204>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7fe fefe 	bl	80009cc <__aeabi_i2f>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	4b6e      	ldr	r3, [pc, #440]	; (8001d8c <updatePID+0x208>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	4610      	mov	r0, r2
 8001bda:	f7fe faf5 	bl	80001c8 <__aeabi_fmul>
 8001bde:	4603      	mov	r3, r0
 8001be0:	461c      	mov	r4, r3
 8001be2:	4b69      	ldr	r3, [pc, #420]	; (8001d88 <updatePID+0x204>)
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	4b6a      	ldr	r3, [pc, #424]	; (8001d90 <updatePID+0x20c>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7fe feed 	bl	80009cc <__aeabi_i2f>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	4b67      	ldr	r3, [pc, #412]	; (8001d94 <updatePID+0x210>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	4610      	mov	r0, r2
 8001bfc:	f7fe fae4 	bl	80001c8 <__aeabi_fmul>
 8001c00:	4603      	mov	r3, r0
 8001c02:	4619      	mov	r1, r3
 8001c04:	4620      	mov	r0, r4
 8001c06:	f7fe fe2d 	bl	8000864 <__addsf3>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f7fe fcf3 	bl	80005f8 <__aeabi_f2d>
 8001c12:	4602      	mov	r2, r0
 8001c14:	460b      	mov	r3, r1
 8001c16:	4610      	mov	r0, r2
 8001c18:	4619      	mov	r1, r3
 8001c1a:	f7ff fe39 	bl	8001890 <limitAngleCorrection>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	460b      	mov	r3, r1
 8001c22:	495d      	ldr	r1, [pc, #372]	; (8001d98 <updatePID+0x214>)
 8001c24:	e9c1 2300 	strd	r2, r3, [r1]
	oldAngleError = angleError;
 8001c28:	4b57      	ldr	r3, [pc, #348]	; (8001d88 <updatePID+0x204>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a58      	ldr	r2, [pc, #352]	; (8001d90 <updatePID+0x20c>)
 8001c2e:	6013      	str	r3, [r2, #0]

	distanceError = goalDistance - ( (lc + rc) / 2 );
 8001c30:	4b53      	ldr	r3, [pc, #332]	; (8001d80 <updatePID+0x1fc>)
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	4b53      	ldr	r3, [pc, #332]	; (8001d84 <updatePID+0x200>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4413      	add	r3, r2
 8001c3a:	0fda      	lsrs	r2, r3, #31
 8001c3c:	4413      	add	r3, r2
 8001c3e:	105b      	asrs	r3, r3, #1
 8001c40:	425b      	negs	r3, r3
 8001c42:	461a      	mov	r2, r3
 8001c44:	4b4d      	ldr	r3, [pc, #308]	; (8001d7c <updatePID+0x1f8>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4413      	add	r3, r2
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7fe febe 	bl	80009cc <__aeabi_i2f>
 8001c50:	4603      	mov	r3, r0
 8001c52:	4a52      	ldr	r2, [pc, #328]	; (8001d9c <updatePID+0x218>)
 8001c54:	6013      	str	r3, [r2, #0]
	distanceCorrection = limitDistanceCorrection(kPx * distanceError + kDx * (distanceError - oldDistanceError));
 8001c56:	4b52      	ldr	r3, [pc, #328]	; (8001da0 <updatePID+0x21c>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a50      	ldr	r2, [pc, #320]	; (8001d9c <updatePID+0x218>)
 8001c5c:	6812      	ldr	r2, [r2, #0]
 8001c5e:	4611      	mov	r1, r2
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7fe fab1 	bl	80001c8 <__aeabi_fmul>
 8001c66:	4603      	mov	r3, r0
 8001c68:	461c      	mov	r4, r3
 8001c6a:	4b4c      	ldr	r3, [pc, #304]	; (8001d9c <updatePID+0x218>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a4d      	ldr	r2, [pc, #308]	; (8001da4 <updatePID+0x220>)
 8001c70:	6812      	ldr	r2, [r2, #0]
 8001c72:	4611      	mov	r1, r2
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7fe fdf3 	bl	8000860 <__aeabi_fsub>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	4b4a      	ldr	r3, [pc, #296]	; (8001da8 <updatePID+0x224>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4619      	mov	r1, r3
 8001c84:	4610      	mov	r0, r2
 8001c86:	f7fe fa9f 	bl	80001c8 <__aeabi_fmul>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	4620      	mov	r0, r4
 8001c90:	f7fe fde8 	bl	8000864 <__addsf3>
 8001c94:	4603      	mov	r3, r0
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7fe fcae 	bl	80005f8 <__aeabi_f2d>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	460b      	mov	r3, r1
 8001ca0:	4610      	mov	r0, r2
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	f7ff fe72 	bl	800198c <limitDistanceCorrection>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	460b      	mov	r3, r1
 8001cac:	493f      	ldr	r1, [pc, #252]	; (8001dac <updatePID+0x228>)
 8001cae:	e9c1 2300 	strd	r2, r3, [r1]
	oldDistanceError = distanceError;
 8001cb2:	4b3a      	ldr	r3, [pc, #232]	; (8001d9c <updatePID+0x218>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a3b      	ldr	r2, [pc, #236]	; (8001da4 <updatePID+0x220>)
 8001cb8:	6013      	str	r3, [r2, #0]

	if (angleError < 2 && angleError > -2 && distanceError < 2 && distanceError > -2) {
 8001cba:	4b33      	ldr	r3, [pc, #204]	; (8001d88 <updatePID+0x204>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	dc24      	bgt.n	8001d0c <updatePID+0x188>
 8001cc2:	4b31      	ldr	r3, [pc, #196]	; (8001d88 <updatePID+0x204>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cca:	db1f      	blt.n	8001d0c <updatePID+0x188>
 8001ccc:	4b33      	ldr	r3, [pc, #204]	; (8001d9c <updatePID+0x218>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7fe ff1b 	bl	8000b10 <__aeabi_fcmplt>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d015      	beq.n	8001d0c <updatePID+0x188>
 8001ce0:	4b2e      	ldr	r3, [pc, #184]	; (8001d9c <updatePID+0x218>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7fe ff2f 	bl	8000b4c <__aeabi_fcmpgt>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d00b      	beq.n	8001d0c <updatePID+0x188>
		lowErrorCount++;
 8001cf4:	4b2e      	ldr	r3, [pc, #184]	; (8001db0 <updatePID+0x22c>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	4a2d      	ldr	r2, [pc, #180]	; (8001db0 <updatePID+0x22c>)
 8001cfc:	6013      	str	r3, [r2, #0]
		if (lowErrorCount >= 50) {
 8001cfe:	4b2c      	ldr	r3, [pc, #176]	; (8001db0 <updatePID+0x22c>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	2b31      	cmp	r3, #49	; 0x31
 8001d04:	dd05      	ble.n	8001d12 <updatePID+0x18e>
			resetPID();
 8001d06:	f7ff fd9b 	bl	8001840 <resetPID>
		if (lowErrorCount >= 50) {
 8001d0a:	e002      	b.n	8001d12 <updatePID+0x18e>
		}
	} else {
		lowErrorCount = 0;
 8001d0c:	4b28      	ldr	r3, [pc, #160]	; (8001db0 <updatePID+0x22c>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	601a      	str	r2, [r3, #0]
	}

	setMotorLPWM(limitFinalPWM(distanceCorrection + angleCorrection));
 8001d12:	4b26      	ldr	r3, [pc, #152]	; (8001dac <updatePID+0x228>)
 8001d14:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d18:	4b1f      	ldr	r3, [pc, #124]	; (8001d98 <updatePID+0x214>)
 8001d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d1e:	f7fe fb0d 	bl	800033c <__adddf3>
 8001d22:	4602      	mov	r2, r0
 8001d24:	460b      	mov	r3, r1
 8001d26:	4610      	mov	r0, r2
 8001d28:	4619      	mov	r1, r3
 8001d2a:	f7ff fead 	bl	8001a88 <limitFinalPWM>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	460b      	mov	r3, r1
 8001d32:	4610      	mov	r0, r2
 8001d34:	4619      	mov	r1, r3
 8001d36:	f7fe fd3f 	bl	80007b8 <__aeabi_d2f>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7ff fcfb 	bl	8001738 <setMotorLPWM>
	setMotorRPWM(limitFinalPWM(distanceCorrection - angleCorrection));
 8001d42:	4b1a      	ldr	r3, [pc, #104]	; (8001dac <updatePID+0x228>)
 8001d44:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d48:	4b13      	ldr	r3, [pc, #76]	; (8001d98 <updatePID+0x214>)
 8001d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d4e:	f7fe faf3 	bl	8000338 <__aeabi_dsub>
 8001d52:	4602      	mov	r2, r0
 8001d54:	460b      	mov	r3, r1
 8001d56:	4610      	mov	r0, r2
 8001d58:	4619      	mov	r1, r3
 8001d5a:	f7ff fe95 	bl	8001a88 <limitFinalPWM>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	460b      	mov	r3, r1
 8001d62:	4610      	mov	r0, r2
 8001d64:	4619      	mov	r1, r3
 8001d66:	f7fe fd27 	bl	80007b8 <__aeabi_d2f>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7ff fd1f 	bl	80017b0 <setMotorRPWM>
 8001d72:	e000      	b.n	8001d76 <updatePID+0x1f2>
	if (goalAngle == 0 && goalDistance == 0) return;
 8001d74:	bf00      	nop
}
 8001d76:	bd98      	pop	{r3, r4, r7, pc}
 8001d78:	2000004c 	.word	0x2000004c
 8001d7c:	20000050 	.word	0x20000050
 8001d80:	20000300 	.word	0x20000300
 8001d84:	200002e8 	.word	0x200002e8
 8001d88:	20000044 	.word	0x20000044
 8001d8c:	20000000 	.word	0x20000000
 8001d90:	20000048 	.word	0x20000048
 8001d94:	20000004 	.word	0x20000004
 8001d98:	200002f0 	.word	0x200002f0
 8001d9c:	200002fc 	.word	0x200002fc
 8001da0:	20000008 	.word	0x20000008
 8001da4:	200002f8 	.word	0x200002f8
 8001da8:	2000000c 	.word	0x2000000c
 8001dac:	20000308 	.word	0x20000308
 8001db0:	20000054 	.word	0x20000054

08001db4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dba:	2300      	movs	r3, #0
 8001dbc:	607b      	str	r3, [r7, #4]
 8001dbe:	4b0f      	ldr	r3, [pc, #60]	; (8001dfc <HAL_MspInit+0x48>)
 8001dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc2:	4a0e      	ldr	r2, [pc, #56]	; (8001dfc <HAL_MspInit+0x48>)
 8001dc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dc8:	6453      	str	r3, [r2, #68]	; 0x44
 8001dca:	4b0c      	ldr	r3, [pc, #48]	; (8001dfc <HAL_MspInit+0x48>)
 8001dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dd2:	607b      	str	r3, [r7, #4]
 8001dd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	603b      	str	r3, [r7, #0]
 8001dda:	4b08      	ldr	r3, [pc, #32]	; (8001dfc <HAL_MspInit+0x48>)
 8001ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dde:	4a07      	ldr	r2, [pc, #28]	; (8001dfc <HAL_MspInit+0x48>)
 8001de0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001de4:	6413      	str	r3, [r2, #64]	; 0x40
 8001de6:	4b05      	ldr	r3, [pc, #20]	; (8001dfc <HAL_MspInit+0x48>)
 8001de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dee:	603b      	str	r3, [r7, #0]
 8001df0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001df2:	bf00      	nop
 8001df4:	370c      	adds	r7, #12
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bc80      	pop	{r7}
 8001dfa:	4770      	bx	lr
 8001dfc:	40023800 	.word	0x40023800

08001e00 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b08a      	sub	sp, #40	; 0x28
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e08:	f107 0314 	add.w	r3, r7, #20
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	601a      	str	r2, [r3, #0]
 8001e10:	605a      	str	r2, [r3, #4]
 8001e12:	609a      	str	r2, [r3, #8]
 8001e14:	60da      	str	r2, [r3, #12]
 8001e16:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a3c      	ldr	r2, [pc, #240]	; (8001f10 <HAL_ADC_MspInit+0x110>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d171      	bne.n	8001f06 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e22:	2300      	movs	r3, #0
 8001e24:	613b      	str	r3, [r7, #16]
 8001e26:	4b3b      	ldr	r3, [pc, #236]	; (8001f14 <HAL_ADC_MspInit+0x114>)
 8001e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e2a:	4a3a      	ldr	r2, [pc, #232]	; (8001f14 <HAL_ADC_MspInit+0x114>)
 8001e2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e30:	6453      	str	r3, [r2, #68]	; 0x44
 8001e32:	4b38      	ldr	r3, [pc, #224]	; (8001f14 <HAL_ADC_MspInit+0x114>)
 8001e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e3a:	613b      	str	r3, [r7, #16]
 8001e3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e3e:	2300      	movs	r3, #0
 8001e40:	60fb      	str	r3, [r7, #12]
 8001e42:	4b34      	ldr	r3, [pc, #208]	; (8001f14 <HAL_ADC_MspInit+0x114>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e46:	4a33      	ldr	r2, [pc, #204]	; (8001f14 <HAL_ADC_MspInit+0x114>)
 8001e48:	f043 0301 	orr.w	r3, r3, #1
 8001e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e4e:	4b31      	ldr	r3, [pc, #196]	; (8001f14 <HAL_ADC_MspInit+0x114>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e52:	f003 0301 	and.w	r3, r3, #1
 8001e56:	60fb      	str	r3, [r7, #12]
 8001e58:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	60bb      	str	r3, [r7, #8]
 8001e5e:	4b2d      	ldr	r3, [pc, #180]	; (8001f14 <HAL_ADC_MspInit+0x114>)
 8001e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e62:	4a2c      	ldr	r2, [pc, #176]	; (8001f14 <HAL_ADC_MspInit+0x114>)
 8001e64:	f043 0304 	orr.w	r3, r3, #4
 8001e68:	6313      	str	r3, [r2, #48]	; 0x30
 8001e6a:	4b2a      	ldr	r3, [pc, #168]	; (8001f14 <HAL_ADC_MspInit+0x114>)
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6e:	f003 0304 	and.w	r3, r3, #4
 8001e72:	60bb      	str	r3, [r7, #8]
 8001e74:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN2
    PA4     ------> ADC1_IN4
    PA6     ------> ADC1_IN6
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = RightReceiver_Pin|FrontRightReceiver_Pin|FrontLeftReceiver_Pin;
 8001e76:	2354      	movs	r3, #84	; 0x54
 8001e78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e82:	f107 0314 	add.w	r3, r7, #20
 8001e86:	4619      	mov	r1, r3
 8001e88:	4823      	ldr	r0, [pc, #140]	; (8001f18 <HAL_ADC_MspInit+0x118>)
 8001e8a:	f001 fb79 	bl	8003580 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LeftReceiver_Pin;
 8001e8e:	2320      	movs	r3, #32
 8001e90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e92:	2303      	movs	r3, #3
 8001e94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e96:	2300      	movs	r3, #0
 8001e98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LeftReceiver_GPIO_Port, &GPIO_InitStruct);
 8001e9a:	f107 0314 	add.w	r3, r7, #20
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	481e      	ldr	r0, [pc, #120]	; (8001f1c <HAL_ADC_MspInit+0x11c>)
 8001ea2:	f001 fb6d 	bl	8003580 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001ea6:	4b1e      	ldr	r3, [pc, #120]	; (8001f20 <HAL_ADC_MspInit+0x120>)
 8001ea8:	4a1e      	ldr	r2, [pc, #120]	; (8001f24 <HAL_ADC_MspInit+0x124>)
 8001eaa:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001eac:	4b1c      	ldr	r3, [pc, #112]	; (8001f20 <HAL_ADC_MspInit+0x120>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001eb2:	4b1b      	ldr	r3, [pc, #108]	; (8001f20 <HAL_ADC_MspInit+0x120>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001eb8:	4b19      	ldr	r3, [pc, #100]	; (8001f20 <HAL_ADC_MspInit+0x120>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001ebe:	4b18      	ldr	r3, [pc, #96]	; (8001f20 <HAL_ADC_MspInit+0x120>)
 8001ec0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ec4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ec6:	4b16      	ldr	r3, [pc, #88]	; (8001f20 <HAL_ADC_MspInit+0x120>)
 8001ec8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ecc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001ece:	4b14      	ldr	r3, [pc, #80]	; (8001f20 <HAL_ADC_MspInit+0x120>)
 8001ed0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ed4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001ed6:	4b12      	ldr	r3, [pc, #72]	; (8001f20 <HAL_ADC_MspInit+0x120>)
 8001ed8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001edc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001ede:	4b10      	ldr	r3, [pc, #64]	; (8001f20 <HAL_ADC_MspInit+0x120>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ee4:	4b0e      	ldr	r3, [pc, #56]	; (8001f20 <HAL_ADC_MspInit+0x120>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001eea:	480d      	ldr	r0, [pc, #52]	; (8001f20 <HAL_ADC_MspInit+0x120>)
 8001eec:	f000 ff6c 	bl	8002dc8 <HAL_DMA_Init>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8001ef6:	f7ff fbe9 	bl	80016cc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a08      	ldr	r2, [pc, #32]	; (8001f20 <HAL_ADC_MspInit+0x120>)
 8001efe:	639a      	str	r2, [r3, #56]	; 0x38
 8001f00:	4a07      	ldr	r2, [pc, #28]	; (8001f20 <HAL_ADC_MspInit+0x120>)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001f06:	bf00      	nop
 8001f08:	3728      	adds	r7, #40	; 0x28
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	40012000 	.word	0x40012000
 8001f14:	40023800 	.word	0x40023800
 8001f18:	40020000 	.word	0x40020000
 8001f1c:	40020800 	.word	0x40020800
 8001f20:	2000023c 	.word	0x2000023c
 8001f24:	40026410 	.word	0x40026410

08001f28 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b08c      	sub	sp, #48	; 0x30
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f30:	f107 031c 	add.w	r3, r7, #28
 8001f34:	2200      	movs	r2, #0
 8001f36:	601a      	str	r2, [r3, #0]
 8001f38:	605a      	str	r2, [r3, #4]
 8001f3a:	609a      	str	r2, [r3, #8]
 8001f3c:	60da      	str	r2, [r3, #12]
 8001f3e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f48:	d14b      	bne.n	8001fe2 <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	61bb      	str	r3, [r7, #24]
 8001f4e:	4b3f      	ldr	r3, [pc, #252]	; (800204c <HAL_TIM_Encoder_MspInit+0x124>)
 8001f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f52:	4a3e      	ldr	r2, [pc, #248]	; (800204c <HAL_TIM_Encoder_MspInit+0x124>)
 8001f54:	f043 0301 	orr.w	r3, r3, #1
 8001f58:	6413      	str	r3, [r2, #64]	; 0x40
 8001f5a:	4b3c      	ldr	r3, [pc, #240]	; (800204c <HAL_TIM_Encoder_MspInit+0x124>)
 8001f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5e:	f003 0301 	and.w	r3, r3, #1
 8001f62:	61bb      	str	r3, [r7, #24]
 8001f64:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f66:	2300      	movs	r3, #0
 8001f68:	617b      	str	r3, [r7, #20]
 8001f6a:	4b38      	ldr	r3, [pc, #224]	; (800204c <HAL_TIM_Encoder_MspInit+0x124>)
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6e:	4a37      	ldr	r2, [pc, #220]	; (800204c <HAL_TIM_Encoder_MspInit+0x124>)
 8001f70:	f043 0301 	orr.w	r3, r3, #1
 8001f74:	6313      	str	r3, [r2, #48]	; 0x30
 8001f76:	4b35      	ldr	r3, [pc, #212]	; (800204c <HAL_TIM_Encoder_MspInit+0x124>)
 8001f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7a:	f003 0301 	and.w	r3, r3, #1
 8001f7e:	617b      	str	r3, [r7, #20]
 8001f80:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f82:	2300      	movs	r3, #0
 8001f84:	613b      	str	r3, [r7, #16]
 8001f86:	4b31      	ldr	r3, [pc, #196]	; (800204c <HAL_TIM_Encoder_MspInit+0x124>)
 8001f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8a:	4a30      	ldr	r2, [pc, #192]	; (800204c <HAL_TIM_Encoder_MspInit+0x124>)
 8001f8c:	f043 0302 	orr.w	r3, r3, #2
 8001f90:	6313      	str	r3, [r2, #48]	; 0x30
 8001f92:	4b2e      	ldr	r3, [pc, #184]	; (800204c <HAL_TIM_Encoder_MspInit+0x124>)
 8001f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f96:	f003 0302 	and.w	r3, r3, #2
 8001f9a:	613b      	str	r3, [r7, #16]
 8001f9c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001f9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001fa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fac:	2300      	movs	r3, #0
 8001fae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fb4:	f107 031c 	add.w	r3, r7, #28
 8001fb8:	4619      	mov	r1, r3
 8001fba:	4825      	ldr	r0, [pc, #148]	; (8002050 <HAL_TIM_Encoder_MspInit+0x128>)
 8001fbc:	f001 fae0 	bl	8003580 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001fc0:	2308      	movs	r3, #8
 8001fc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fd4:	f107 031c 	add.w	r3, r7, #28
 8001fd8:	4619      	mov	r1, r3
 8001fda:	481e      	ldr	r0, [pc, #120]	; (8002054 <HAL_TIM_Encoder_MspInit+0x12c>)
 8001fdc:	f001 fad0 	bl	8003580 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001fe0:	e030      	b.n	8002044 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM3)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a1c      	ldr	r2, [pc, #112]	; (8002058 <HAL_TIM_Encoder_MspInit+0x130>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d12b      	bne.n	8002044 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001fec:	2300      	movs	r3, #0
 8001fee:	60fb      	str	r3, [r7, #12]
 8001ff0:	4b16      	ldr	r3, [pc, #88]	; (800204c <HAL_TIM_Encoder_MspInit+0x124>)
 8001ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff4:	4a15      	ldr	r2, [pc, #84]	; (800204c <HAL_TIM_Encoder_MspInit+0x124>)
 8001ff6:	f043 0302 	orr.w	r3, r3, #2
 8001ffa:	6413      	str	r3, [r2, #64]	; 0x40
 8001ffc:	4b13      	ldr	r3, [pc, #76]	; (800204c <HAL_TIM_Encoder_MspInit+0x124>)
 8001ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002000:	f003 0302 	and.w	r3, r3, #2
 8002004:	60fb      	str	r3, [r7, #12]
 8002006:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002008:	2300      	movs	r3, #0
 800200a:	60bb      	str	r3, [r7, #8]
 800200c:	4b0f      	ldr	r3, [pc, #60]	; (800204c <HAL_TIM_Encoder_MspInit+0x124>)
 800200e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002010:	4a0e      	ldr	r2, [pc, #56]	; (800204c <HAL_TIM_Encoder_MspInit+0x124>)
 8002012:	f043 0302 	orr.w	r3, r3, #2
 8002016:	6313      	str	r3, [r2, #48]	; 0x30
 8002018:	4b0c      	ldr	r3, [pc, #48]	; (800204c <HAL_TIM_Encoder_MspInit+0x124>)
 800201a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201c:	f003 0302 	and.w	r3, r3, #2
 8002020:	60bb      	str	r3, [r7, #8]
 8002022:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002024:	2330      	movs	r3, #48	; 0x30
 8002026:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002028:	2302      	movs	r3, #2
 800202a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202c:	2300      	movs	r3, #0
 800202e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002030:	2300      	movs	r3, #0
 8002032:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002034:	2302      	movs	r3, #2
 8002036:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002038:	f107 031c 	add.w	r3, r7, #28
 800203c:	4619      	mov	r1, r3
 800203e:	4805      	ldr	r0, [pc, #20]	; (8002054 <HAL_TIM_Encoder_MspInit+0x12c>)
 8002040:	f001 fa9e 	bl	8003580 <HAL_GPIO_Init>
}
 8002044:	bf00      	nop
 8002046:	3730      	adds	r7, #48	; 0x30
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	40023800 	.word	0x40023800
 8002050:	40020000 	.word	0x40020000
 8002054:	40020400 	.word	0x40020400
 8002058:	40000400 	.word	0x40000400

0800205c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a0e      	ldr	r2, [pc, #56]	; (80020a4 <HAL_TIM_PWM_MspInit+0x48>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d115      	bne.n	800209a <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800206e:	2300      	movs	r3, #0
 8002070:	60fb      	str	r3, [r7, #12]
 8002072:	4b0d      	ldr	r3, [pc, #52]	; (80020a8 <HAL_TIM_PWM_MspInit+0x4c>)
 8002074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002076:	4a0c      	ldr	r2, [pc, #48]	; (80020a8 <HAL_TIM_PWM_MspInit+0x4c>)
 8002078:	f043 0304 	orr.w	r3, r3, #4
 800207c:	6413      	str	r3, [r2, #64]	; 0x40
 800207e:	4b0a      	ldr	r3, [pc, #40]	; (80020a8 <HAL_TIM_PWM_MspInit+0x4c>)
 8002080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002082:	f003 0304 	and.w	r3, r3, #4
 8002086:	60fb      	str	r3, [r7, #12]
 8002088:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800208a:	2200      	movs	r2, #0
 800208c:	2100      	movs	r1, #0
 800208e:	201e      	movs	r0, #30
 8002090:	f000 fe63 	bl	8002d5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002094:	201e      	movs	r0, #30
 8002096:	f000 fe7c 	bl	8002d92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800209a:	bf00      	nop
 800209c:	3710      	adds	r7, #16
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	40000800 	.word	0x40000800
 80020a8:	40023800 	.word	0x40023800

080020ac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b088      	sub	sp, #32
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b4:	f107 030c 	add.w	r3, r7, #12
 80020b8:	2200      	movs	r2, #0
 80020ba:	601a      	str	r2, [r3, #0]
 80020bc:	605a      	str	r2, [r3, #4]
 80020be:	609a      	str	r2, [r3, #8]
 80020c0:	60da      	str	r2, [r3, #12]
 80020c2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a12      	ldr	r2, [pc, #72]	; (8002114 <HAL_TIM_MspPostInit+0x68>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d11e      	bne.n	800210c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020ce:	2300      	movs	r3, #0
 80020d0:	60bb      	str	r3, [r7, #8]
 80020d2:	4b11      	ldr	r3, [pc, #68]	; (8002118 <HAL_TIM_MspPostInit+0x6c>)
 80020d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d6:	4a10      	ldr	r2, [pc, #64]	; (8002118 <HAL_TIM_MspPostInit+0x6c>)
 80020d8:	f043 0302 	orr.w	r3, r3, #2
 80020dc:	6313      	str	r3, [r2, #48]	; 0x30
 80020de:	4b0e      	ldr	r3, [pc, #56]	; (8002118 <HAL_TIM_MspPostInit+0x6c>)
 80020e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	60bb      	str	r3, [r7, #8]
 80020e8:	68bb      	ldr	r3, [r7, #8]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80020ea:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80020ee:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f0:	2302      	movs	r3, #2
 80020f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f4:	2300      	movs	r3, #0
 80020f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f8:	2300      	movs	r3, #0
 80020fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80020fc:	2302      	movs	r3, #2
 80020fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002100:	f107 030c 	add.w	r3, r7, #12
 8002104:	4619      	mov	r1, r3
 8002106:	4805      	ldr	r0, [pc, #20]	; (800211c <HAL_TIM_MspPostInit+0x70>)
 8002108:	f001 fa3a 	bl	8003580 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800210c:	bf00      	nop
 800210e:	3720      	adds	r7, #32
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	40000800 	.word	0x40000800
 8002118:	40023800 	.word	0x40023800
 800211c:	40020400 	.word	0x40020400

08002120 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002124:	e7fe      	b.n	8002124 <NMI_Handler+0x4>

08002126 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002126:	b480      	push	{r7}
 8002128:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800212a:	e7fe      	b.n	800212a <HardFault_Handler+0x4>

0800212c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002130:	e7fe      	b.n	8002130 <MemManage_Handler+0x4>

08002132 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002132:	b480      	push	{r7}
 8002134:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002136:	e7fe      	b.n	8002136 <BusFault_Handler+0x4>

08002138 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800213c:	e7fe      	b.n	800213c <UsageFault_Handler+0x4>

0800213e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800213e:	b480      	push	{r7}
 8002140:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002142:	bf00      	nop
 8002144:	46bd      	mov	sp, r7
 8002146:	bc80      	pop	{r7}
 8002148:	4770      	bx	lr

0800214a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800214a:	b480      	push	{r7}
 800214c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800214e:	bf00      	nop
 8002150:	46bd      	mov	sp, r7
 8002152:	bc80      	pop	{r7}
 8002154:	4770      	bx	lr

08002156 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002156:	b480      	push	{r7}
 8002158:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800215a:	bf00      	nop
 800215c:	46bd      	mov	sp, r7
 800215e:	bc80      	pop	{r7}
 8002160:	4770      	bx	lr

08002162 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002162:	b580      	push	{r7, lr}
 8002164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002166:	f000 f8d7 	bl	8002318 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  SysTickFunction();
 800216a:	f000 f81d 	bl	80021a8 <SysTickFunction>
  /* USER CODE END SysTick_IRQn 1 */
}
 800216e:	bf00      	nop
 8002170:	bd80      	pop	{r7, pc}
	...

08002174 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002178:	4802      	ldr	r0, [pc, #8]	; (8002184 <TIM4_IRQHandler+0x10>)
 800217a:	f002 f9f5 	bl	8004568 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */
  /* USER CODE END TIM4_IRQn 1 */
}
 800217e:	bf00      	nop
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	2000015c 	.word	0x2000015c

08002188 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 Stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800218c:	4802      	ldr	r0, [pc, #8]	; (8002198 <DMA2_Stream0_IRQHandler+0x10>)
 800218e:	f000 ff91 	bl	80030b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002192:	bf00      	nop
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	2000023c 	.word	0x2000023c

0800219c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021a0:	bf00      	nop
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bc80      	pop	{r7}
 80021a6:	4770      	bx	lr

080021a8 <SysTickFunction>:
#include "main.h"
#include "pid.h"
#include "encoders.h"
#include <stdio.h>

void SysTickFunction(void) {
 80021a8:	b590      	push	{r4, r7, lr}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
	/*
	 * Anything in this function body will be executed every millisecond.
	 * Call you PID update function here.
	 */

	updatePID();
 80021ae:	f7ff fce9 	bl	8001b84 <updatePID>
	 * It also maintains the magnitude of the difference between the left and right encoders so that PID will work seamlessly.
	 *
	 * You may have to adjust it in the event you try to traverse more than 31000 encoder counts at once (~9 meters) without
	 * turning. But that'll be approximately never in Micromouse :)
	 */
	if (getRightEncoderCounts() > 31000 || getLeftEncoderCounts() > 31000
 80021b2:	f7fe feab 	bl	8000f0c <getRightEncoderCounts>
 80021b6:	4603      	mov	r3, r0
 80021b8:	461a      	mov	r2, r3
 80021ba:	f647 1318 	movw	r3, #31000	; 0x7918
 80021be:	429a      	cmp	r2, r3
 80021c0:	dc15      	bgt.n	80021ee <SysTickFunction+0x46>
 80021c2:	f7fe feaf 	bl	8000f24 <getLeftEncoderCounts>
 80021c6:	4603      	mov	r3, r0
 80021c8:	461a      	mov	r2, r3
 80021ca:	f647 1318 	movw	r3, #31000	; 0x7918
 80021ce:	429a      	cmp	r2, r3
 80021d0:	dc0d      	bgt.n	80021ee <SysTickFunction+0x46>
			|| getRightEncoderCounts() < -31000 || getLeftEncoderCounts() < -31000) {
 80021d2:	f7fe fe9b 	bl	8000f0c <getRightEncoderCounts>
 80021d6:	4603      	mov	r3, r0
 80021d8:	461a      	mov	r2, r3
 80021da:	4b0f      	ldr	r3, [pc, #60]	; (8002218 <SysTickFunction+0x70>)
 80021dc:	429a      	cmp	r2, r3
 80021de:	db06      	blt.n	80021ee <SysTickFunction+0x46>
 80021e0:	f7fe fea0 	bl	8000f24 <getLeftEncoderCounts>
 80021e4:	4603      	mov	r3, r0
 80021e6:	461a      	mov	r2, r3
 80021e8:	4b0b      	ldr	r3, [pc, #44]	; (8002218 <SysTickFunction+0x70>)
 80021ea:	429a      	cmp	r2, r3
 80021ec:	da10      	bge.n	8002210 <SysTickFunction+0x68>
		int16_t difference = getRightEncoderCounts() - getLeftEncoderCounts();
 80021ee:	f7fe fe8d 	bl	8000f0c <getRightEncoderCounts>
 80021f2:	4603      	mov	r3, r0
 80021f4:	b29c      	uxth	r4, r3
 80021f6:	f7fe fe95 	bl	8000f24 <getLeftEncoderCounts>
 80021fa:	4603      	mov	r3, r0
 80021fc:	b29b      	uxth	r3, r3
 80021fe:	1ae3      	subs	r3, r4, r3
 8002200:	b29b      	uxth	r3, r3
 8002202:	80fb      	strh	r3, [r7, #6]
		resetEncoders();
 8002204:	f7fe fe9c 	bl	8000f40 <resetEncoders>
		TIM1->CNT = (int16_t) difference;
 8002208:	4a04      	ldr	r2, [pc, #16]	; (800221c <SysTickFunction+0x74>)
 800220a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800220e:	6253      	str	r3, [r2, #36]	; 0x24
	}
}
 8002210:	bf00      	nop
 8002212:	370c      	adds	r7, #12
 8002214:	46bd      	mov	sp, r7
 8002216:	bd90      	pop	{r4, r7, pc}
 8002218:	ffff86e8 	.word	0xffff86e8
 800221c:	40010000 	.word	0x40010000

08002220 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002220:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002258 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002224:	480d      	ldr	r0, [pc, #52]	; (800225c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002226:	490e      	ldr	r1, [pc, #56]	; (8002260 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002228:	4a0e      	ldr	r2, [pc, #56]	; (8002264 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800222a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800222c:	e002      	b.n	8002234 <LoopCopyDataInit>

0800222e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800222e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002230:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002232:	3304      	adds	r3, #4

08002234 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002234:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002236:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002238:	d3f9      	bcc.n	800222e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800223a:	4a0b      	ldr	r2, [pc, #44]	; (8002268 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800223c:	4c0b      	ldr	r4, [pc, #44]	; (800226c <LoopFillZerobss+0x26>)
  movs r3, #0
 800223e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002240:	e001      	b.n	8002246 <LoopFillZerobss>

08002242 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002242:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002244:	3204      	adds	r2, #4

08002246 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002246:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002248:	d3fb      	bcc.n	8002242 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800224a:	f7ff ffa7 	bl	800219c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800224e:	f002 fe79 	bl	8004f44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002252:	f7fe ff8b 	bl	800116c <main>
  bx  lr    
 8002256:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002258:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 800225c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002260:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8002264:	08004fdc 	.word	0x08004fdc
  ldr r2, =_sbss
 8002268:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 800226c:	20000314 	.word	0x20000314

08002270 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002270:	e7fe      	b.n	8002270 <ADC_IRQHandler>
	...

08002274 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002278:	4b0e      	ldr	r3, [pc, #56]	; (80022b4 <HAL_Init+0x40>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a0d      	ldr	r2, [pc, #52]	; (80022b4 <HAL_Init+0x40>)
 800227e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002282:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8002284:	4b0b      	ldr	r3, [pc, #44]	; (80022b4 <HAL_Init+0x40>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a0a      	ldr	r2, [pc, #40]	; (80022b4 <HAL_Init+0x40>)
 800228a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800228e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002290:	4b08      	ldr	r3, [pc, #32]	; (80022b4 <HAL_Init+0x40>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a07      	ldr	r2, [pc, #28]	; (80022b4 <HAL_Init+0x40>)
 8002296:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800229a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800229c:	2003      	movs	r0, #3
 800229e:	f000 fd51 	bl	8002d44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022a2:	200f      	movs	r0, #15
 80022a4:	f000 f808 	bl	80022b8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80022a8:	f7ff fd84 	bl	8001db4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80022ac:	2300      	movs	r3, #0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	40023c00 	.word	0x40023c00

080022b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022c0:	4b12      	ldr	r3, [pc, #72]	; (800230c <HAL_InitTick+0x54>)
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	4b12      	ldr	r3, [pc, #72]	; (8002310 <HAL_InitTick+0x58>)
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	4619      	mov	r1, r3
 80022ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80022d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80022d6:	4618      	mov	r0, r3
 80022d8:	f000 fd69 	bl	8002dae <HAL_SYSTICK_Config>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d001      	beq.n	80022e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e00e      	b.n	8002304 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2b0f      	cmp	r3, #15
 80022ea:	d80a      	bhi.n	8002302 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022ec:	2200      	movs	r2, #0
 80022ee:	6879      	ldr	r1, [r7, #4]
 80022f0:	f04f 30ff 	mov.w	r0, #4294967295
 80022f4:	f000 fd31 	bl	8002d5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022f8:	4a06      	ldr	r2, [pc, #24]	; (8002314 <HAL_InitTick+0x5c>)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022fe:	2300      	movs	r3, #0
 8002300:	e000      	b.n	8002304 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
}
 8002304:	4618      	mov	r0, r3
 8002306:	3708      	adds	r7, #8
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	20000010 	.word	0x20000010
 8002310:	20000018 	.word	0x20000018
 8002314:	20000014 	.word	0x20000014

08002318 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800231c:	4b05      	ldr	r3, [pc, #20]	; (8002334 <HAL_IncTick+0x1c>)
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	461a      	mov	r2, r3
 8002322:	4b05      	ldr	r3, [pc, #20]	; (8002338 <HAL_IncTick+0x20>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4413      	add	r3, r2
 8002328:	4a03      	ldr	r2, [pc, #12]	; (8002338 <HAL_IncTick+0x20>)
 800232a:	6013      	str	r3, [r2, #0]
}
 800232c:	bf00      	nop
 800232e:	46bd      	mov	sp, r7
 8002330:	bc80      	pop	{r7}
 8002332:	4770      	bx	lr
 8002334:	20000018 	.word	0x20000018
 8002338:	20000310 	.word	0x20000310

0800233c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0
  return uwTick;
 8002340:	4b02      	ldr	r3, [pc, #8]	; (800234c <HAL_GetTick+0x10>)
 8002342:	681b      	ldr	r3, [r3, #0]
}
 8002344:	4618      	mov	r0, r3
 8002346:	46bd      	mov	sp, r7
 8002348:	bc80      	pop	{r7}
 800234a:	4770      	bx	lr
 800234c:	20000310 	.word	0x20000310

08002350 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002358:	2300      	movs	r3, #0
 800235a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d101      	bne.n	8002366 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e033      	b.n	80023ce <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236a:	2b00      	cmp	r3, #0
 800236c:	d109      	bne.n	8002382 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f7ff fd46 	bl	8001e00 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2200      	movs	r2, #0
 8002378:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2200      	movs	r2, #0
 800237e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002386:	f003 0310 	and.w	r3, r3, #16
 800238a:	2b00      	cmp	r3, #0
 800238c:	d118      	bne.n	80023c0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002392:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002396:	f023 0302 	bic.w	r3, r3, #2
 800239a:	f043 0202 	orr.w	r2, r3, #2
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f000 fa7a 	bl	800289c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2200      	movs	r2, #0
 80023ac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b2:	f023 0303 	bic.w	r3, r3, #3
 80023b6:	f043 0201 	orr.w	r2, r3, #1
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	641a      	str	r2, [r3, #64]	; 0x40
 80023be:	e001      	b.n	80023c4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80023cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3710      	adds	r7, #16
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
	...

080023d8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b086      	sub	sp, #24
 80023dc:	af00      	add	r7, sp, #0
 80023de:	60f8      	str	r0, [r7, #12]
 80023e0:	60b9      	str	r1, [r7, #8]
 80023e2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80023e4:	2300      	movs	r3, #0
 80023e6:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d101      	bne.n	80023f6 <HAL_ADC_Start_DMA+0x1e>
 80023f2:	2302      	movs	r3, #2
 80023f4:	e0bc      	b.n	8002570 <HAL_ADC_Start_DMA+0x198>
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2201      	movs	r2, #1
 80023fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	f003 0301 	and.w	r3, r3, #1
 8002408:	2b01      	cmp	r3, #1
 800240a:	d018      	beq.n	800243e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	689a      	ldr	r2, [r3, #8]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f042 0201 	orr.w	r2, r2, #1
 800241a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800241c:	4b56      	ldr	r3, [pc, #344]	; (8002578 <HAL_ADC_Start_DMA+0x1a0>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a56      	ldr	r2, [pc, #344]	; (800257c <HAL_ADC_Start_DMA+0x1a4>)
 8002422:	fba2 2303 	umull	r2, r3, r2, r3
 8002426:	0c9a      	lsrs	r2, r3, #18
 8002428:	4613      	mov	r3, r2
 800242a:	005b      	lsls	r3, r3, #1
 800242c:	4413      	add	r3, r2
 800242e:	617b      	str	r3, [r7, #20]
    while(counter != 0U)
 8002430:	e002      	b.n	8002438 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	3b01      	subs	r3, #1
 8002436:	617b      	str	r3, [r7, #20]
    while(counter != 0U)
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d1f9      	bne.n	8002432 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	f003 0301 	and.w	r3, r3, #1
 8002448:	2b01      	cmp	r3, #1
 800244a:	f040 8084 	bne.w	8002556 <HAL_ADC_Start_DMA+0x17e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002452:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002456:	f023 0301 	bic.w	r3, r3, #1
 800245a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800246c:	2b00      	cmp	r3, #0
 800246e:	d007      	beq.n	8002480 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002474:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002478:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002484:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002488:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800248c:	d106      	bne.n	800249c <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002492:	f023 0206 	bic.w	r2, r3, #6
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	645a      	str	r2, [r3, #68]	; 0x44
 800249a:	e002      	b.n	80024a2 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2200      	movs	r2, #0
 80024a0:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2200      	movs	r2, #0
 80024a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ae:	4a34      	ldr	r2, [pc, #208]	; (8002580 <HAL_ADC_Start_DMA+0x1a8>)
 80024b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024b6:	4a33      	ldr	r2, [pc, #204]	; (8002584 <HAL_ADC_Start_DMA+0x1ac>)
 80024b8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024be:	4a32      	ldr	r2, [pc, #200]	; (8002588 <HAL_ADC_Start_DMA+0x1b0>)
 80024c0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80024ca:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	685a      	ldr	r2, [r3, #4]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80024da:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	689a      	ldr	r2, [r3, #8]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024ea:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	334c      	adds	r3, #76	; 0x4c
 80024f6:	4619      	mov	r1, r3
 80024f8:	68ba      	ldr	r2, [r7, #8]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	f000 fd12 	bl	8002f24 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002500:	4b22      	ldr	r3, [pc, #136]	; (800258c <HAL_ADC_Start_DMA+0x1b4>)
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f003 031f 	and.w	r3, r3, #31
 8002508:	2b00      	cmp	r3, #0
 800250a:	d10f      	bne.n	800252c <HAL_ADC_Start_DMA+0x154>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d129      	bne.n	800256e <HAL_ADC_Start_DMA+0x196>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	689a      	ldr	r2, [r3, #8]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002528:	609a      	str	r2, [r3, #8]
 800252a:	e020      	b.n	800256e <HAL_ADC_Start_DMA+0x196>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a17      	ldr	r2, [pc, #92]	; (8002590 <HAL_ADC_Start_DMA+0x1b8>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d11b      	bne.n	800256e <HAL_ADC_Start_DMA+0x196>
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002540:	2b00      	cmp	r3, #0
 8002542:	d114      	bne.n	800256e <HAL_ADC_Start_DMA+0x196>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	689a      	ldr	r2, [r3, #8]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002552:	609a      	str	r2, [r3, #8]
 8002554:	e00b      	b.n	800256e <HAL_ADC_Start_DMA+0x196>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255a:	f043 0210 	orr.w	r2, r3, #16
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002566:	f043 0201 	orr.w	r2, r3, #1
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800256e:	2300      	movs	r3, #0
}
 8002570:	4618      	mov	r0, r3
 8002572:	3718      	adds	r7, #24
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}
 8002578:	20000010 	.word	0x20000010
 800257c:	431bde83 	.word	0x431bde83
 8002580:	08002aa9 	.word	0x08002aa9
 8002584:	08002b63 	.word	0x08002b63
 8002588:	08002b7f 	.word	0x08002b7f
 800258c:	40012300 	.word	0x40012300
 8002590:	40012000 	.word	0x40012000

08002594 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b084      	sub	sp, #16
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800259c:	2300      	movs	r3, #0
 800259e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d101      	bne.n	80025ae <HAL_ADC_Stop_DMA+0x1a>
 80025aa:	2302      	movs	r3, #2
 80025ac:	e03f      	b.n	800262e <HAL_ADC_Stop_DMA+0x9a>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2201      	movs	r2, #1
 80025b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	689a      	ldr	r2, [r3, #8]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f022 0201 	bic.w	r2, r2, #1
 80025c4:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	f003 0301 	and.w	r3, r3, #1
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d127      	bne.n	8002624 <HAL_ADC_Stop_DMA+0x90>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	689a      	ldr	r2, [r3, #8]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80025e2:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d118      	bne.n	8002624 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025f6:	4618      	mov	r0, r3
 80025f8:	f000 fcec 	bl	8002fd4 <HAL_DMA_Abort>
 80025fc:	4603      	mov	r3, r0
 80025fe:	73fb      	strb	r3, [r7, #15]
      
      /* Disable ADC overrun interrupt */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	685a      	ldr	r2, [r3, #4]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 800260e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002614:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002618:	f023 0301 	bic.w	r3, r3, #1
 800261c:	f043 0201 	orr.w	r2, r3, #1
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2200      	movs	r2, #0
 8002628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800262c:	7bfb      	ldrb	r3, [r7, #15]
}
 800262e:	4618      	mov	r0, r3
 8002630:	3710      	adds	r7, #16
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}

08002636 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002636:	b480      	push	{r7}
 8002638:	b083      	sub	sp, #12
 800263a:	af00      	add	r7, sp, #0
 800263c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800263e:	bf00      	nop
 8002640:	370c      	adds	r7, #12
 8002642:	46bd      	mov	sp, r7
 8002644:	bc80      	pop	{r7}
 8002646:	4770      	bx	lr

08002648 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002650:	bf00      	nop
 8002652:	370c      	adds	r7, #12
 8002654:	46bd      	mov	sp, r7
 8002656:	bc80      	pop	{r7}
 8002658:	4770      	bx	lr
	...

0800265c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800265c:	b480      	push	{r7}
 800265e:	b085      	sub	sp, #20
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002666:	2300      	movs	r3, #0
 8002668:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002670:	2b01      	cmp	r3, #1
 8002672:	d101      	bne.n	8002678 <HAL_ADC_ConfigChannel+0x1c>
 8002674:	2302      	movs	r3, #2
 8002676:	e103      	b.n	8002880 <HAL_ADC_ConfigChannel+0x224>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2b09      	cmp	r3, #9
 8002686:	d925      	bls.n	80026d4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	68d9      	ldr	r1, [r3, #12]
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	b29b      	uxth	r3, r3
 8002694:	461a      	mov	r2, r3
 8002696:	4613      	mov	r3, r2
 8002698:	005b      	lsls	r3, r3, #1
 800269a:	4413      	add	r3, r2
 800269c:	3b1e      	subs	r3, #30
 800269e:	2207      	movs	r2, #7
 80026a0:	fa02 f303 	lsl.w	r3, r2, r3
 80026a4:	43da      	mvns	r2, r3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	400a      	ands	r2, r1
 80026ac:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	68d9      	ldr	r1, [r3, #12]
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	689a      	ldr	r2, [r3, #8]
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	b29b      	uxth	r3, r3
 80026be:	4618      	mov	r0, r3
 80026c0:	4603      	mov	r3, r0
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	4403      	add	r3, r0
 80026c6:	3b1e      	subs	r3, #30
 80026c8:	409a      	lsls	r2, r3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	430a      	orrs	r2, r1
 80026d0:	60da      	str	r2, [r3, #12]
 80026d2:	e022      	b.n	800271a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	6919      	ldr	r1, [r3, #16]
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	b29b      	uxth	r3, r3
 80026e0:	461a      	mov	r2, r3
 80026e2:	4613      	mov	r3, r2
 80026e4:	005b      	lsls	r3, r3, #1
 80026e6:	4413      	add	r3, r2
 80026e8:	2207      	movs	r2, #7
 80026ea:	fa02 f303 	lsl.w	r3, r2, r3
 80026ee:	43da      	mvns	r2, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	400a      	ands	r2, r1
 80026f6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	6919      	ldr	r1, [r3, #16]
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	689a      	ldr	r2, [r3, #8]
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	b29b      	uxth	r3, r3
 8002708:	4618      	mov	r0, r3
 800270a:	4603      	mov	r3, r0
 800270c:	005b      	lsls	r3, r3, #1
 800270e:	4403      	add	r3, r0
 8002710:	409a      	lsls	r2, r3
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	430a      	orrs	r2, r1
 8002718:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	2b06      	cmp	r3, #6
 8002720:	d824      	bhi.n	800276c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	685a      	ldr	r2, [r3, #4]
 800272c:	4613      	mov	r3, r2
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	4413      	add	r3, r2
 8002732:	3b05      	subs	r3, #5
 8002734:	221f      	movs	r2, #31
 8002736:	fa02 f303 	lsl.w	r3, r2, r3
 800273a:	43da      	mvns	r2, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	400a      	ands	r2, r1
 8002742:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	b29b      	uxth	r3, r3
 8002750:	4618      	mov	r0, r3
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	685a      	ldr	r2, [r3, #4]
 8002756:	4613      	mov	r3, r2
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	4413      	add	r3, r2
 800275c:	3b05      	subs	r3, #5
 800275e:	fa00 f203 	lsl.w	r2, r0, r3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	430a      	orrs	r2, r1
 8002768:	635a      	str	r2, [r3, #52]	; 0x34
 800276a:	e04c      	b.n	8002806 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	2b0c      	cmp	r3, #12
 8002772:	d824      	bhi.n	80027be <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	685a      	ldr	r2, [r3, #4]
 800277e:	4613      	mov	r3, r2
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	4413      	add	r3, r2
 8002784:	3b23      	subs	r3, #35	; 0x23
 8002786:	221f      	movs	r2, #31
 8002788:	fa02 f303 	lsl.w	r3, r2, r3
 800278c:	43da      	mvns	r2, r3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	400a      	ands	r2, r1
 8002794:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	4618      	mov	r0, r3
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	685a      	ldr	r2, [r3, #4]
 80027a8:	4613      	mov	r3, r2
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	4413      	add	r3, r2
 80027ae:	3b23      	subs	r3, #35	; 0x23
 80027b0:	fa00 f203 	lsl.w	r2, r0, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	430a      	orrs	r2, r1
 80027ba:	631a      	str	r2, [r3, #48]	; 0x30
 80027bc:	e023      	b.n	8002806 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	685a      	ldr	r2, [r3, #4]
 80027c8:	4613      	mov	r3, r2
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	4413      	add	r3, r2
 80027ce:	3b41      	subs	r3, #65	; 0x41
 80027d0:	221f      	movs	r2, #31
 80027d2:	fa02 f303 	lsl.w	r3, r2, r3
 80027d6:	43da      	mvns	r2, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	400a      	ands	r2, r1
 80027de:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	4618      	mov	r0, r3
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	685a      	ldr	r2, [r3, #4]
 80027f2:	4613      	mov	r3, r2
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	4413      	add	r3, r2
 80027f8:	3b41      	subs	r3, #65	; 0x41
 80027fa:	fa00 f203 	lsl.w	r2, r0, r3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	430a      	orrs	r2, r1
 8002804:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a20      	ldr	r2, [pc, #128]	; (800288c <HAL_ADC_ConfigChannel+0x230>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d109      	bne.n	8002824 <HAL_ADC_ConfigChannel+0x1c8>
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2b12      	cmp	r3, #18
 8002816:	d105      	bne.n	8002824 <HAL_ADC_ConfigChannel+0x1c8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002818:	4b1d      	ldr	r3, [pc, #116]	; (8002890 <HAL_ADC_ConfigChannel+0x234>)
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	4a1c      	ldr	r2, [pc, #112]	; (8002890 <HAL_ADC_ConfigChannel+0x234>)
 800281e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002822:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a18      	ldr	r2, [pc, #96]	; (800288c <HAL_ADC_ConfigChannel+0x230>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d123      	bne.n	8002876 <HAL_ADC_ConfigChannel+0x21a>
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	2b10      	cmp	r3, #16
 8002834:	d003      	beq.n	800283e <HAL_ADC_ConfigChannel+0x1e2>
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	2b11      	cmp	r3, #17
 800283c:	d11b      	bne.n	8002876 <HAL_ADC_ConfigChannel+0x21a>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800283e:	4b14      	ldr	r3, [pc, #80]	; (8002890 <HAL_ADC_ConfigChannel+0x234>)
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	4a13      	ldr	r2, [pc, #76]	; (8002890 <HAL_ADC_ConfigChannel+0x234>)
 8002844:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002848:	6053      	str	r3, [r2, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	2b10      	cmp	r3, #16
 8002850:	d111      	bne.n	8002876 <HAL_ADC_ConfigChannel+0x21a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002852:	4b10      	ldr	r3, [pc, #64]	; (8002894 <HAL_ADC_ConfigChannel+0x238>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a10      	ldr	r2, [pc, #64]	; (8002898 <HAL_ADC_ConfigChannel+0x23c>)
 8002858:	fba2 2303 	umull	r2, r3, r2, r3
 800285c:	0c9a      	lsrs	r2, r3, #18
 800285e:	4613      	mov	r3, r2
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	4413      	add	r3, r2
 8002864:	005b      	lsls	r3, r3, #1
 8002866:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8002868:	e002      	b.n	8002870 <HAL_ADC_ConfigChannel+0x214>
      {
        counter--;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	3b01      	subs	r3, #1
 800286e:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d1f9      	bne.n	800286a <HAL_ADC_ConfigChannel+0x20e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2200      	movs	r2, #0
 800287a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800287e:	2300      	movs	r3, #0
}
 8002880:	4618      	mov	r0, r3
 8002882:	3714      	adds	r7, #20
 8002884:	46bd      	mov	sp, r7
 8002886:	bc80      	pop	{r7}
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop
 800288c:	40012000 	.word	0x40012000
 8002890:	40012300 	.word	0x40012300
 8002894:	20000010 	.word	0x20000010
 8002898:	431bde83 	.word	0x431bde83

0800289c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800289c:	b480      	push	{r7}
 800289e:	b085      	sub	sp, #20
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80028a4:	4b7e      	ldr	r3, [pc, #504]	; (8002aa0 <ADC_Init+0x204>)
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	4a7d      	ldr	r2, [pc, #500]	; (8002aa0 <ADC_Init+0x204>)
 80028aa:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80028ae:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80028b0:	4b7b      	ldr	r3, [pc, #492]	; (8002aa0 <ADC_Init+0x204>)
 80028b2:	685a      	ldr	r2, [r3, #4]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	4979      	ldr	r1, [pc, #484]	; (8002aa0 <ADC_Init+0x204>)
 80028ba:	4313      	orrs	r3, r2
 80028bc:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	685a      	ldr	r2, [r3, #4]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	6859      	ldr	r1, [r3, #4]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	691b      	ldr	r3, [r3, #16]
 80028d8:	021a      	lsls	r2, r3, #8
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	430a      	orrs	r2, r1
 80028e0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	685a      	ldr	r2, [r3, #4]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80028f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	6859      	ldr	r1, [r3, #4]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	689a      	ldr	r2, [r3, #8]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	430a      	orrs	r2, r1
 8002902:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	689a      	ldr	r2, [r3, #8]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002912:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	6899      	ldr	r1, [r3, #8]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	68da      	ldr	r2, [r3, #12]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	430a      	orrs	r2, r1
 8002924:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800292a:	4a5e      	ldr	r2, [pc, #376]	; (8002aa4 <ADC_Init+0x208>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d022      	beq.n	8002976 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	689a      	ldr	r2, [r3, #8]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800293e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	6899      	ldr	r1, [r3, #8]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	430a      	orrs	r2, r1
 8002950:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	689a      	ldr	r2, [r3, #8]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002960:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	6899      	ldr	r1, [r3, #8]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	430a      	orrs	r2, r1
 8002972:	609a      	str	r2, [r3, #8]
 8002974:	e00f      	b.n	8002996 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	689a      	ldr	r2, [r3, #8]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002984:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	689a      	ldr	r2, [r3, #8]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002994:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	689a      	ldr	r2, [r3, #8]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f022 0202 	bic.w	r2, r2, #2
 80029a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	6899      	ldr	r1, [r3, #8]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	7e1b      	ldrb	r3, [r3, #24]
 80029b0:	005a      	lsls	r2, r3, #1
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	430a      	orrs	r2, r1
 80029b8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d027      	beq.n	8002a14 <ADC_Init+0x178>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	685a      	ldr	r2, [r3, #4]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029d2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	685a      	ldr	r2, [r3, #4]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80029e2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e8:	3b01      	subs	r3, #1
 80029ea:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 80029ee:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f0:	68fa      	ldr	r2, [r7, #12]
 80029f2:	fa92 f2a2 	rbit	r2, r2
 80029f6:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80029f8:	68ba      	ldr	r2, [r7, #8]
 80029fa:	fab2 f282 	clz	r2, r2
 80029fe:	b2d2      	uxtb	r2, r2
 8002a00:	fa03 f102 	lsl.w	r1, r3, r2
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	685a      	ldr	r2, [r3, #4]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	430a      	orrs	r2, r1
 8002a10:	605a      	str	r2, [r3, #4]
 8002a12:	e007      	b.n	8002a24 <ADC_Init+0x188>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	685a      	ldr	r2, [r3, #4]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a22:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002a32:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	69db      	ldr	r3, [r3, #28]
 8002a3e:	3b01      	subs	r3, #1
 8002a40:	051a      	lsls	r2, r3, #20
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	430a      	orrs	r2, r1
 8002a48:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	689a      	ldr	r2, [r3, #8]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002a58:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	6899      	ldr	r1, [r3, #8]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a66:	025a      	lsls	r2, r3, #9
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	430a      	orrs	r2, r1
 8002a6e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	689a      	ldr	r2, [r3, #8]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a7e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	6899      	ldr	r1, [r3, #8]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	695b      	ldr	r3, [r3, #20]
 8002a8a:	029a      	lsls	r2, r3, #10
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	430a      	orrs	r2, r1
 8002a92:	609a      	str	r2, [r3, #8]
}
 8002a94:	bf00      	nop
 8002a96:	3714      	adds	r7, #20
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bc80      	pop	{r7}
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	40012300 	.word	0x40012300
 8002aa4:	0f000001 	.word	0x0f000001

08002aa8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b084      	sub	sp, #16
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ab4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aba:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d13c      	bne.n	8002b3c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F2, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d12b      	bne.n	8002b34 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d127      	bne.n	8002b34 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aea:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d006      	beq.n	8002b00 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d119      	bne.n	8002b34 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	685a      	ldr	r2, [r3, #4]
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f022 0220 	bic.w	r2, r2, #32
 8002b0e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b14:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d105      	bne.n	8002b34 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2c:	f043 0201 	orr.w	r2, r3, #1
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002b34:	68f8      	ldr	r0, [r7, #12]
 8002b36:	f7fe fb09 	bl	800114c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002b3a:	e00e      	b.n	8002b5a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b40:	f003 0310 	and.w	r3, r3, #16
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d003      	beq.n	8002b50 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002b48:	68f8      	ldr	r0, [r7, #12]
 8002b4a:	f7ff fd7d 	bl	8002648 <HAL_ADC_ErrorCallback>
}
 8002b4e:	e004      	b.n	8002b5a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	4798      	blx	r3
}
 8002b5a:	bf00      	nop
 8002b5c:	3710      	adds	r7, #16
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}

08002b62 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002b62:	b580      	push	{r7, lr}
 8002b64:	b084      	sub	sp, #16
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b6e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002b70:	68f8      	ldr	r0, [r7, #12]
 8002b72:	f7ff fd60 	bl	8002636 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b76:	bf00      	nop
 8002b78:	3710      	adds	r7, #16
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}

08002b7e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002b7e:	b580      	push	{r7, lr}
 8002b80:	b084      	sub	sp, #16
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b8a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2240      	movs	r2, #64	; 0x40
 8002b90:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b96:	f043 0204 	orr.w	r2, r3, #4
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002b9e:	68f8      	ldr	r0, [r7, #12]
 8002ba0:	f7ff fd52 	bl	8002648 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ba4:	bf00      	nop
 8002ba6:	3710      	adds	r7, #16
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}

08002bac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b085      	sub	sp, #20
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f003 0307 	and.w	r3, r3, #7
 8002bba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bbc:	4b0c      	ldr	r3, [pc, #48]	; (8002bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bc2:	68ba      	ldr	r2, [r7, #8]
 8002bc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002bc8:	4013      	ands	r3, r2
 8002bca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002bd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bde:	4a04      	ldr	r2, [pc, #16]	; (8002bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	60d3      	str	r3, [r2, #12]
}
 8002be4:	bf00      	nop
 8002be6:	3714      	adds	r7, #20
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bc80      	pop	{r7}
 8002bec:	4770      	bx	lr
 8002bee:	bf00      	nop
 8002bf0:	e000ed00 	.word	0xe000ed00

08002bf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bf8:	4b04      	ldr	r3, [pc, #16]	; (8002c0c <__NVIC_GetPriorityGrouping+0x18>)
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	0a1b      	lsrs	r3, r3, #8
 8002bfe:	f003 0307 	and.w	r3, r3, #7
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bc80      	pop	{r7}
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	e000ed00 	.word	0xe000ed00

08002c10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	4603      	mov	r3, r0
 8002c18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	db0b      	blt.n	8002c3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c22:	79fb      	ldrb	r3, [r7, #7]
 8002c24:	f003 021f 	and.w	r2, r3, #31
 8002c28:	4906      	ldr	r1, [pc, #24]	; (8002c44 <__NVIC_EnableIRQ+0x34>)
 8002c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c2e:	095b      	lsrs	r3, r3, #5
 8002c30:	2001      	movs	r0, #1
 8002c32:	fa00 f202 	lsl.w	r2, r0, r2
 8002c36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c3a:	bf00      	nop
 8002c3c:	370c      	adds	r7, #12
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bc80      	pop	{r7}
 8002c42:	4770      	bx	lr
 8002c44:	e000e100 	.word	0xe000e100

08002c48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	4603      	mov	r3, r0
 8002c50:	6039      	str	r1, [r7, #0]
 8002c52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	db0a      	blt.n	8002c72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	b2da      	uxtb	r2, r3
 8002c60:	490c      	ldr	r1, [pc, #48]	; (8002c94 <__NVIC_SetPriority+0x4c>)
 8002c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c66:	0112      	lsls	r2, r2, #4
 8002c68:	b2d2      	uxtb	r2, r2
 8002c6a:	440b      	add	r3, r1
 8002c6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c70:	e00a      	b.n	8002c88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	b2da      	uxtb	r2, r3
 8002c76:	4908      	ldr	r1, [pc, #32]	; (8002c98 <__NVIC_SetPriority+0x50>)
 8002c78:	79fb      	ldrb	r3, [r7, #7]
 8002c7a:	f003 030f 	and.w	r3, r3, #15
 8002c7e:	3b04      	subs	r3, #4
 8002c80:	0112      	lsls	r2, r2, #4
 8002c82:	b2d2      	uxtb	r2, r2
 8002c84:	440b      	add	r3, r1
 8002c86:	761a      	strb	r2, [r3, #24]
}
 8002c88:	bf00      	nop
 8002c8a:	370c      	adds	r7, #12
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bc80      	pop	{r7}
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop
 8002c94:	e000e100 	.word	0xe000e100
 8002c98:	e000ed00 	.word	0xe000ed00

08002c9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b089      	sub	sp, #36	; 0x24
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	60f8      	str	r0, [r7, #12]
 8002ca4:	60b9      	str	r1, [r7, #8]
 8002ca6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	f003 0307 	and.w	r3, r3, #7
 8002cae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	f1c3 0307 	rsb	r3, r3, #7
 8002cb6:	2b04      	cmp	r3, #4
 8002cb8:	bf28      	it	cs
 8002cba:	2304      	movcs	r3, #4
 8002cbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	3304      	adds	r3, #4
 8002cc2:	2b06      	cmp	r3, #6
 8002cc4:	d902      	bls.n	8002ccc <NVIC_EncodePriority+0x30>
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	3b03      	subs	r3, #3
 8002cca:	e000      	b.n	8002cce <NVIC_EncodePriority+0x32>
 8002ccc:	2300      	movs	r3, #0
 8002cce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cd0:	f04f 32ff 	mov.w	r2, #4294967295
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cda:	43da      	mvns	r2, r3
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	401a      	ands	r2, r3
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ce4:	f04f 31ff 	mov.w	r1, #4294967295
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	fa01 f303 	lsl.w	r3, r1, r3
 8002cee:	43d9      	mvns	r1, r3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cf4:	4313      	orrs	r3, r2
         );
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3724      	adds	r7, #36	; 0x24
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bc80      	pop	{r7}
 8002cfe:	4770      	bx	lr

08002d00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	3b01      	subs	r3, #1
 8002d0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d10:	d301      	bcc.n	8002d16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d12:	2301      	movs	r3, #1
 8002d14:	e00f      	b.n	8002d36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d16:	4a0a      	ldr	r2, [pc, #40]	; (8002d40 <SysTick_Config+0x40>)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	3b01      	subs	r3, #1
 8002d1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d1e:	210f      	movs	r1, #15
 8002d20:	f04f 30ff 	mov.w	r0, #4294967295
 8002d24:	f7ff ff90 	bl	8002c48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d28:	4b05      	ldr	r3, [pc, #20]	; (8002d40 <SysTick_Config+0x40>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d2e:	4b04      	ldr	r3, [pc, #16]	; (8002d40 <SysTick_Config+0x40>)
 8002d30:	2207      	movs	r2, #7
 8002d32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d34:	2300      	movs	r3, #0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3708      	adds	r7, #8
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	e000e010 	.word	0xe000e010

08002d44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f7ff ff2d 	bl	8002bac <__NVIC_SetPriorityGrouping>
}
 8002d52:	bf00      	nop
 8002d54:	3708      	adds	r7, #8
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}

08002d5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d5a:	b580      	push	{r7, lr}
 8002d5c:	b086      	sub	sp, #24
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	4603      	mov	r3, r0
 8002d62:	60b9      	str	r1, [r7, #8]
 8002d64:	607a      	str	r2, [r7, #4]
 8002d66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d6c:	f7ff ff42 	bl	8002bf4 <__NVIC_GetPriorityGrouping>
 8002d70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	68b9      	ldr	r1, [r7, #8]
 8002d76:	6978      	ldr	r0, [r7, #20]
 8002d78:	f7ff ff90 	bl	8002c9c <NVIC_EncodePriority>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d82:	4611      	mov	r1, r2
 8002d84:	4618      	mov	r0, r3
 8002d86:	f7ff ff5f 	bl	8002c48 <__NVIC_SetPriority>
}
 8002d8a:	bf00      	nop
 8002d8c:	3718      	adds	r7, #24
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d92:	b580      	push	{r7, lr}
 8002d94:	b082      	sub	sp, #8
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	4603      	mov	r3, r0
 8002d9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002da0:	4618      	mov	r0, r3
 8002da2:	f7ff ff35 	bl	8002c10 <__NVIC_EnableIRQ>
}
 8002da6:	bf00      	nop
 8002da8:	3708      	adds	r7, #8
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}

08002dae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002dae:	b580      	push	{r7, lr}
 8002db0:	b082      	sub	sp, #8
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f7ff ffa2 	bl	8002d00 <SysTick_Config>
 8002dbc:	4603      	mov	r3, r0
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3708      	adds	r7, #8
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
	...

08002dc8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b086      	sub	sp, #24
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002dd4:	f7ff fab2 	bl	800233c <HAL_GetTick>
 8002dd8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d101      	bne.n	8002de4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e099      	b.n	8002f18 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2202      	movs	r2, #2
 8002de8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f022 0201 	bic.w	r2, r2, #1
 8002e02:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e04:	e00f      	b.n	8002e26 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e06:	f7ff fa99 	bl	800233c <HAL_GetTick>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	2b05      	cmp	r3, #5
 8002e12:	d908      	bls.n	8002e26 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2220      	movs	r2, #32
 8002e18:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2203      	movs	r2, #3
 8002e1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e078      	b.n	8002f18 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0301 	and.w	r3, r3, #1
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d1e8      	bne.n	8002e06 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002e3c:	697a      	ldr	r2, [r7, #20]
 8002e3e:	4b38      	ldr	r3, [pc, #224]	; (8002f20 <HAL_DMA_Init+0x158>)
 8002e40:	4013      	ands	r3, r2
 8002e42:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	685a      	ldr	r2, [r3, #4]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e52:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	691b      	ldr	r3, [r3, #16]
 8002e58:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	699b      	ldr	r3, [r3, #24]
 8002e64:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e6a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6a1b      	ldr	r3, [r3, #32]
 8002e70:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e72:	697a      	ldr	r2, [r7, #20]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7c:	2b04      	cmp	r3, #4
 8002e7e:	d107      	bne.n	8002e90 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	697a      	ldr	r2, [r7, #20]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	697a      	ldr	r2, [r7, #20]
 8002e96:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	695b      	ldr	r3, [r3, #20]
 8002e9e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	f023 0307 	bic.w	r3, r3, #7
 8002ea6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eac:	697a      	ldr	r2, [r7, #20]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb6:	2b04      	cmp	r3, #4
 8002eb8:	d117      	bne.n	8002eea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ebe:	697a      	ldr	r2, [r7, #20]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d00e      	beq.n	8002eea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f000 fadd 	bl	800348c <DMA_CheckFifoParam>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d008      	beq.n	8002eea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2240      	movs	r2, #64	; 0x40
 8002edc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e016      	b.n	8002f18 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	697a      	ldr	r2, [r7, #20]
 8002ef0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f000 fa96 	bl	8003424 <DMA_CalcBaseAndBitshift>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f00:	223f      	movs	r2, #63	; 0x3f
 8002f02:	409a      	lsls	r2, r3
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2201      	movs	r2, #1
 8002f12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002f16:	2300      	movs	r3, #0
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3718      	adds	r7, #24
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	f010803f 	.word	0xf010803f

08002f24 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b086      	sub	sp, #24
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	60f8      	str	r0, [r7, #12]
 8002f2c:	60b9      	str	r1, [r7, #8]
 8002f2e:	607a      	str	r2, [r7, #4]
 8002f30:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f32:	2300      	movs	r3, #0
 8002f34:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f3a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d101      	bne.n	8002f4a <HAL_DMA_Start_IT+0x26>
 8002f46:	2302      	movs	r3, #2
 8002f48:	e040      	b.n	8002fcc <HAL_DMA_Start_IT+0xa8>
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d12f      	bne.n	8002fbe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2202      	movs	r2, #2
 8002f62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	68b9      	ldr	r1, [r7, #8]
 8002f72:	68f8      	ldr	r0, [r7, #12]
 8002f74:	f000 fa28 	bl	80033c8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f7c:	223f      	movs	r2, #63	; 0x3f
 8002f7e:	409a      	lsls	r2, r3
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f042 0216 	orr.w	r2, r2, #22
 8002f92:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d007      	beq.n	8002fac <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f042 0208 	orr.w	r2, r2, #8
 8002faa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f042 0201 	orr.w	r2, r2, #1
 8002fba:	601a      	str	r2, [r3, #0]
 8002fbc:	e005      	b.n	8002fca <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002fc6:	2302      	movs	r3, #2
 8002fc8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002fca:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3718      	adds	r7, #24
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}

08002fd4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b084      	sub	sp, #16
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fe0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002fe2:	f7ff f9ab 	bl	800233c <HAL_GetTick>
 8002fe6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	d008      	beq.n	8003006 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2280      	movs	r2, #128	; 0x80
 8002ff8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e052      	b.n	80030ac <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f022 0216 	bic.w	r2, r2, #22
 8003014:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	695a      	ldr	r2, [r3, #20]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003024:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302a:	2b00      	cmp	r3, #0
 800302c:	d103      	bne.n	8003036 <HAL_DMA_Abort+0x62>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003032:	2b00      	cmp	r3, #0
 8003034:	d007      	beq.n	8003046 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f022 0208 	bic.w	r2, r2, #8
 8003044:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f022 0201 	bic.w	r2, r2, #1
 8003054:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003056:	e013      	b.n	8003080 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003058:	f7ff f970 	bl	800233c <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	2b05      	cmp	r3, #5
 8003064:	d90c      	bls.n	8003080 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2220      	movs	r2, #32
 800306a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2203      	movs	r2, #3
 8003070:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800307c:	2303      	movs	r3, #3
 800307e:	e015      	b.n	80030ac <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0301 	and.w	r3, r3, #1
 800308a:	2b00      	cmp	r3, #0
 800308c:	d1e4      	bne.n	8003058 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003092:	223f      	movs	r2, #63	; 0x3f
 8003094:	409a      	lsls	r2, r3
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2201      	movs	r2, #1
 800309e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80030aa:	2300      	movs	r3, #0
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3710      	adds	r7, #16
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b086      	sub	sp, #24
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80030bc:	2300      	movs	r3, #0
 80030be:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80030c0:	4b92      	ldr	r3, [pc, #584]	; (800330c <HAL_DMA_IRQHandler+0x258>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a92      	ldr	r2, [pc, #584]	; (8003310 <HAL_DMA_IRQHandler+0x25c>)
 80030c6:	fba2 2303 	umull	r2, r3, r2, r3
 80030ca:	0a9b      	lsrs	r3, r3, #10
 80030cc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030d2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030de:	2208      	movs	r2, #8
 80030e0:	409a      	lsls	r2, r3
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	4013      	ands	r3, r2
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d01a      	beq.n	8003120 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0304 	and.w	r3, r3, #4
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d013      	beq.n	8003120 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f022 0204 	bic.w	r2, r2, #4
 8003106:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800310c:	2208      	movs	r2, #8
 800310e:	409a      	lsls	r2, r3
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003118:	f043 0201 	orr.w	r2, r3, #1
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003124:	2201      	movs	r2, #1
 8003126:	409a      	lsls	r2, r3
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	4013      	ands	r3, r2
 800312c:	2b00      	cmp	r3, #0
 800312e:	d012      	beq.n	8003156 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	695b      	ldr	r3, [r3, #20]
 8003136:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800313a:	2b00      	cmp	r3, #0
 800313c:	d00b      	beq.n	8003156 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003142:	2201      	movs	r2, #1
 8003144:	409a      	lsls	r2, r3
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800314e:	f043 0202 	orr.w	r2, r3, #2
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800315a:	2204      	movs	r2, #4
 800315c:	409a      	lsls	r2, r3
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	4013      	ands	r3, r2
 8003162:	2b00      	cmp	r3, #0
 8003164:	d012      	beq.n	800318c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0302 	and.w	r3, r3, #2
 8003170:	2b00      	cmp	r3, #0
 8003172:	d00b      	beq.n	800318c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003178:	2204      	movs	r2, #4
 800317a:	409a      	lsls	r2, r3
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003184:	f043 0204 	orr.w	r2, r3, #4
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003190:	2210      	movs	r2, #16
 8003192:	409a      	lsls	r2, r3
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	4013      	ands	r3, r2
 8003198:	2b00      	cmp	r3, #0
 800319a:	d043      	beq.n	8003224 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0308 	and.w	r3, r3, #8
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d03c      	beq.n	8003224 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ae:	2210      	movs	r2, #16
 80031b0:	409a      	lsls	r2, r3
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d018      	beq.n	80031f6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d108      	bne.n	80031e4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d024      	beq.n	8003224 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	4798      	blx	r3
 80031e2:	e01f      	b.n	8003224 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d01b      	beq.n	8003224 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	4798      	blx	r3
 80031f4:	e016      	b.n	8003224 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003200:	2b00      	cmp	r3, #0
 8003202:	d107      	bne.n	8003214 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f022 0208 	bic.w	r2, r2, #8
 8003212:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003218:	2b00      	cmp	r3, #0
 800321a:	d003      	beq.n	8003224 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003228:	2220      	movs	r2, #32
 800322a:	409a      	lsls	r2, r3
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	4013      	ands	r3, r2
 8003230:	2b00      	cmp	r3, #0
 8003232:	f000 808e 	beq.w	8003352 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0310 	and.w	r3, r3, #16
 8003240:	2b00      	cmp	r3, #0
 8003242:	f000 8086 	beq.w	8003352 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800324a:	2220      	movs	r2, #32
 800324c:	409a      	lsls	r2, r3
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003258:	b2db      	uxtb	r3, r3
 800325a:	2b05      	cmp	r3, #5
 800325c:	d136      	bne.n	80032cc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f022 0216 	bic.w	r2, r2, #22
 800326c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	695a      	ldr	r2, [r3, #20]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800327c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003282:	2b00      	cmp	r3, #0
 8003284:	d103      	bne.n	800328e <HAL_DMA_IRQHandler+0x1da>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800328a:	2b00      	cmp	r3, #0
 800328c:	d007      	beq.n	800329e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f022 0208 	bic.w	r2, r2, #8
 800329c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032a2:	223f      	movs	r2, #63	; 0x3f
 80032a4:	409a      	lsls	r2, r3
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2201      	movs	r2, #1
 80032ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d07d      	beq.n	80033be <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	4798      	blx	r3
        }
        return;
 80032ca:	e078      	b.n	80033be <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d01c      	beq.n	8003314 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d108      	bne.n	80032fa <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d030      	beq.n	8003352 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	4798      	blx	r3
 80032f8:	e02b      	b.n	8003352 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d027      	beq.n	8003352 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	4798      	blx	r3
 800330a:	e022      	b.n	8003352 <HAL_DMA_IRQHandler+0x29e>
 800330c:	20000010 	.word	0x20000010
 8003310:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800331e:	2b00      	cmp	r3, #0
 8003320:	d10f      	bne.n	8003342 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f022 0210 	bic.w	r2, r2, #16
 8003330:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2201      	movs	r2, #1
 8003336:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003346:	2b00      	cmp	r3, #0
 8003348:	d003      	beq.n	8003352 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003356:	2b00      	cmp	r3, #0
 8003358:	d032      	beq.n	80033c0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800335e:	f003 0301 	and.w	r3, r3, #1
 8003362:	2b00      	cmp	r3, #0
 8003364:	d022      	beq.n	80033ac <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2205      	movs	r2, #5
 800336a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f022 0201 	bic.w	r2, r2, #1
 800337c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	3301      	adds	r3, #1
 8003382:	60bb      	str	r3, [r7, #8]
 8003384:	697a      	ldr	r2, [r7, #20]
 8003386:	429a      	cmp	r2, r3
 8003388:	d307      	bcc.n	800339a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0301 	and.w	r3, r3, #1
 8003394:	2b00      	cmp	r3, #0
 8003396:	d1f2      	bne.n	800337e <HAL_DMA_IRQHandler+0x2ca>
 8003398:	e000      	b.n	800339c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800339a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2201      	movs	r2, #1
 80033a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d005      	beq.n	80033c0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	4798      	blx	r3
 80033bc:	e000      	b.n	80033c0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80033be:	bf00      	nop
    }
  }
}
 80033c0:	3718      	adds	r7, #24
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop

080033c8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b085      	sub	sp, #20
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	60b9      	str	r1, [r7, #8]
 80033d2:	607a      	str	r2, [r7, #4]
 80033d4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80033e4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	683a      	ldr	r2, [r7, #0]
 80033ec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	2b40      	cmp	r3, #64	; 0x40
 80033f4:	d108      	bne.n	8003408 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	68ba      	ldr	r2, [r7, #8]
 8003404:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003406:	e007      	b.n	8003418 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	68ba      	ldr	r2, [r7, #8]
 800340e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	60da      	str	r2, [r3, #12]
}
 8003418:	bf00      	nop
 800341a:	3714      	adds	r7, #20
 800341c:	46bd      	mov	sp, r7
 800341e:	bc80      	pop	{r7}
 8003420:	4770      	bx	lr
	...

08003424 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003424:	b480      	push	{r7}
 8003426:	b085      	sub	sp, #20
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	b2db      	uxtb	r3, r3
 8003432:	3b10      	subs	r3, #16
 8003434:	4a13      	ldr	r2, [pc, #76]	; (8003484 <DMA_CalcBaseAndBitshift+0x60>)
 8003436:	fba2 2303 	umull	r2, r3, r2, r3
 800343a:	091b      	lsrs	r3, r3, #4
 800343c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800343e:	4a12      	ldr	r2, [pc, #72]	; (8003488 <DMA_CalcBaseAndBitshift+0x64>)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	4413      	add	r3, r2
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	461a      	mov	r2, r3
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2b03      	cmp	r3, #3
 8003450:	d909      	bls.n	8003466 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800345a:	f023 0303 	bic.w	r3, r3, #3
 800345e:	1d1a      	adds	r2, r3, #4
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	659a      	str	r2, [r3, #88]	; 0x58
 8003464:	e007      	b.n	8003476 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800346e:	f023 0303 	bic.w	r3, r3, #3
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800347a:	4618      	mov	r0, r3
 800347c:	3714      	adds	r7, #20
 800347e:	46bd      	mov	sp, r7
 8003480:	bc80      	pop	{r7}
 8003482:	4770      	bx	lr
 8003484:	aaaaaaab 	.word	0xaaaaaaab
 8003488:	08004fc4 	.word	0x08004fc4

0800348c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800348c:	b480      	push	{r7}
 800348e:	b085      	sub	sp, #20
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003494:	2300      	movs	r3, #0
 8003496:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800349c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	699b      	ldr	r3, [r3, #24]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d11f      	bne.n	80034e6 <DMA_CheckFifoParam+0x5a>
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	2b03      	cmp	r3, #3
 80034aa:	d856      	bhi.n	800355a <DMA_CheckFifoParam+0xce>
 80034ac:	a201      	add	r2, pc, #4	; (adr r2, 80034b4 <DMA_CheckFifoParam+0x28>)
 80034ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034b2:	bf00      	nop
 80034b4:	080034c5 	.word	0x080034c5
 80034b8:	080034d7 	.word	0x080034d7
 80034bc:	080034c5 	.word	0x080034c5
 80034c0:	0800355b 	.word	0x0800355b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d046      	beq.n	800355e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034d4:	e043      	b.n	800355e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034da:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80034de:	d140      	bne.n	8003562 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034e4:	e03d      	b.n	8003562 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	699b      	ldr	r3, [r3, #24]
 80034ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034ee:	d121      	bne.n	8003534 <DMA_CheckFifoParam+0xa8>
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	2b03      	cmp	r3, #3
 80034f4:	d837      	bhi.n	8003566 <DMA_CheckFifoParam+0xda>
 80034f6:	a201      	add	r2, pc, #4	; (adr r2, 80034fc <DMA_CheckFifoParam+0x70>)
 80034f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034fc:	0800350d 	.word	0x0800350d
 8003500:	08003513 	.word	0x08003513
 8003504:	0800350d 	.word	0x0800350d
 8003508:	08003525 	.word	0x08003525
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	73fb      	strb	r3, [r7, #15]
      break;
 8003510:	e030      	b.n	8003574 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003516:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d025      	beq.n	800356a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003522:	e022      	b.n	800356a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003528:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800352c:	d11f      	bne.n	800356e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003532:	e01c      	b.n	800356e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	2b02      	cmp	r3, #2
 8003538:	d903      	bls.n	8003542 <DMA_CheckFifoParam+0xb6>
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	2b03      	cmp	r3, #3
 800353e:	d003      	beq.n	8003548 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003540:	e018      	b.n	8003574 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	73fb      	strb	r3, [r7, #15]
      break;
 8003546:	e015      	b.n	8003574 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800354c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003550:	2b00      	cmp	r3, #0
 8003552:	d00e      	beq.n	8003572 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	73fb      	strb	r3, [r7, #15]
      break;
 8003558:	e00b      	b.n	8003572 <DMA_CheckFifoParam+0xe6>
      break;
 800355a:	bf00      	nop
 800355c:	e00a      	b.n	8003574 <DMA_CheckFifoParam+0xe8>
      break;
 800355e:	bf00      	nop
 8003560:	e008      	b.n	8003574 <DMA_CheckFifoParam+0xe8>
      break;
 8003562:	bf00      	nop
 8003564:	e006      	b.n	8003574 <DMA_CheckFifoParam+0xe8>
      break;
 8003566:	bf00      	nop
 8003568:	e004      	b.n	8003574 <DMA_CheckFifoParam+0xe8>
      break;
 800356a:	bf00      	nop
 800356c:	e002      	b.n	8003574 <DMA_CheckFifoParam+0xe8>
      break;   
 800356e:	bf00      	nop
 8003570:	e000      	b.n	8003574 <DMA_CheckFifoParam+0xe8>
      break;
 8003572:	bf00      	nop
    }
  } 
  
  return status; 
 8003574:	7bfb      	ldrb	r3, [r7, #15]
}
 8003576:	4618      	mov	r0, r3
 8003578:	3714      	adds	r7, #20
 800357a:	46bd      	mov	sp, r7
 800357c:	bc80      	pop	{r7}
 800357e:	4770      	bx	lr

08003580 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003580:	b480      	push	{r7}
 8003582:	b087      	sub	sp, #28
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800358a:	2300      	movs	r3, #0
 800358c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800358e:	e16f      	b.n	8003870 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	2101      	movs	r1, #1
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	fa01 f303 	lsl.w	r3, r1, r3
 800359c:	4013      	ands	r3, r2
 800359e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	f000 8161 	beq.w	800386a <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	f003 0303 	and.w	r3, r3, #3
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d005      	beq.n	80035c0 <HAL_GPIO_Init+0x40>
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	f003 0303 	and.w	r3, r3, #3
 80035bc:	2b02      	cmp	r3, #2
 80035be:	d130      	bne.n	8003622 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	005b      	lsls	r3, r3, #1
 80035ca:	2203      	movs	r2, #3
 80035cc:	fa02 f303 	lsl.w	r3, r2, r3
 80035d0:	43db      	mvns	r3, r3
 80035d2:	693a      	ldr	r2, [r7, #16]
 80035d4:	4013      	ands	r3, r2
 80035d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	68da      	ldr	r2, [r3, #12]
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	005b      	lsls	r3, r3, #1
 80035e0:	fa02 f303 	lsl.w	r3, r2, r3
 80035e4:	693a      	ldr	r2, [r7, #16]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	693a      	ldr	r2, [r7, #16]
 80035ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80035f6:	2201      	movs	r2, #1
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	fa02 f303 	lsl.w	r3, r2, r3
 80035fe:	43db      	mvns	r3, r3
 8003600:	693a      	ldr	r2, [r7, #16]
 8003602:	4013      	ands	r3, r2
 8003604:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	091b      	lsrs	r3, r3, #4
 800360c:	f003 0201 	and.w	r2, r3, #1
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	fa02 f303 	lsl.w	r3, r2, r3
 8003616:	693a      	ldr	r2, [r7, #16]
 8003618:	4313      	orrs	r3, r2
 800361a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	693a      	ldr	r2, [r7, #16]
 8003620:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	f003 0303 	and.w	r3, r3, #3
 800362a:	2b03      	cmp	r3, #3
 800362c:	d017      	beq.n	800365e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	005b      	lsls	r3, r3, #1
 8003638:	2203      	movs	r2, #3
 800363a:	fa02 f303 	lsl.w	r3, r2, r3
 800363e:	43db      	mvns	r3, r3
 8003640:	693a      	ldr	r2, [r7, #16]
 8003642:	4013      	ands	r3, r2
 8003644:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	689a      	ldr	r2, [r3, #8]
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	005b      	lsls	r3, r3, #1
 800364e:	fa02 f303 	lsl.w	r3, r2, r3
 8003652:	693a      	ldr	r2, [r7, #16]
 8003654:	4313      	orrs	r3, r2
 8003656:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	693a      	ldr	r2, [r7, #16]
 800365c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f003 0303 	and.w	r3, r3, #3
 8003666:	2b02      	cmp	r3, #2
 8003668:	d123      	bne.n	80036b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	08da      	lsrs	r2, r3, #3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	3208      	adds	r2, #8
 8003672:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003676:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	f003 0307 	and.w	r3, r3, #7
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	220f      	movs	r2, #15
 8003682:	fa02 f303 	lsl.w	r3, r2, r3
 8003686:	43db      	mvns	r3, r3
 8003688:	693a      	ldr	r2, [r7, #16]
 800368a:	4013      	ands	r3, r2
 800368c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	691a      	ldr	r2, [r3, #16]
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	f003 0307 	and.w	r3, r3, #7
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	fa02 f303 	lsl.w	r3, r2, r3
 800369e:	693a      	ldr	r2, [r7, #16]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	08da      	lsrs	r2, r3, #3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	3208      	adds	r2, #8
 80036ac:	6939      	ldr	r1, [r7, #16]
 80036ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	005b      	lsls	r3, r3, #1
 80036bc:	2203      	movs	r2, #3
 80036be:	fa02 f303 	lsl.w	r3, r2, r3
 80036c2:	43db      	mvns	r3, r3
 80036c4:	693a      	ldr	r2, [r7, #16]
 80036c6:	4013      	ands	r3, r2
 80036c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	f003 0203 	and.w	r2, r3, #3
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	005b      	lsls	r3, r3, #1
 80036d6:	fa02 f303 	lsl.w	r3, r2, r3
 80036da:	693a      	ldr	r2, [r7, #16]
 80036dc:	4313      	orrs	r3, r2
 80036de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	693a      	ldr	r2, [r7, #16]
 80036e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	f000 80bb 	beq.w	800386a <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036f4:	2300      	movs	r3, #0
 80036f6:	60bb      	str	r3, [r7, #8]
 80036f8:	4b64      	ldr	r3, [pc, #400]	; (800388c <HAL_GPIO_Init+0x30c>)
 80036fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036fc:	4a63      	ldr	r2, [pc, #396]	; (800388c <HAL_GPIO_Init+0x30c>)
 80036fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003702:	6453      	str	r3, [r2, #68]	; 0x44
 8003704:	4b61      	ldr	r3, [pc, #388]	; (800388c <HAL_GPIO_Init+0x30c>)
 8003706:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003708:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800370c:	60bb      	str	r3, [r7, #8]
 800370e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003710:	4a5f      	ldr	r2, [pc, #380]	; (8003890 <HAL_GPIO_Init+0x310>)
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	089b      	lsrs	r3, r3, #2
 8003716:	3302      	adds	r3, #2
 8003718:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800371c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	f003 0303 	and.w	r3, r3, #3
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	220f      	movs	r2, #15
 8003728:	fa02 f303 	lsl.w	r3, r2, r3
 800372c:	43db      	mvns	r3, r3
 800372e:	693a      	ldr	r2, [r7, #16]
 8003730:	4013      	ands	r3, r2
 8003732:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	4a57      	ldr	r2, [pc, #348]	; (8003894 <HAL_GPIO_Init+0x314>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d031      	beq.n	80037a0 <HAL_GPIO_Init+0x220>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	4a56      	ldr	r2, [pc, #344]	; (8003898 <HAL_GPIO_Init+0x318>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d02b      	beq.n	800379c <HAL_GPIO_Init+0x21c>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	4a55      	ldr	r2, [pc, #340]	; (800389c <HAL_GPIO_Init+0x31c>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d025      	beq.n	8003798 <HAL_GPIO_Init+0x218>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	4a54      	ldr	r2, [pc, #336]	; (80038a0 <HAL_GPIO_Init+0x320>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d01f      	beq.n	8003794 <HAL_GPIO_Init+0x214>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	4a53      	ldr	r2, [pc, #332]	; (80038a4 <HAL_GPIO_Init+0x324>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d019      	beq.n	8003790 <HAL_GPIO_Init+0x210>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	4a52      	ldr	r2, [pc, #328]	; (80038a8 <HAL_GPIO_Init+0x328>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d013      	beq.n	800378c <HAL_GPIO_Init+0x20c>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	4a51      	ldr	r2, [pc, #324]	; (80038ac <HAL_GPIO_Init+0x32c>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d00d      	beq.n	8003788 <HAL_GPIO_Init+0x208>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	4a50      	ldr	r2, [pc, #320]	; (80038b0 <HAL_GPIO_Init+0x330>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d007      	beq.n	8003784 <HAL_GPIO_Init+0x204>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	4a4f      	ldr	r2, [pc, #316]	; (80038b4 <HAL_GPIO_Init+0x334>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d101      	bne.n	8003780 <HAL_GPIO_Init+0x200>
 800377c:	2308      	movs	r3, #8
 800377e:	e010      	b.n	80037a2 <HAL_GPIO_Init+0x222>
 8003780:	2309      	movs	r3, #9
 8003782:	e00e      	b.n	80037a2 <HAL_GPIO_Init+0x222>
 8003784:	2307      	movs	r3, #7
 8003786:	e00c      	b.n	80037a2 <HAL_GPIO_Init+0x222>
 8003788:	2306      	movs	r3, #6
 800378a:	e00a      	b.n	80037a2 <HAL_GPIO_Init+0x222>
 800378c:	2305      	movs	r3, #5
 800378e:	e008      	b.n	80037a2 <HAL_GPIO_Init+0x222>
 8003790:	2304      	movs	r3, #4
 8003792:	e006      	b.n	80037a2 <HAL_GPIO_Init+0x222>
 8003794:	2303      	movs	r3, #3
 8003796:	e004      	b.n	80037a2 <HAL_GPIO_Init+0x222>
 8003798:	2302      	movs	r3, #2
 800379a:	e002      	b.n	80037a2 <HAL_GPIO_Init+0x222>
 800379c:	2301      	movs	r3, #1
 800379e:	e000      	b.n	80037a2 <HAL_GPIO_Init+0x222>
 80037a0:	2300      	movs	r3, #0
 80037a2:	697a      	ldr	r2, [r7, #20]
 80037a4:	f002 0203 	and.w	r2, r2, #3
 80037a8:	0092      	lsls	r2, r2, #2
 80037aa:	4093      	lsls	r3, r2
 80037ac:	461a      	mov	r2, r3
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	4313      	orrs	r3, r2
 80037b2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80037b4:	4936      	ldr	r1, [pc, #216]	; (8003890 <HAL_GPIO_Init+0x310>)
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	089b      	lsrs	r3, r3, #2
 80037ba:	3302      	adds	r3, #2
 80037bc:	693a      	ldr	r2, [r7, #16]
 80037be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80037c2:	4b3d      	ldr	r3, [pc, #244]	; (80038b8 <HAL_GPIO_Init+0x338>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	43db      	mvns	r3, r3
 80037cc:	693a      	ldr	r2, [r7, #16]
 80037ce:	4013      	ands	r3, r2
 80037d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d003      	beq.n	80037e6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80037de:	693a      	ldr	r2, [r7, #16]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80037e6:	4a34      	ldr	r2, [pc, #208]	; (80038b8 <HAL_GPIO_Init+0x338>)
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80037ec:	4b32      	ldr	r3, [pc, #200]	; (80038b8 <HAL_GPIO_Init+0x338>)
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	43db      	mvns	r3, r3
 80037f6:	693a      	ldr	r2, [r7, #16]
 80037f8:	4013      	ands	r3, r2
 80037fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003804:	2b00      	cmp	r3, #0
 8003806:	d003      	beq.n	8003810 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003808:	693a      	ldr	r2, [r7, #16]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	4313      	orrs	r3, r2
 800380e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003810:	4a29      	ldr	r2, [pc, #164]	; (80038b8 <HAL_GPIO_Init+0x338>)
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003816:	4b28      	ldr	r3, [pc, #160]	; (80038b8 <HAL_GPIO_Init+0x338>)
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	43db      	mvns	r3, r3
 8003820:	693a      	ldr	r2, [r7, #16]
 8003822:	4013      	ands	r3, r2
 8003824:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d003      	beq.n	800383a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003832:	693a      	ldr	r2, [r7, #16]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	4313      	orrs	r3, r2
 8003838:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800383a:	4a1f      	ldr	r2, [pc, #124]	; (80038b8 <HAL_GPIO_Init+0x338>)
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003840:	4b1d      	ldr	r3, [pc, #116]	; (80038b8 <HAL_GPIO_Init+0x338>)
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	43db      	mvns	r3, r3
 800384a:	693a      	ldr	r2, [r7, #16]
 800384c:	4013      	ands	r3, r2
 800384e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003858:	2b00      	cmp	r3, #0
 800385a:	d003      	beq.n	8003864 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 800385c:	693a      	ldr	r2, [r7, #16]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	4313      	orrs	r3, r2
 8003862:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003864:	4a14      	ldr	r2, [pc, #80]	; (80038b8 <HAL_GPIO_Init+0x338>)
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	3301      	adds	r3, #1
 800386e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	fa22 f303 	lsr.w	r3, r2, r3
 800387a:	2b00      	cmp	r3, #0
 800387c:	f47f ae88 	bne.w	8003590 <HAL_GPIO_Init+0x10>
  }
}
 8003880:	bf00      	nop
 8003882:	bf00      	nop
 8003884:	371c      	adds	r7, #28
 8003886:	46bd      	mov	sp, r7
 8003888:	bc80      	pop	{r7}
 800388a:	4770      	bx	lr
 800388c:	40023800 	.word	0x40023800
 8003890:	40013800 	.word	0x40013800
 8003894:	40020000 	.word	0x40020000
 8003898:	40020400 	.word	0x40020400
 800389c:	40020800 	.word	0x40020800
 80038a0:	40020c00 	.word	0x40020c00
 80038a4:	40021000 	.word	0x40021000
 80038a8:	40021400 	.word	0x40021400
 80038ac:	40021800 	.word	0x40021800
 80038b0:	40021c00 	.word	0x40021c00
 80038b4:	40022000 	.word	0x40022000
 80038b8:	40013c00 	.word	0x40013c00

080038bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038bc:	b480      	push	{r7}
 80038be:	b083      	sub	sp, #12
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	460b      	mov	r3, r1
 80038c6:	807b      	strh	r3, [r7, #2]
 80038c8:	4613      	mov	r3, r2
 80038ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80038cc:	787b      	ldrb	r3, [r7, #1]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d003      	beq.n	80038da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80038d2:	887a      	ldrh	r2, [r7, #2]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80038d8:	e003      	b.n	80038e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80038da:	887b      	ldrh	r3, [r7, #2]
 80038dc:	041a      	lsls	r2, r3, #16
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	619a      	str	r2, [r3, #24]
}
 80038e2:	bf00      	nop
 80038e4:	370c      	adds	r7, #12
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bc80      	pop	{r7}
 80038ea:	4770      	bx	lr

080038ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b08a      	sub	sp, #40	; 0x28
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d101      	bne.n	80038fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e237      	b.n	8003d6e <HAL_RCC_OscConfig+0x482>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0301 	and.w	r3, r3, #1
 8003906:	2b00      	cmp	r3, #0
 8003908:	d050      	beq.n	80039ac <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800390a:	4ba3      	ldr	r3, [pc, #652]	; (8003b98 <HAL_RCC_OscConfig+0x2ac>)
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	f003 030c 	and.w	r3, r3, #12
 8003912:	2b04      	cmp	r3, #4
 8003914:	d00c      	beq.n	8003930 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003916:	4ba0      	ldr	r3, [pc, #640]	; (8003b98 <HAL_RCC_OscConfig+0x2ac>)
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800391e:	2b08      	cmp	r3, #8
 8003920:	d112      	bne.n	8003948 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003922:	4b9d      	ldr	r3, [pc, #628]	; (8003b98 <HAL_RCC_OscConfig+0x2ac>)
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800392a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800392e:	d10b      	bne.n	8003948 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003930:	4b99      	ldr	r3, [pc, #612]	; (8003b98 <HAL_RCC_OscConfig+0x2ac>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003938:	2b00      	cmp	r3, #0
 800393a:	d036      	beq.n	80039aa <HAL_RCC_OscConfig+0xbe>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d132      	bne.n	80039aa <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e212      	b.n	8003d6e <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	685a      	ldr	r2, [r3, #4]
 800394c:	4b93      	ldr	r3, [pc, #588]	; (8003b9c <HAL_RCC_OscConfig+0x2b0>)
 800394e:	b2d2      	uxtb	r2, r2
 8003950:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d013      	beq.n	8003982 <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800395a:	f7fe fcef 	bl	800233c <HAL_GetTick>
 800395e:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003960:	e008      	b.n	8003974 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003962:	f7fe fceb 	bl	800233c <HAL_GetTick>
 8003966:	4602      	mov	r2, r0
 8003968:	6a3b      	ldr	r3, [r7, #32]
 800396a:	1ad3      	subs	r3, r2, r3
 800396c:	2b64      	cmp	r3, #100	; 0x64
 800396e:	d901      	bls.n	8003974 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 8003970:	2303      	movs	r3, #3
 8003972:	e1fc      	b.n	8003d6e <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003974:	4b88      	ldr	r3, [pc, #544]	; (8003b98 <HAL_RCC_OscConfig+0x2ac>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800397c:	2b00      	cmp	r3, #0
 800397e:	d0f0      	beq.n	8003962 <HAL_RCC_OscConfig+0x76>
 8003980:	e014      	b.n	80039ac <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003982:	f7fe fcdb 	bl	800233c <HAL_GetTick>
 8003986:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003988:	e008      	b.n	800399c <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800398a:	f7fe fcd7 	bl	800233c <HAL_GetTick>
 800398e:	4602      	mov	r2, r0
 8003990:	6a3b      	ldr	r3, [r7, #32]
 8003992:	1ad3      	subs	r3, r2, r3
 8003994:	2b64      	cmp	r3, #100	; 0x64
 8003996:	d901      	bls.n	800399c <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8003998:	2303      	movs	r3, #3
 800399a:	e1e8      	b.n	8003d6e <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800399c:	4b7e      	ldr	r3, [pc, #504]	; (8003b98 <HAL_RCC_OscConfig+0x2ac>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d1f0      	bne.n	800398a <HAL_RCC_OscConfig+0x9e>
 80039a8:	e000      	b.n	80039ac <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039aa:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 0302 	and.w	r3, r3, #2
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d077      	beq.n	8003aa8 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039b8:	4b77      	ldr	r3, [pc, #476]	; (8003b98 <HAL_RCC_OscConfig+0x2ac>)
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	f003 030c 	and.w	r3, r3, #12
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d00b      	beq.n	80039dc <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039c4:	4b74      	ldr	r3, [pc, #464]	; (8003b98 <HAL_RCC_OscConfig+0x2ac>)
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039cc:	2b08      	cmp	r3, #8
 80039ce:	d126      	bne.n	8003a1e <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039d0:	4b71      	ldr	r3, [pc, #452]	; (8003b98 <HAL_RCC_OscConfig+0x2ac>)
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d120      	bne.n	8003a1e <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039dc:	4b6e      	ldr	r3, [pc, #440]	; (8003b98 <HAL_RCC_OscConfig+0x2ac>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 0302 	and.w	r3, r3, #2
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d005      	beq.n	80039f4 <HAL_RCC_OscConfig+0x108>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d001      	beq.n	80039f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e1bc      	b.n	8003d6e <HAL_RCC_OscConfig+0x482>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039f4:	4b68      	ldr	r3, [pc, #416]	; (8003b98 <HAL_RCC_OscConfig+0x2ac>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	691b      	ldr	r3, [r3, #16]
 8003a00:	21f8      	movs	r1, #248	; 0xf8
 8003a02:	61b9      	str	r1, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a04:	69b9      	ldr	r1, [r7, #24]
 8003a06:	fa91 f1a1 	rbit	r1, r1
 8003a0a:	6179      	str	r1, [r7, #20]
  return result;
 8003a0c:	6979      	ldr	r1, [r7, #20]
 8003a0e:	fab1 f181 	clz	r1, r1
 8003a12:	b2c9      	uxtb	r1, r1
 8003a14:	408b      	lsls	r3, r1
 8003a16:	4960      	ldr	r1, [pc, #384]	; (8003b98 <HAL_RCC_OscConfig+0x2ac>)
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a1c:	e044      	b.n	8003aa8 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d02a      	beq.n	8003a7c <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a26:	4b5e      	ldr	r3, [pc, #376]	; (8003ba0 <HAL_RCC_OscConfig+0x2b4>)
 8003a28:	2201      	movs	r2, #1
 8003a2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a2c:	f7fe fc86 	bl	800233c <HAL_GetTick>
 8003a30:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a32:	e008      	b.n	8003a46 <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a34:	f7fe fc82 	bl	800233c <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	6a3b      	ldr	r3, [r7, #32]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d901      	bls.n	8003a46 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e193      	b.n	8003d6e <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a46:	4b54      	ldr	r3, [pc, #336]	; (8003b98 <HAL_RCC_OscConfig+0x2ac>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0302 	and.w	r3, r3, #2
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d0f0      	beq.n	8003a34 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a52:	4b51      	ldr	r3, [pc, #324]	; (8003b98 <HAL_RCC_OscConfig+0x2ac>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	691b      	ldr	r3, [r3, #16]
 8003a5e:	21f8      	movs	r1, #248	; 0xf8
 8003a60:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a62:	6939      	ldr	r1, [r7, #16]
 8003a64:	fa91 f1a1 	rbit	r1, r1
 8003a68:	60f9      	str	r1, [r7, #12]
  return result;
 8003a6a:	68f9      	ldr	r1, [r7, #12]
 8003a6c:	fab1 f181 	clz	r1, r1
 8003a70:	b2c9      	uxtb	r1, r1
 8003a72:	408b      	lsls	r3, r1
 8003a74:	4948      	ldr	r1, [pc, #288]	; (8003b98 <HAL_RCC_OscConfig+0x2ac>)
 8003a76:	4313      	orrs	r3, r2
 8003a78:	600b      	str	r3, [r1, #0]
 8003a7a:	e015      	b.n	8003aa8 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a7c:	4b48      	ldr	r3, [pc, #288]	; (8003ba0 <HAL_RCC_OscConfig+0x2b4>)
 8003a7e:	2200      	movs	r2, #0
 8003a80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a82:	f7fe fc5b 	bl	800233c <HAL_GetTick>
 8003a86:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a88:	e008      	b.n	8003a9c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a8a:	f7fe fc57 	bl	800233c <HAL_GetTick>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	6a3b      	ldr	r3, [r7, #32]
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	2b02      	cmp	r3, #2
 8003a96:	d901      	bls.n	8003a9c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8003a98:	2303      	movs	r3, #3
 8003a9a:	e168      	b.n	8003d6e <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a9c:	4b3e      	ldr	r3, [pc, #248]	; (8003b98 <HAL_RCC_OscConfig+0x2ac>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0302 	and.w	r3, r3, #2
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d1f0      	bne.n	8003a8a <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0308 	and.w	r3, r3, #8
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d030      	beq.n	8003b16 <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	695b      	ldr	r3, [r3, #20]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d016      	beq.n	8003aea <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003abc:	4b39      	ldr	r3, [pc, #228]	; (8003ba4 <HAL_RCC_OscConfig+0x2b8>)
 8003abe:	2201      	movs	r2, #1
 8003ac0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ac2:	f7fe fc3b 	bl	800233c <HAL_GetTick>
 8003ac6:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ac8:	e008      	b.n	8003adc <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003aca:	f7fe fc37 	bl	800233c <HAL_GetTick>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	6a3b      	ldr	r3, [r7, #32]
 8003ad2:	1ad3      	subs	r3, r2, r3
 8003ad4:	2b02      	cmp	r3, #2
 8003ad6:	d901      	bls.n	8003adc <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 8003ad8:	2303      	movs	r3, #3
 8003ada:	e148      	b.n	8003d6e <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003adc:	4b2e      	ldr	r3, [pc, #184]	; (8003b98 <HAL_RCC_OscConfig+0x2ac>)
 8003ade:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ae0:	f003 0302 	and.w	r3, r3, #2
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d0f0      	beq.n	8003aca <HAL_RCC_OscConfig+0x1de>
 8003ae8:	e015      	b.n	8003b16 <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003aea:	4b2e      	ldr	r3, [pc, #184]	; (8003ba4 <HAL_RCC_OscConfig+0x2b8>)
 8003aec:	2200      	movs	r2, #0
 8003aee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003af0:	f7fe fc24 	bl	800233c <HAL_GetTick>
 8003af4:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003af6:	e008      	b.n	8003b0a <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003af8:	f7fe fc20 	bl	800233c <HAL_GetTick>
 8003afc:	4602      	mov	r2, r0
 8003afe:	6a3b      	ldr	r3, [r7, #32]
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	2b02      	cmp	r3, #2
 8003b04:	d901      	bls.n	8003b0a <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e131      	b.n	8003d6e <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b0a:	4b23      	ldr	r3, [pc, #140]	; (8003b98 <HAL_RCC_OscConfig+0x2ac>)
 8003b0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b0e:	f003 0302 	and.w	r3, r3, #2
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d1f0      	bne.n	8003af8 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 0304 	and.w	r3, r3, #4
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	f000 8088 	beq.w	8003c34 <HAL_RCC_OscConfig+0x348>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b24:	2300      	movs	r3, #0
 8003b26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b2a:	4b1b      	ldr	r3, [pc, #108]	; (8003b98 <HAL_RCC_OscConfig+0x2ac>)
 8003b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d110      	bne.n	8003b58 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b36:	2300      	movs	r3, #0
 8003b38:	60bb      	str	r3, [r7, #8]
 8003b3a:	4b17      	ldr	r3, [pc, #92]	; (8003b98 <HAL_RCC_OscConfig+0x2ac>)
 8003b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3e:	4a16      	ldr	r2, [pc, #88]	; (8003b98 <HAL_RCC_OscConfig+0x2ac>)
 8003b40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b44:	6413      	str	r3, [r2, #64]	; 0x40
 8003b46:	4b14      	ldr	r3, [pc, #80]	; (8003b98 <HAL_RCC_OscConfig+0x2ac>)
 8003b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b4e:	60bb      	str	r3, [r7, #8]
 8003b50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b52:	2301      	movs	r3, #1
 8003b54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003b58:	4b13      	ldr	r3, [pc, #76]	; (8003ba8 <HAL_RCC_OscConfig+0x2bc>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a12      	ldr	r2, [pc, #72]	; (8003ba8 <HAL_RCC_OscConfig+0x2bc>)
 8003b5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b62:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b64:	4b10      	ldr	r3, [pc, #64]	; (8003ba8 <HAL_RCC_OscConfig+0x2bc>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d123      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x2cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b70:	4b0d      	ldr	r3, [pc, #52]	; (8003ba8 <HAL_RCC_OscConfig+0x2bc>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a0c      	ldr	r2, [pc, #48]	; (8003ba8 <HAL_RCC_OscConfig+0x2bc>)
 8003b76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b7a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b7c:	f7fe fbde 	bl	800233c <HAL_GetTick>
 8003b80:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b82:	e013      	b.n	8003bac <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b84:	f7fe fbda 	bl	800233c <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	6a3b      	ldr	r3, [r7, #32]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	2b02      	cmp	r3, #2
 8003b90:	d90c      	bls.n	8003bac <HAL_RCC_OscConfig+0x2c0>
        {
          return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e0eb      	b.n	8003d6e <HAL_RCC_OscConfig+0x482>
 8003b96:	bf00      	nop
 8003b98:	40023800 	.word	0x40023800
 8003b9c:	40023802 	.word	0x40023802
 8003ba0:	42470000 	.word	0x42470000
 8003ba4:	42470e80 	.word	0x42470e80
 8003ba8:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bac:	4b72      	ldr	r3, [pc, #456]	; (8003d78 <HAL_RCC_OscConfig+0x48c>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d0e5      	beq.n	8003b84 <HAL_RCC_OscConfig+0x298>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	689a      	ldr	r2, [r3, #8]
 8003bbc:	4b6f      	ldr	r3, [pc, #444]	; (8003d7c <HAL_RCC_OscConfig+0x490>)
 8003bbe:	b2d2      	uxtb	r2, r2
 8003bc0:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d015      	beq.n	8003bf6 <HAL_RCC_OscConfig+0x30a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bca:	f7fe fbb7 	bl	800233c <HAL_GetTick>
 8003bce:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bd0:	e00a      	b.n	8003be8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bd2:	f7fe fbb3 	bl	800233c <HAL_GetTick>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	6a3b      	ldr	r3, [r7, #32]
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d901      	bls.n	8003be8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003be4:	2303      	movs	r3, #3
 8003be6:	e0c2      	b.n	8003d6e <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003be8:	4b65      	ldr	r3, [pc, #404]	; (8003d80 <HAL_RCC_OscConfig+0x494>)
 8003bea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bec:	f003 0302 	and.w	r3, r3, #2
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d0ee      	beq.n	8003bd2 <HAL_RCC_OscConfig+0x2e6>
 8003bf4:	e014      	b.n	8003c20 <HAL_RCC_OscConfig+0x334>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bf6:	f7fe fba1 	bl	800233c <HAL_GetTick>
 8003bfa:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bfc:	e00a      	b.n	8003c14 <HAL_RCC_OscConfig+0x328>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bfe:	f7fe fb9d 	bl	800233c <HAL_GetTick>
 8003c02:	4602      	mov	r2, r0
 8003c04:	6a3b      	ldr	r3, [r7, #32]
 8003c06:	1ad3      	subs	r3, r2, r3
 8003c08:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d901      	bls.n	8003c14 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 8003c10:	2303      	movs	r3, #3
 8003c12:	e0ac      	b.n	8003d6e <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c14:	4b5a      	ldr	r3, [pc, #360]	; (8003d80 <HAL_RCC_OscConfig+0x494>)
 8003c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c18:	f003 0302 	and.w	r3, r3, #2
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d1ee      	bne.n	8003bfe <HAL_RCC_OscConfig+0x312>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d105      	bne.n	8003c34 <HAL_RCC_OscConfig+0x348>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c28:	4b55      	ldr	r3, [pc, #340]	; (8003d80 <HAL_RCC_OscConfig+0x494>)
 8003c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2c:	4a54      	ldr	r2, [pc, #336]	; (8003d80 <HAL_RCC_OscConfig+0x494>)
 8003c2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c32:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	699b      	ldr	r3, [r3, #24]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	f000 8097 	beq.w	8003d6c <HAL_RCC_OscConfig+0x480>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c3e:	4b50      	ldr	r3, [pc, #320]	; (8003d80 <HAL_RCC_OscConfig+0x494>)
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	f003 030c 	and.w	r3, r3, #12
 8003c46:	2b08      	cmp	r3, #8
 8003c48:	d061      	beq.n	8003d0e <HAL_RCC_OscConfig+0x422>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	699b      	ldr	r3, [r3, #24]
 8003c4e:	2b02      	cmp	r3, #2
 8003c50:	d146      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x3f4>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c52:	4b4c      	ldr	r3, [pc, #304]	; (8003d84 <HAL_RCC_OscConfig+0x498>)
 8003c54:	2200      	movs	r2, #0
 8003c56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c58:	f7fe fb70 	bl	800233c <HAL_GetTick>
 8003c5c:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c5e:	e008      	b.n	8003c72 <HAL_RCC_OscConfig+0x386>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c60:	f7fe fb6c 	bl	800233c <HAL_GetTick>
 8003c64:	4602      	mov	r2, r0
 8003c66:	6a3b      	ldr	r3, [r7, #32]
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	2b64      	cmp	r3, #100	; 0x64
 8003c6c:	d901      	bls.n	8003c72 <HAL_RCC_OscConfig+0x386>
          {
            return HAL_TIMEOUT;
 8003c6e:	2303      	movs	r3, #3
 8003c70:	e07d      	b.n	8003d6e <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c72:	4b43      	ldr	r3, [pc, #268]	; (8003d80 <HAL_RCC_OscConfig+0x494>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d1f0      	bne.n	8003c60 <HAL_RCC_OscConfig+0x374>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c7e:	4b40      	ldr	r3, [pc, #256]	; (8003d80 <HAL_RCC_OscConfig+0x494>)
 8003c80:	685a      	ldr	r2, [r3, #4]
 8003c82:	4b41      	ldr	r3, [pc, #260]	; (8003d88 <HAL_RCC_OscConfig+0x49c>)
 8003c84:	4013      	ands	r3, r2
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	69d1      	ldr	r1, [r2, #28]
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	6a12      	ldr	r2, [r2, #32]
 8003c8e:	4311      	orrs	r1, r2
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c94:	0192      	lsls	r2, r2, #6
 8003c96:	4311      	orrs	r1, r2
 8003c98:	687a      	ldr	r2, [r7, #4]
 8003c9a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003c9c:	0612      	lsls	r2, r2, #24
 8003c9e:	4311      	orrs	r1, r2
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003ca4:	0852      	lsrs	r2, r2, #1
 8003ca6:	3a01      	subs	r2, #1
 8003ca8:	0412      	lsls	r2, r2, #16
 8003caa:	430a      	orrs	r2, r1
 8003cac:	4934      	ldr	r1, [pc, #208]	; (8003d80 <HAL_RCC_OscConfig+0x494>)
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cb2:	4b34      	ldr	r3, [pc, #208]	; (8003d84 <HAL_RCC_OscConfig+0x498>)
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cb8:	f7fe fb40 	bl	800233c <HAL_GetTick>
 8003cbc:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cbe:	e008      	b.n	8003cd2 <HAL_RCC_OscConfig+0x3e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cc0:	f7fe fb3c 	bl	800233c <HAL_GetTick>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	6a3b      	ldr	r3, [r7, #32]
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	2b64      	cmp	r3, #100	; 0x64
 8003ccc:	d901      	bls.n	8003cd2 <HAL_RCC_OscConfig+0x3e6>
          {
            return HAL_TIMEOUT;
 8003cce:	2303      	movs	r3, #3
 8003cd0:	e04d      	b.n	8003d6e <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cd2:	4b2b      	ldr	r3, [pc, #172]	; (8003d80 <HAL_RCC_OscConfig+0x494>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d0f0      	beq.n	8003cc0 <HAL_RCC_OscConfig+0x3d4>
 8003cde:	e045      	b.n	8003d6c <HAL_RCC_OscConfig+0x480>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ce0:	4b28      	ldr	r3, [pc, #160]	; (8003d84 <HAL_RCC_OscConfig+0x498>)
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ce6:	f7fe fb29 	bl	800233c <HAL_GetTick>
 8003cea:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cec:	e008      	b.n	8003d00 <HAL_RCC_OscConfig+0x414>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cee:	f7fe fb25 	bl	800233c <HAL_GetTick>
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	6a3b      	ldr	r3, [r7, #32]
 8003cf6:	1ad3      	subs	r3, r2, r3
 8003cf8:	2b64      	cmp	r3, #100	; 0x64
 8003cfa:	d901      	bls.n	8003d00 <HAL_RCC_OscConfig+0x414>
          {
            return HAL_TIMEOUT;
 8003cfc:	2303      	movs	r3, #3
 8003cfe:	e036      	b.n	8003d6e <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d00:	4b1f      	ldr	r3, [pc, #124]	; (8003d80 <HAL_RCC_OscConfig+0x494>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d1f0      	bne.n	8003cee <HAL_RCC_OscConfig+0x402>
 8003d0c:	e02e      	b.n	8003d6c <HAL_RCC_OscConfig+0x480>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	699b      	ldr	r3, [r3, #24]
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d101      	bne.n	8003d1a <HAL_RCC_OscConfig+0x42e>
      {
        return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e029      	b.n	8003d6e <HAL_RCC_OscConfig+0x482>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8003d1a:	4b19      	ldr	r3, [pc, #100]	; (8003d80 <HAL_RCC_OscConfig+0x494>)
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	69db      	ldr	r3, [r3, #28]
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d11c      	bne.n	8003d68 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d2e:	69fb      	ldr	r3, [r7, #28]
 8003d30:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d115      	bne.n	8003d68 <HAL_RCC_OscConfig+0x47c>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	099b      	lsrs	r3, r3, #6
 8003d40:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d10d      	bne.n	8003d68 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003d4c:	69fb      	ldr	r3, [r7, #28]
 8003d4e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d106      	bne.n	8003d68 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d001      	beq.n	8003d6c <HAL_RCC_OscConfig+0x480>
        {
          return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e000      	b.n	8003d6e <HAL_RCC_OscConfig+0x482>
        }
      }
    }
  }
  return HAL_OK;
 8003d6c:	2300      	movs	r3, #0
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3728      	adds	r7, #40	; 0x28
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	40007000 	.word	0x40007000
 8003d7c:	40023870 	.word	0x40023870
 8003d80:	40023800 	.word	0x40023800
 8003d84:	42470060 	.word	0x42470060
 8003d88:	f0bc8000 	.word	0xf0bc8000

08003d8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b086      	sub	sp, #24
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d101      	bne.n	8003da0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e0d2      	b.n	8003f46 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003da0:	4b6b      	ldr	r3, [pc, #428]	; (8003f50 <HAL_RCC_ClockConfig+0x1c4>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 030f 	and.w	r3, r3, #15
 8003da8:	683a      	ldr	r2, [r7, #0]
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d90c      	bls.n	8003dc8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dae:	4b68      	ldr	r3, [pc, #416]	; (8003f50 <HAL_RCC_ClockConfig+0x1c4>)
 8003db0:	683a      	ldr	r2, [r7, #0]
 8003db2:	b2d2      	uxtb	r2, r2
 8003db4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003db6:	4b66      	ldr	r3, [pc, #408]	; (8003f50 <HAL_RCC_ClockConfig+0x1c4>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 030f 	and.w	r3, r3, #15
 8003dbe:	683a      	ldr	r2, [r7, #0]
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d001      	beq.n	8003dc8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e0be      	b.n	8003f46 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 0302 	and.w	r3, r3, #2
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d020      	beq.n	8003e16 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 0304 	and.w	r3, r3, #4
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d005      	beq.n	8003dec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003de0:	4b5c      	ldr	r3, [pc, #368]	; (8003f54 <HAL_RCC_ClockConfig+0x1c8>)
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	4a5b      	ldr	r2, [pc, #364]	; (8003f54 <HAL_RCC_ClockConfig+0x1c8>)
 8003de6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003dea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 0308 	and.w	r3, r3, #8
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d005      	beq.n	8003e04 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8003df8:	4b56      	ldr	r3, [pc, #344]	; (8003f54 <HAL_RCC_ClockConfig+0x1c8>)
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	4a55      	ldr	r2, [pc, #340]	; (8003f54 <HAL_RCC_ClockConfig+0x1c8>)
 8003dfe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e02:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e04:	4b53      	ldr	r3, [pc, #332]	; (8003f54 <HAL_RCC_ClockConfig+0x1c8>)
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	4950      	ldr	r1, [pc, #320]	; (8003f54 <HAL_RCC_ClockConfig+0x1c8>)
 8003e12:	4313      	orrs	r3, r2
 8003e14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0301 	and.w	r3, r3, #1
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d040      	beq.n	8003ea4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d107      	bne.n	8003e3a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e2a:	4b4a      	ldr	r3, [pc, #296]	; (8003f54 <HAL_RCC_ClockConfig+0x1c8>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d115      	bne.n	8003e62 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e085      	b.n	8003f46 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	2b02      	cmp	r3, #2
 8003e40:	d107      	bne.n	8003e52 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e42:	4b44      	ldr	r3, [pc, #272]	; (8003f54 <HAL_RCC_ClockConfig+0x1c8>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d109      	bne.n	8003e62 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e079      	b.n	8003f46 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e52:	4b40      	ldr	r3, [pc, #256]	; (8003f54 <HAL_RCC_ClockConfig+0x1c8>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 0302 	and.w	r3, r3, #2
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d101      	bne.n	8003e62 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e071      	b.n	8003f46 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e62:	4b3c      	ldr	r3, [pc, #240]	; (8003f54 <HAL_RCC_ClockConfig+0x1c8>)
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	f023 0203 	bic.w	r2, r3, #3
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	4939      	ldr	r1, [pc, #228]	; (8003f54 <HAL_RCC_ClockConfig+0x1c8>)
 8003e70:	4313      	orrs	r3, r2
 8003e72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e74:	f7fe fa62 	bl	800233c <HAL_GetTick>
 8003e78:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e7a:	e00a      	b.n	8003e92 <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e7c:	f7fe fa5e 	bl	800233c <HAL_GetTick>
 8003e80:	4602      	mov	r2, r0
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d901      	bls.n	8003e92 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	e059      	b.n	8003f46 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e92:	4b30      	ldr	r3, [pc, #192]	; (8003f54 <HAL_RCC_ClockConfig+0x1c8>)
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	f003 020c 	and.w	r2, r3, #12
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d1eb      	bne.n	8003e7c <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ea4:	4b2a      	ldr	r3, [pc, #168]	; (8003f50 <HAL_RCC_ClockConfig+0x1c4>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 030f 	and.w	r3, r3, #15
 8003eac:	683a      	ldr	r2, [r7, #0]
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d20c      	bcs.n	8003ecc <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eb2:	4b27      	ldr	r3, [pc, #156]	; (8003f50 <HAL_RCC_ClockConfig+0x1c4>)
 8003eb4:	683a      	ldr	r2, [r7, #0]
 8003eb6:	b2d2      	uxtb	r2, r2
 8003eb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eba:	4b25      	ldr	r3, [pc, #148]	; (8003f50 <HAL_RCC_ClockConfig+0x1c4>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 030f 	and.w	r3, r3, #15
 8003ec2:	683a      	ldr	r2, [r7, #0]
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d001      	beq.n	8003ecc <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e03c      	b.n	8003f46 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0304 	and.w	r3, r3, #4
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d008      	beq.n	8003eea <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ed8:	4b1e      	ldr	r3, [pc, #120]	; (8003f54 <HAL_RCC_ClockConfig+0x1c8>)
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	491b      	ldr	r1, [pc, #108]	; (8003f54 <HAL_RCC_ClockConfig+0x1c8>)
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0308 	and.w	r3, r3, #8
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d009      	beq.n	8003f0a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ef6:	4b17      	ldr	r3, [pc, #92]	; (8003f54 <HAL_RCC_ClockConfig+0x1c8>)
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	691b      	ldr	r3, [r3, #16]
 8003f02:	00db      	lsls	r3, r3, #3
 8003f04:	4913      	ldr	r1, [pc, #76]	; (8003f54 <HAL_RCC_ClockConfig+0x1c8>)
 8003f06:	4313      	orrs	r3, r2
 8003f08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8003f0a:	f000 f82b 	bl	8003f64 <HAL_RCC_GetSysClockFreq>
 8003f0e:	4601      	mov	r1, r0
 8003f10:	4b10      	ldr	r3, [pc, #64]	; (8003f54 <HAL_RCC_ClockConfig+0x1c8>)
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f18:	22f0      	movs	r2, #240	; 0xf0
 8003f1a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f1c:	693a      	ldr	r2, [r7, #16]
 8003f1e:	fa92 f2a2 	rbit	r2, r2
 8003f22:	60fa      	str	r2, [r7, #12]
  return result;
 8003f24:	68fa      	ldr	r2, [r7, #12]
 8003f26:	fab2 f282 	clz	r2, r2
 8003f2a:	b2d2      	uxtb	r2, r2
 8003f2c:	40d3      	lsrs	r3, r2
 8003f2e:	4a0a      	ldr	r2, [pc, #40]	; (8003f58 <HAL_RCC_ClockConfig+0x1cc>)
 8003f30:	5cd3      	ldrb	r3, [r2, r3]
 8003f32:	fa21 f303 	lsr.w	r3, r1, r3
 8003f36:	4a09      	ldr	r2, [pc, #36]	; (8003f5c <HAL_RCC_ClockConfig+0x1d0>)
 8003f38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003f3a:	4b09      	ldr	r3, [pc, #36]	; (8003f60 <HAL_RCC_ClockConfig+0x1d4>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f7fe f9ba 	bl	80022b8 <HAL_InitTick>

  return HAL_OK;
 8003f44:	2300      	movs	r3, #0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3718      	adds	r7, #24
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	40023c00 	.word	0x40023c00
 8003f54:	40023800 	.word	0x40023800
 8003f58:	08004fb4 	.word	0x08004fb4
 8003f5c:	20000010 	.word	0x20000010
 8003f60:	20000014 	.word	0x20000014

08003f64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f64:	b5b0      	push	{r4, r5, r7, lr}
 8003f66:	b084      	sub	sp, #16
 8003f68:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003f6a:	2100      	movs	r1, #0
 8003f6c:	6079      	str	r1, [r7, #4]
 8003f6e:	2100      	movs	r1, #0
 8003f70:	60f9      	str	r1, [r7, #12]
 8003f72:	2100      	movs	r1, #0
 8003f74:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003f76:	2100      	movs	r1, #0
 8003f78:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f7a:	4952      	ldr	r1, [pc, #328]	; (80040c4 <HAL_RCC_GetSysClockFreq+0x160>)
 8003f7c:	6889      	ldr	r1, [r1, #8]
 8003f7e:	f001 010c 	and.w	r1, r1, #12
 8003f82:	2908      	cmp	r1, #8
 8003f84:	d00d      	beq.n	8003fa2 <HAL_RCC_GetSysClockFreq+0x3e>
 8003f86:	2908      	cmp	r1, #8
 8003f88:	f200 8094 	bhi.w	80040b4 <HAL_RCC_GetSysClockFreq+0x150>
 8003f8c:	2900      	cmp	r1, #0
 8003f8e:	d002      	beq.n	8003f96 <HAL_RCC_GetSysClockFreq+0x32>
 8003f90:	2904      	cmp	r1, #4
 8003f92:	d003      	beq.n	8003f9c <HAL_RCC_GetSysClockFreq+0x38>
 8003f94:	e08e      	b.n	80040b4 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f96:	4b4c      	ldr	r3, [pc, #304]	; (80040c8 <HAL_RCC_GetSysClockFreq+0x164>)
 8003f98:	60bb      	str	r3, [r7, #8]
       break;
 8003f9a:	e08e      	b.n	80040ba <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f9c:	4b4b      	ldr	r3, [pc, #300]	; (80040cc <HAL_RCC_GetSysClockFreq+0x168>)
 8003f9e:	60bb      	str	r3, [r7, #8]
      break;
 8003fa0:	e08b      	b.n	80040ba <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003fa2:	4948      	ldr	r1, [pc, #288]	; (80040c4 <HAL_RCC_GetSysClockFreq+0x160>)
 8003fa4:	6849      	ldr	r1, [r1, #4]
 8003fa6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003faa:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003fac:	4945      	ldr	r1, [pc, #276]	; (80040c4 <HAL_RCC_GetSysClockFreq+0x160>)
 8003fae:	6849      	ldr	r1, [r1, #4]
 8003fb0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003fb4:	2900      	cmp	r1, #0
 8003fb6:	d024      	beq.n	8004002 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fb8:	4942      	ldr	r1, [pc, #264]	; (80040c4 <HAL_RCC_GetSysClockFreq+0x160>)
 8003fba:	6849      	ldr	r1, [r1, #4]
 8003fbc:	0989      	lsrs	r1, r1, #6
 8003fbe:	4608      	mov	r0, r1
 8003fc0:	f04f 0100 	mov.w	r1, #0
 8003fc4:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003fc8:	f04f 0500 	mov.w	r5, #0
 8003fcc:	ea00 0204 	and.w	r2, r0, r4
 8003fd0:	ea01 0305 	and.w	r3, r1, r5
 8003fd4:	493d      	ldr	r1, [pc, #244]	; (80040cc <HAL_RCC_GetSysClockFreq+0x168>)
 8003fd6:	fb01 f003 	mul.w	r0, r1, r3
 8003fda:	2100      	movs	r1, #0
 8003fdc:	fb01 f102 	mul.w	r1, r1, r2
 8003fe0:	1844      	adds	r4, r0, r1
 8003fe2:	493a      	ldr	r1, [pc, #232]	; (80040cc <HAL_RCC_GetSysClockFreq+0x168>)
 8003fe4:	fba2 0101 	umull	r0, r1, r2, r1
 8003fe8:	1863      	adds	r3, r4, r1
 8003fea:	4619      	mov	r1, r3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	461a      	mov	r2, r3
 8003ff0:	f04f 0300 	mov.w	r3, #0
 8003ff4:	f7fc fdd4 	bl	8000ba0 <__aeabi_uldivmod>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	460b      	mov	r3, r1
 8003ffc:	4613      	mov	r3, r2
 8003ffe:	60fb      	str	r3, [r7, #12]
 8004000:	e04a      	b.n	8004098 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004002:	4b30      	ldr	r3, [pc, #192]	; (80040c4 <HAL_RCC_GetSysClockFreq+0x160>)
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	099b      	lsrs	r3, r3, #6
 8004008:	461a      	mov	r2, r3
 800400a:	f04f 0300 	mov.w	r3, #0
 800400e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004012:	f04f 0100 	mov.w	r1, #0
 8004016:	ea02 0400 	and.w	r4, r2, r0
 800401a:	ea03 0501 	and.w	r5, r3, r1
 800401e:	4620      	mov	r0, r4
 8004020:	4629      	mov	r1, r5
 8004022:	f04f 0200 	mov.w	r2, #0
 8004026:	f04f 0300 	mov.w	r3, #0
 800402a:	014b      	lsls	r3, r1, #5
 800402c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004030:	0142      	lsls	r2, r0, #5
 8004032:	4610      	mov	r0, r2
 8004034:	4619      	mov	r1, r3
 8004036:	1b00      	subs	r0, r0, r4
 8004038:	eb61 0105 	sbc.w	r1, r1, r5
 800403c:	f04f 0200 	mov.w	r2, #0
 8004040:	f04f 0300 	mov.w	r3, #0
 8004044:	018b      	lsls	r3, r1, #6
 8004046:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800404a:	0182      	lsls	r2, r0, #6
 800404c:	1a12      	subs	r2, r2, r0
 800404e:	eb63 0301 	sbc.w	r3, r3, r1
 8004052:	f04f 0000 	mov.w	r0, #0
 8004056:	f04f 0100 	mov.w	r1, #0
 800405a:	00d9      	lsls	r1, r3, #3
 800405c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004060:	00d0      	lsls	r0, r2, #3
 8004062:	4602      	mov	r2, r0
 8004064:	460b      	mov	r3, r1
 8004066:	1912      	adds	r2, r2, r4
 8004068:	eb45 0303 	adc.w	r3, r5, r3
 800406c:	f04f 0000 	mov.w	r0, #0
 8004070:	f04f 0100 	mov.w	r1, #0
 8004074:	0299      	lsls	r1, r3, #10
 8004076:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800407a:	0290      	lsls	r0, r2, #10
 800407c:	4602      	mov	r2, r0
 800407e:	460b      	mov	r3, r1
 8004080:	4610      	mov	r0, r2
 8004082:	4619      	mov	r1, r3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	461a      	mov	r2, r3
 8004088:	f04f 0300 	mov.w	r3, #0
 800408c:	f7fc fd88 	bl	8000ba0 <__aeabi_uldivmod>
 8004090:	4602      	mov	r2, r0
 8004092:	460b      	mov	r3, r1
 8004094:	4613      	mov	r3, r2
 8004096:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004098:	4b0a      	ldr	r3, [pc, #40]	; (80040c4 <HAL_RCC_GetSysClockFreq+0x160>)
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	0c1b      	lsrs	r3, r3, #16
 800409e:	f003 0303 	and.w	r3, r3, #3
 80040a2:	3301      	adds	r3, #1
 80040a4:	005b      	lsls	r3, r3, #1
 80040a6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80040a8:	68fa      	ldr	r2, [r7, #12]
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80040b0:	60bb      	str	r3, [r7, #8]
      break;
 80040b2:	e002      	b.n	80040ba <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80040b4:	4b04      	ldr	r3, [pc, #16]	; (80040c8 <HAL_RCC_GetSysClockFreq+0x164>)
 80040b6:	60bb      	str	r3, [r7, #8]
      break;
 80040b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040ba:	68bb      	ldr	r3, [r7, #8]
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3710      	adds	r7, #16
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bdb0      	pop	{r4, r5, r7, pc}
 80040c4:	40023800 	.word	0x40023800
 80040c8:	00f42400 	.word	0x00f42400
 80040cc:	017d7840 	.word	0x017d7840

080040d0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b082      	sub	sp, #8
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d101      	bne.n	80040e2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e041      	b.n	8004166 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d106      	bne.n	80040fc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2200      	movs	r2, #0
 80040f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f7fd ffb0 	bl	800205c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2202      	movs	r2, #2
 8004100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	3304      	adds	r3, #4
 800410c:	4619      	mov	r1, r3
 800410e:	4610      	mov	r0, r2
 8004110:	f000 fc1e 	bl	8004950 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2201      	movs	r2, #1
 8004120:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2201      	movs	r2, #1
 8004128:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2201      	movs	r2, #1
 8004130:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2201      	movs	r2, #1
 8004148:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2201      	movs	r2, #1
 8004160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004164:	2300      	movs	r3, #0
}
 8004166:	4618      	mov	r0, r3
 8004168:	3708      	adds	r7, #8
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
	...

08004170 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b084      	sub	sp, #16
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d109      	bne.n	8004194 <HAL_TIM_PWM_Start+0x24>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004186:	b2db      	uxtb	r3, r3
 8004188:	2b01      	cmp	r3, #1
 800418a:	bf14      	ite	ne
 800418c:	2301      	movne	r3, #1
 800418e:	2300      	moveq	r3, #0
 8004190:	b2db      	uxtb	r3, r3
 8004192:	e022      	b.n	80041da <HAL_TIM_PWM_Start+0x6a>
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	2b04      	cmp	r3, #4
 8004198:	d109      	bne.n	80041ae <HAL_TIM_PWM_Start+0x3e>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	bf14      	ite	ne
 80041a6:	2301      	movne	r3, #1
 80041a8:	2300      	moveq	r3, #0
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	e015      	b.n	80041da <HAL_TIM_PWM_Start+0x6a>
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	2b08      	cmp	r3, #8
 80041b2:	d109      	bne.n	80041c8 <HAL_TIM_PWM_Start+0x58>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	2b01      	cmp	r3, #1
 80041be:	bf14      	ite	ne
 80041c0:	2301      	movne	r3, #1
 80041c2:	2300      	moveq	r3, #0
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	e008      	b.n	80041da <HAL_TIM_PWM_Start+0x6a>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	bf14      	ite	ne
 80041d4:	2301      	movne	r3, #1
 80041d6:	2300      	moveq	r3, #0
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d001      	beq.n	80041e2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e07c      	b.n	80042dc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d104      	bne.n	80041f2 <HAL_TIM_PWM_Start+0x82>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2202      	movs	r2, #2
 80041ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041f0:	e013      	b.n	800421a <HAL_TIM_PWM_Start+0xaa>
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	2b04      	cmp	r3, #4
 80041f6:	d104      	bne.n	8004202 <HAL_TIM_PWM_Start+0x92>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2202      	movs	r2, #2
 80041fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004200:	e00b      	b.n	800421a <HAL_TIM_PWM_Start+0xaa>
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	2b08      	cmp	r3, #8
 8004206:	d104      	bne.n	8004212 <HAL_TIM_PWM_Start+0xa2>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2202      	movs	r2, #2
 800420c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004210:	e003      	b.n	800421a <HAL_TIM_PWM_Start+0xaa>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2202      	movs	r2, #2
 8004216:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	2201      	movs	r2, #1
 8004220:	6839      	ldr	r1, [r7, #0]
 8004222:	4618      	mov	r0, r3
 8004224:	f000 fdde 	bl	8004de4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a2d      	ldr	r2, [pc, #180]	; (80042e4 <HAL_TIM_PWM_Start+0x174>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d004      	beq.n	800423c <HAL_TIM_PWM_Start+0xcc>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a2c      	ldr	r2, [pc, #176]	; (80042e8 <HAL_TIM_PWM_Start+0x178>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d101      	bne.n	8004240 <HAL_TIM_PWM_Start+0xd0>
 800423c:	2301      	movs	r3, #1
 800423e:	e000      	b.n	8004242 <HAL_TIM_PWM_Start+0xd2>
 8004240:	2300      	movs	r3, #0
 8004242:	2b00      	cmp	r3, #0
 8004244:	d007      	beq.n	8004256 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004254:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a22      	ldr	r2, [pc, #136]	; (80042e4 <HAL_TIM_PWM_Start+0x174>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d022      	beq.n	80042a6 <HAL_TIM_PWM_Start+0x136>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004268:	d01d      	beq.n	80042a6 <HAL_TIM_PWM_Start+0x136>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a1f      	ldr	r2, [pc, #124]	; (80042ec <HAL_TIM_PWM_Start+0x17c>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d018      	beq.n	80042a6 <HAL_TIM_PWM_Start+0x136>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a1d      	ldr	r2, [pc, #116]	; (80042f0 <HAL_TIM_PWM_Start+0x180>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d013      	beq.n	80042a6 <HAL_TIM_PWM_Start+0x136>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a1c      	ldr	r2, [pc, #112]	; (80042f4 <HAL_TIM_PWM_Start+0x184>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d00e      	beq.n	80042a6 <HAL_TIM_PWM_Start+0x136>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a16      	ldr	r2, [pc, #88]	; (80042e8 <HAL_TIM_PWM_Start+0x178>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d009      	beq.n	80042a6 <HAL_TIM_PWM_Start+0x136>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a18      	ldr	r2, [pc, #96]	; (80042f8 <HAL_TIM_PWM_Start+0x188>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d004      	beq.n	80042a6 <HAL_TIM_PWM_Start+0x136>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a16      	ldr	r2, [pc, #88]	; (80042fc <HAL_TIM_PWM_Start+0x18c>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d111      	bne.n	80042ca <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	f003 0307 	and.w	r3, r3, #7
 80042b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2b06      	cmp	r3, #6
 80042b6:	d010      	beq.n	80042da <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f042 0201 	orr.w	r2, r2, #1
 80042c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042c8:	e007      	b.n	80042da <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f042 0201 	orr.w	r2, r2, #1
 80042d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80042da:	2300      	movs	r3, #0
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3710      	adds	r7, #16
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}
 80042e4:	40010000 	.word	0x40010000
 80042e8:	40010400 	.word	0x40010400
 80042ec:	40000400 	.word	0x40000400
 80042f0:	40000800 	.word	0x40000800
 80042f4:	40000c00 	.word	0x40000c00
 80042f8:	40014000 	.word	0x40014000
 80042fc:	40001800 	.word	0x40001800

08004300 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b086      	sub	sp, #24
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d101      	bne.n	8004314 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	e097      	b.n	8004444 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800431a:	b2db      	uxtb	r3, r3
 800431c:	2b00      	cmp	r3, #0
 800431e:	d106      	bne.n	800432e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f7fd fdfd 	bl	8001f28 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2202      	movs	r2, #2
 8004332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	6812      	ldr	r2, [r2, #0]
 8004340:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004344:	f023 0307 	bic.w	r3, r3, #7
 8004348:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	3304      	adds	r3, #4
 8004352:	4619      	mov	r1, r3
 8004354:	4610      	mov	r0, r2
 8004356:	f000 fafb 	bl	8004950 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	699b      	ldr	r3, [r3, #24]
 8004368:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	6a1b      	ldr	r3, [r3, #32]
 8004370:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	697a      	ldr	r2, [r7, #20]
 8004378:	4313      	orrs	r3, r2
 800437a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004382:	f023 0303 	bic.w	r3, r3, #3
 8004386:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	689a      	ldr	r2, [r3, #8]
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	699b      	ldr	r3, [r3, #24]
 8004390:	021b      	lsls	r3, r3, #8
 8004392:	4313      	orrs	r3, r2
 8004394:	693a      	ldr	r2, [r7, #16]
 8004396:	4313      	orrs	r3, r2
 8004398:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80043a0:	f023 030c 	bic.w	r3, r3, #12
 80043a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80043ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	68da      	ldr	r2, [r3, #12]
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	69db      	ldr	r3, [r3, #28]
 80043ba:	021b      	lsls	r3, r3, #8
 80043bc:	4313      	orrs	r3, r2
 80043be:	693a      	ldr	r2, [r7, #16]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	691b      	ldr	r3, [r3, #16]
 80043c8:	011a      	lsls	r2, r3, #4
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	6a1b      	ldr	r3, [r3, #32]
 80043ce:	031b      	lsls	r3, r3, #12
 80043d0:	4313      	orrs	r3, r2
 80043d2:	693a      	ldr	r2, [r7, #16]
 80043d4:	4313      	orrs	r3, r2
 80043d6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80043de:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80043e6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	685a      	ldr	r2, [r3, #4]
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	695b      	ldr	r3, [r3, #20]
 80043f0:	011b      	lsls	r3, r3, #4
 80043f2:	4313      	orrs	r3, r2
 80043f4:	68fa      	ldr	r2, [r7, #12]
 80043f6:	4313      	orrs	r3, r2
 80043f8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	697a      	ldr	r2, [r7, #20]
 8004400:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	693a      	ldr	r2, [r7, #16]
 8004408:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	68fa      	ldr	r2, [r7, #12]
 8004410:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2201      	movs	r2, #1
 8004416:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2201      	movs	r2, #1
 800441e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2201      	movs	r2, #1
 8004426:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2201      	movs	r2, #1
 800442e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2201      	movs	r2, #1
 8004436:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2201      	movs	r2, #1
 800443e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004442:	2300      	movs	r3, #0
}
 8004444:	4618      	mov	r0, r3
 8004446:	3718      	adds	r7, #24
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}

0800444c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b084      	sub	sp, #16
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800445c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004464:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800446c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004474:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d110      	bne.n	800449e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800447c:	7bfb      	ldrb	r3, [r7, #15]
 800447e:	2b01      	cmp	r3, #1
 8004480:	d102      	bne.n	8004488 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004482:	7b7b      	ldrb	r3, [r7, #13]
 8004484:	2b01      	cmp	r3, #1
 8004486:	d001      	beq.n	800448c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	e069      	b.n	8004560 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2202      	movs	r2, #2
 8004490:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2202      	movs	r2, #2
 8004498:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800449c:	e031      	b.n	8004502 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	2b04      	cmp	r3, #4
 80044a2:	d110      	bne.n	80044c6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80044a4:	7bbb      	ldrb	r3, [r7, #14]
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	d102      	bne.n	80044b0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80044aa:	7b3b      	ldrb	r3, [r7, #12]
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d001      	beq.n	80044b4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	e055      	b.n	8004560 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2202      	movs	r2, #2
 80044b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2202      	movs	r2, #2
 80044c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80044c4:	e01d      	b.n	8004502 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80044c6:	7bfb      	ldrb	r3, [r7, #15]
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d108      	bne.n	80044de <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80044cc:	7bbb      	ldrb	r3, [r7, #14]
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d105      	bne.n	80044de <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80044d2:	7b7b      	ldrb	r3, [r7, #13]
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d102      	bne.n	80044de <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80044d8:	7b3b      	ldrb	r3, [r7, #12]
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d001      	beq.n	80044e2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e03e      	b.n	8004560 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2202      	movs	r2, #2
 80044e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2202      	movs	r2, #2
 80044ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2202      	movs	r2, #2
 80044f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2202      	movs	r2, #2
 80044fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d003      	beq.n	8004510 <HAL_TIM_Encoder_Start+0xc4>
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	2b04      	cmp	r3, #4
 800450c:	d008      	beq.n	8004520 <HAL_TIM_Encoder_Start+0xd4>
 800450e:	e00f      	b.n	8004530 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	2201      	movs	r2, #1
 8004516:	2100      	movs	r1, #0
 8004518:	4618      	mov	r0, r3
 800451a:	f000 fc63 	bl	8004de4 <TIM_CCxChannelCmd>
      break;
 800451e:	e016      	b.n	800454e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	2201      	movs	r2, #1
 8004526:	2104      	movs	r1, #4
 8004528:	4618      	mov	r0, r3
 800452a:	f000 fc5b 	bl	8004de4 <TIM_CCxChannelCmd>
      break;
 800452e:	e00e      	b.n	800454e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	2201      	movs	r2, #1
 8004536:	2100      	movs	r1, #0
 8004538:	4618      	mov	r0, r3
 800453a:	f000 fc53 	bl	8004de4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	2201      	movs	r2, #1
 8004544:	2104      	movs	r1, #4
 8004546:	4618      	mov	r0, r3
 8004548:	f000 fc4c 	bl	8004de4 <TIM_CCxChannelCmd>
      break;
 800454c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f042 0201 	orr.w	r2, r2, #1
 800455c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800455e:	2300      	movs	r3, #0
}
 8004560:	4618      	mov	r0, r3
 8004562:	3710      	adds	r7, #16
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}

08004568 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b082      	sub	sp, #8
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	691b      	ldr	r3, [r3, #16]
 8004576:	f003 0302 	and.w	r3, r3, #2
 800457a:	2b02      	cmp	r3, #2
 800457c:	d122      	bne.n	80045c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	f003 0302 	and.w	r3, r3, #2
 8004588:	2b02      	cmp	r3, #2
 800458a:	d11b      	bne.n	80045c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f06f 0202 	mvn.w	r2, #2
 8004594:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2201      	movs	r2, #1
 800459a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	699b      	ldr	r3, [r3, #24]
 80045a2:	f003 0303 	and.w	r3, r3, #3
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d003      	beq.n	80045b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 f9b4 	bl	8004918 <HAL_TIM_IC_CaptureCallback>
 80045b0:	e005      	b.n	80045be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f000 f9a7 	bl	8004906 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	f000 f9b6 	bl	800492a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	691b      	ldr	r3, [r3, #16]
 80045ca:	f003 0304 	and.w	r3, r3, #4
 80045ce:	2b04      	cmp	r3, #4
 80045d0:	d122      	bne.n	8004618 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	68db      	ldr	r3, [r3, #12]
 80045d8:	f003 0304 	and.w	r3, r3, #4
 80045dc:	2b04      	cmp	r3, #4
 80045de:	d11b      	bne.n	8004618 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f06f 0204 	mvn.w	r2, #4
 80045e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2202      	movs	r2, #2
 80045ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	699b      	ldr	r3, [r3, #24]
 80045f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d003      	beq.n	8004606 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f000 f98a 	bl	8004918 <HAL_TIM_IC_CaptureCallback>
 8004604:	e005      	b.n	8004612 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f000 f97d 	bl	8004906 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	f000 f98c 	bl	800492a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	691b      	ldr	r3, [r3, #16]
 800461e:	f003 0308 	and.w	r3, r3, #8
 8004622:	2b08      	cmp	r3, #8
 8004624:	d122      	bne.n	800466c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	f003 0308 	and.w	r3, r3, #8
 8004630:	2b08      	cmp	r3, #8
 8004632:	d11b      	bne.n	800466c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f06f 0208 	mvn.w	r2, #8
 800463c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2204      	movs	r2, #4
 8004642:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	69db      	ldr	r3, [r3, #28]
 800464a:	f003 0303 	and.w	r3, r3, #3
 800464e:	2b00      	cmp	r3, #0
 8004650:	d003      	beq.n	800465a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f000 f960 	bl	8004918 <HAL_TIM_IC_CaptureCallback>
 8004658:	e005      	b.n	8004666 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f000 f953 	bl	8004906 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	f000 f962 	bl	800492a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	691b      	ldr	r3, [r3, #16]
 8004672:	f003 0310 	and.w	r3, r3, #16
 8004676:	2b10      	cmp	r3, #16
 8004678:	d122      	bne.n	80046c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	f003 0310 	and.w	r3, r3, #16
 8004684:	2b10      	cmp	r3, #16
 8004686:	d11b      	bne.n	80046c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f06f 0210 	mvn.w	r2, #16
 8004690:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2208      	movs	r2, #8
 8004696:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	69db      	ldr	r3, [r3, #28]
 800469e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d003      	beq.n	80046ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f000 f936 	bl	8004918 <HAL_TIM_IC_CaptureCallback>
 80046ac:	e005      	b.n	80046ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f000 f929 	bl	8004906 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f000 f938 	bl	800492a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2200      	movs	r2, #0
 80046be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	691b      	ldr	r3, [r3, #16]
 80046c6:	f003 0301 	and.w	r3, r3, #1
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d10e      	bne.n	80046ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	f003 0301 	and.w	r3, r3, #1
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d107      	bne.n	80046ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f06f 0201 	mvn.w	r2, #1
 80046e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f000 f904 	bl	80048f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	691b      	ldr	r3, [r3, #16]
 80046f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046f6:	2b80      	cmp	r3, #128	; 0x80
 80046f8:	d10e      	bne.n	8004718 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004704:	2b80      	cmp	r3, #128	; 0x80
 8004706:	d107      	bne.n	8004718 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004710:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f000 fc0d 	bl	8004f32 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	691b      	ldr	r3, [r3, #16]
 800471e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004722:	2b40      	cmp	r3, #64	; 0x40
 8004724:	d10e      	bne.n	8004744 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	68db      	ldr	r3, [r3, #12]
 800472c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004730:	2b40      	cmp	r3, #64	; 0x40
 8004732:	d107      	bne.n	8004744 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800473c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f000 f8fc 	bl	800493c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	691b      	ldr	r3, [r3, #16]
 800474a:	f003 0320 	and.w	r3, r3, #32
 800474e:	2b20      	cmp	r3, #32
 8004750:	d10e      	bne.n	8004770 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	f003 0320 	and.w	r3, r3, #32
 800475c:	2b20      	cmp	r3, #32
 800475e:	d107      	bne.n	8004770 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f06f 0220 	mvn.w	r2, #32
 8004768:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f000 fbd8 	bl	8004f20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004770:	bf00      	nop
 8004772:	3708      	adds	r7, #8
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}

08004778 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b084      	sub	sp, #16
 800477c:	af00      	add	r7, sp, #0
 800477e:	60f8      	str	r0, [r7, #12]
 8004780:	60b9      	str	r1, [r7, #8]
 8004782:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800478a:	2b01      	cmp	r3, #1
 800478c:	d101      	bne.n	8004792 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800478e:	2302      	movs	r3, #2
 8004790:	e0ac      	b.n	80048ec <HAL_TIM_PWM_ConfigChannel+0x174>
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2201      	movs	r2, #1
 8004796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2b0c      	cmp	r3, #12
 800479e:	f200 809f 	bhi.w	80048e0 <HAL_TIM_PWM_ConfigChannel+0x168>
 80047a2:	a201      	add	r2, pc, #4	; (adr r2, 80047a8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80047a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047a8:	080047dd 	.word	0x080047dd
 80047ac:	080048e1 	.word	0x080048e1
 80047b0:	080048e1 	.word	0x080048e1
 80047b4:	080048e1 	.word	0x080048e1
 80047b8:	0800481d 	.word	0x0800481d
 80047bc:	080048e1 	.word	0x080048e1
 80047c0:	080048e1 	.word	0x080048e1
 80047c4:	080048e1 	.word	0x080048e1
 80047c8:	0800485f 	.word	0x0800485f
 80047cc:	080048e1 	.word	0x080048e1
 80047d0:	080048e1 	.word	0x080048e1
 80047d4:	080048e1 	.word	0x080048e1
 80047d8:	0800489f 	.word	0x0800489f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	68b9      	ldr	r1, [r7, #8]
 80047e2:	4618      	mov	r0, r3
 80047e4:	f000 f952 	bl	8004a8c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	699a      	ldr	r2, [r3, #24]
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f042 0208 	orr.w	r2, r2, #8
 80047f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	699a      	ldr	r2, [r3, #24]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f022 0204 	bic.w	r2, r2, #4
 8004806:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	6999      	ldr	r1, [r3, #24]
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	691a      	ldr	r2, [r3, #16]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	430a      	orrs	r2, r1
 8004818:	619a      	str	r2, [r3, #24]
      break;
 800481a:	e062      	b.n	80048e2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	68b9      	ldr	r1, [r7, #8]
 8004822:	4618      	mov	r0, r3
 8004824:	f000 f9a2 	bl	8004b6c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	699a      	ldr	r2, [r3, #24]
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004836:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	699a      	ldr	r2, [r3, #24]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004846:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	6999      	ldr	r1, [r3, #24]
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	691b      	ldr	r3, [r3, #16]
 8004852:	021a      	lsls	r2, r3, #8
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	430a      	orrs	r2, r1
 800485a:	619a      	str	r2, [r3, #24]
      break;
 800485c:	e041      	b.n	80048e2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	68b9      	ldr	r1, [r7, #8]
 8004864:	4618      	mov	r0, r3
 8004866:	f000 f9f5 	bl	8004c54 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	69da      	ldr	r2, [r3, #28]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f042 0208 	orr.w	r2, r2, #8
 8004878:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	69da      	ldr	r2, [r3, #28]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f022 0204 	bic.w	r2, r2, #4
 8004888:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	69d9      	ldr	r1, [r3, #28]
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	691a      	ldr	r2, [r3, #16]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	430a      	orrs	r2, r1
 800489a:	61da      	str	r2, [r3, #28]
      break;
 800489c:	e021      	b.n	80048e2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	68b9      	ldr	r1, [r7, #8]
 80048a4:	4618      	mov	r0, r3
 80048a6:	f000 fa49 	bl	8004d3c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	69da      	ldr	r2, [r3, #28]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	69da      	ldr	r2, [r3, #28]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	69d9      	ldr	r1, [r3, #28]
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	691b      	ldr	r3, [r3, #16]
 80048d4:	021a      	lsls	r2, r3, #8
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	430a      	orrs	r2, r1
 80048dc:	61da      	str	r2, [r3, #28]
      break;
 80048de:	e000      	b.n	80048e2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80048e0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2200      	movs	r2, #0
 80048e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048ea:	2300      	movs	r3, #0
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3710      	adds	r7, #16
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}

080048f4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b083      	sub	sp, #12
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80048fc:	bf00      	nop
 80048fe:	370c      	adds	r7, #12
 8004900:	46bd      	mov	sp, r7
 8004902:	bc80      	pop	{r7}
 8004904:	4770      	bx	lr

08004906 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004906:	b480      	push	{r7}
 8004908:	b083      	sub	sp, #12
 800490a:	af00      	add	r7, sp, #0
 800490c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800490e:	bf00      	nop
 8004910:	370c      	adds	r7, #12
 8004912:	46bd      	mov	sp, r7
 8004914:	bc80      	pop	{r7}
 8004916:	4770      	bx	lr

08004918 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004918:	b480      	push	{r7}
 800491a:	b083      	sub	sp, #12
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004920:	bf00      	nop
 8004922:	370c      	adds	r7, #12
 8004924:	46bd      	mov	sp, r7
 8004926:	bc80      	pop	{r7}
 8004928:	4770      	bx	lr

0800492a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800492a:	b480      	push	{r7}
 800492c:	b083      	sub	sp, #12
 800492e:	af00      	add	r7, sp, #0
 8004930:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004932:	bf00      	nop
 8004934:	370c      	adds	r7, #12
 8004936:	46bd      	mov	sp, r7
 8004938:	bc80      	pop	{r7}
 800493a:	4770      	bx	lr

0800493c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800493c:	b480      	push	{r7}
 800493e:	b083      	sub	sp, #12
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004944:	bf00      	nop
 8004946:	370c      	adds	r7, #12
 8004948:	46bd      	mov	sp, r7
 800494a:	bc80      	pop	{r7}
 800494c:	4770      	bx	lr
	...

08004950 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004950:	b480      	push	{r7}
 8004952:	b085      	sub	sp, #20
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
 8004958:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	4a3f      	ldr	r2, [pc, #252]	; (8004a60 <TIM_Base_SetConfig+0x110>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d013      	beq.n	8004990 <TIM_Base_SetConfig+0x40>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800496e:	d00f      	beq.n	8004990 <TIM_Base_SetConfig+0x40>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	4a3c      	ldr	r2, [pc, #240]	; (8004a64 <TIM_Base_SetConfig+0x114>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d00b      	beq.n	8004990 <TIM_Base_SetConfig+0x40>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	4a3b      	ldr	r2, [pc, #236]	; (8004a68 <TIM_Base_SetConfig+0x118>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d007      	beq.n	8004990 <TIM_Base_SetConfig+0x40>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	4a3a      	ldr	r2, [pc, #232]	; (8004a6c <TIM_Base_SetConfig+0x11c>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d003      	beq.n	8004990 <TIM_Base_SetConfig+0x40>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	4a39      	ldr	r2, [pc, #228]	; (8004a70 <TIM_Base_SetConfig+0x120>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d108      	bne.n	80049a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004996:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	68fa      	ldr	r2, [r7, #12]
 800499e:	4313      	orrs	r3, r2
 80049a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	4a2e      	ldr	r2, [pc, #184]	; (8004a60 <TIM_Base_SetConfig+0x110>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d02b      	beq.n	8004a02 <TIM_Base_SetConfig+0xb2>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049b0:	d027      	beq.n	8004a02 <TIM_Base_SetConfig+0xb2>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	4a2b      	ldr	r2, [pc, #172]	; (8004a64 <TIM_Base_SetConfig+0x114>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d023      	beq.n	8004a02 <TIM_Base_SetConfig+0xb2>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	4a2a      	ldr	r2, [pc, #168]	; (8004a68 <TIM_Base_SetConfig+0x118>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d01f      	beq.n	8004a02 <TIM_Base_SetConfig+0xb2>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	4a29      	ldr	r2, [pc, #164]	; (8004a6c <TIM_Base_SetConfig+0x11c>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d01b      	beq.n	8004a02 <TIM_Base_SetConfig+0xb2>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4a28      	ldr	r2, [pc, #160]	; (8004a70 <TIM_Base_SetConfig+0x120>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d017      	beq.n	8004a02 <TIM_Base_SetConfig+0xb2>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4a27      	ldr	r2, [pc, #156]	; (8004a74 <TIM_Base_SetConfig+0x124>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d013      	beq.n	8004a02 <TIM_Base_SetConfig+0xb2>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a26      	ldr	r2, [pc, #152]	; (8004a78 <TIM_Base_SetConfig+0x128>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d00f      	beq.n	8004a02 <TIM_Base_SetConfig+0xb2>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4a25      	ldr	r2, [pc, #148]	; (8004a7c <TIM_Base_SetConfig+0x12c>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d00b      	beq.n	8004a02 <TIM_Base_SetConfig+0xb2>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4a24      	ldr	r2, [pc, #144]	; (8004a80 <TIM_Base_SetConfig+0x130>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d007      	beq.n	8004a02 <TIM_Base_SetConfig+0xb2>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a23      	ldr	r2, [pc, #140]	; (8004a84 <TIM_Base_SetConfig+0x134>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d003      	beq.n	8004a02 <TIM_Base_SetConfig+0xb2>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4a22      	ldr	r2, [pc, #136]	; (8004a88 <TIM_Base_SetConfig+0x138>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d108      	bne.n	8004a14 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	68db      	ldr	r3, [r3, #12]
 8004a0e:	68fa      	ldr	r2, [r7, #12]
 8004a10:	4313      	orrs	r3, r2
 8004a12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	695b      	ldr	r3, [r3, #20]
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	68fa      	ldr	r2, [r7, #12]
 8004a26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	689a      	ldr	r2, [r3, #8]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	4a09      	ldr	r2, [pc, #36]	; (8004a60 <TIM_Base_SetConfig+0x110>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d003      	beq.n	8004a48 <TIM_Base_SetConfig+0xf8>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	4a0b      	ldr	r2, [pc, #44]	; (8004a70 <TIM_Base_SetConfig+0x120>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d103      	bne.n	8004a50 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	691a      	ldr	r2, [r3, #16]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2201      	movs	r2, #1
 8004a54:	615a      	str	r2, [r3, #20]
}
 8004a56:	bf00      	nop
 8004a58:	3714      	adds	r7, #20
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bc80      	pop	{r7}
 8004a5e:	4770      	bx	lr
 8004a60:	40010000 	.word	0x40010000
 8004a64:	40000400 	.word	0x40000400
 8004a68:	40000800 	.word	0x40000800
 8004a6c:	40000c00 	.word	0x40000c00
 8004a70:	40010400 	.word	0x40010400
 8004a74:	40014000 	.word	0x40014000
 8004a78:	40014400 	.word	0x40014400
 8004a7c:	40014800 	.word	0x40014800
 8004a80:	40001800 	.word	0x40001800
 8004a84:	40001c00 	.word	0x40001c00
 8004a88:	40002000 	.word	0x40002000

08004a8c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b087      	sub	sp, #28
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6a1b      	ldr	r3, [r3, #32]
 8004a9a:	f023 0201 	bic.w	r2, r3, #1
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6a1b      	ldr	r3, [r3, #32]
 8004aa6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	699b      	ldr	r3, [r3, #24]
 8004ab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f023 0303 	bic.w	r3, r3, #3
 8004ac2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	68fa      	ldr	r2, [r7, #12]
 8004aca:	4313      	orrs	r3, r2
 8004acc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	f023 0302 	bic.w	r3, r3, #2
 8004ad4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	697a      	ldr	r2, [r7, #20]
 8004adc:	4313      	orrs	r3, r2
 8004ade:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	4a20      	ldr	r2, [pc, #128]	; (8004b64 <TIM_OC1_SetConfig+0xd8>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d003      	beq.n	8004af0 <TIM_OC1_SetConfig+0x64>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	4a1f      	ldr	r2, [pc, #124]	; (8004b68 <TIM_OC1_SetConfig+0xdc>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d10c      	bne.n	8004b0a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	f023 0308 	bic.w	r3, r3, #8
 8004af6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	697a      	ldr	r2, [r7, #20]
 8004afe:	4313      	orrs	r3, r2
 8004b00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	f023 0304 	bic.w	r3, r3, #4
 8004b08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	4a15      	ldr	r2, [pc, #84]	; (8004b64 <TIM_OC1_SetConfig+0xd8>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d003      	beq.n	8004b1a <TIM_OC1_SetConfig+0x8e>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	4a14      	ldr	r2, [pc, #80]	; (8004b68 <TIM_OC1_SetConfig+0xdc>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d111      	bne.n	8004b3e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	695b      	ldr	r3, [r3, #20]
 8004b2e:	693a      	ldr	r2, [r7, #16]
 8004b30:	4313      	orrs	r3, r2
 8004b32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	699b      	ldr	r3, [r3, #24]
 8004b38:	693a      	ldr	r2, [r7, #16]
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	693a      	ldr	r2, [r7, #16]
 8004b42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	68fa      	ldr	r2, [r7, #12]
 8004b48:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	685a      	ldr	r2, [r3, #4]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	697a      	ldr	r2, [r7, #20]
 8004b56:	621a      	str	r2, [r3, #32]
}
 8004b58:	bf00      	nop
 8004b5a:	371c      	adds	r7, #28
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bc80      	pop	{r7}
 8004b60:	4770      	bx	lr
 8004b62:	bf00      	nop
 8004b64:	40010000 	.word	0x40010000
 8004b68:	40010400 	.word	0x40010400

08004b6c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b087      	sub	sp, #28
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6a1b      	ldr	r3, [r3, #32]
 8004b7a:	f023 0210 	bic.w	r2, r3, #16
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6a1b      	ldr	r3, [r3, #32]
 8004b86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	699b      	ldr	r3, [r3, #24]
 8004b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ba2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	021b      	lsls	r3, r3, #8
 8004baa:	68fa      	ldr	r2, [r7, #12]
 8004bac:	4313      	orrs	r3, r2
 8004bae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	f023 0320 	bic.w	r3, r3, #32
 8004bb6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	011b      	lsls	r3, r3, #4
 8004bbe:	697a      	ldr	r2, [r7, #20]
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	4a21      	ldr	r2, [pc, #132]	; (8004c4c <TIM_OC2_SetConfig+0xe0>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d003      	beq.n	8004bd4 <TIM_OC2_SetConfig+0x68>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	4a20      	ldr	r2, [pc, #128]	; (8004c50 <TIM_OC2_SetConfig+0xe4>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d10d      	bne.n	8004bf0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	011b      	lsls	r3, r3, #4
 8004be2:	697a      	ldr	r2, [r7, #20]
 8004be4:	4313      	orrs	r3, r2
 8004be6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	4a16      	ldr	r2, [pc, #88]	; (8004c4c <TIM_OC2_SetConfig+0xe0>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d003      	beq.n	8004c00 <TIM_OC2_SetConfig+0x94>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	4a15      	ldr	r2, [pc, #84]	; (8004c50 <TIM_OC2_SetConfig+0xe4>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d113      	bne.n	8004c28 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c06:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c0e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	695b      	ldr	r3, [r3, #20]
 8004c14:	009b      	lsls	r3, r3, #2
 8004c16:	693a      	ldr	r2, [r7, #16]
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	699b      	ldr	r3, [r3, #24]
 8004c20:	009b      	lsls	r3, r3, #2
 8004c22:	693a      	ldr	r2, [r7, #16]
 8004c24:	4313      	orrs	r3, r2
 8004c26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	693a      	ldr	r2, [r7, #16]
 8004c2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	68fa      	ldr	r2, [r7, #12]
 8004c32:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	685a      	ldr	r2, [r3, #4]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	697a      	ldr	r2, [r7, #20]
 8004c40:	621a      	str	r2, [r3, #32]
}
 8004c42:	bf00      	nop
 8004c44:	371c      	adds	r7, #28
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bc80      	pop	{r7}
 8004c4a:	4770      	bx	lr
 8004c4c:	40010000 	.word	0x40010000
 8004c50:	40010400 	.word	0x40010400

08004c54 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b087      	sub	sp, #28
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6a1b      	ldr	r3, [r3, #32]
 8004c62:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6a1b      	ldr	r3, [r3, #32]
 8004c6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	69db      	ldr	r3, [r3, #28]
 8004c7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	f023 0303 	bic.w	r3, r3, #3
 8004c8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	68fa      	ldr	r2, [r7, #12]
 8004c92:	4313      	orrs	r3, r2
 8004c94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	021b      	lsls	r3, r3, #8
 8004ca4:	697a      	ldr	r2, [r7, #20]
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	4a21      	ldr	r2, [pc, #132]	; (8004d34 <TIM_OC3_SetConfig+0xe0>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d003      	beq.n	8004cba <TIM_OC3_SetConfig+0x66>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4a20      	ldr	r2, [pc, #128]	; (8004d38 <TIM_OC3_SetConfig+0xe4>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d10d      	bne.n	8004cd6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004cc0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	68db      	ldr	r3, [r3, #12]
 8004cc6:	021b      	lsls	r3, r3, #8
 8004cc8:	697a      	ldr	r2, [r7, #20]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004cd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	4a16      	ldr	r2, [pc, #88]	; (8004d34 <TIM_OC3_SetConfig+0xe0>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d003      	beq.n	8004ce6 <TIM_OC3_SetConfig+0x92>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	4a15      	ldr	r2, [pc, #84]	; (8004d38 <TIM_OC3_SetConfig+0xe4>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d113      	bne.n	8004d0e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004cec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004cf4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	695b      	ldr	r3, [r3, #20]
 8004cfa:	011b      	lsls	r3, r3, #4
 8004cfc:	693a      	ldr	r2, [r7, #16]
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	699b      	ldr	r3, [r3, #24]
 8004d06:	011b      	lsls	r3, r3, #4
 8004d08:	693a      	ldr	r2, [r7, #16]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	693a      	ldr	r2, [r7, #16]
 8004d12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	68fa      	ldr	r2, [r7, #12]
 8004d18:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	685a      	ldr	r2, [r3, #4]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	697a      	ldr	r2, [r7, #20]
 8004d26:	621a      	str	r2, [r3, #32]
}
 8004d28:	bf00      	nop
 8004d2a:	371c      	adds	r7, #28
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bc80      	pop	{r7}
 8004d30:	4770      	bx	lr
 8004d32:	bf00      	nop
 8004d34:	40010000 	.word	0x40010000
 8004d38:	40010400 	.word	0x40010400

08004d3c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b087      	sub	sp, #28
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6a1b      	ldr	r3, [r3, #32]
 8004d4a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a1b      	ldr	r3, [r3, #32]
 8004d56:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	69db      	ldr	r3, [r3, #28]
 8004d62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	021b      	lsls	r3, r3, #8
 8004d7a:	68fa      	ldr	r2, [r7, #12]
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	031b      	lsls	r3, r3, #12
 8004d8e:	693a      	ldr	r2, [r7, #16]
 8004d90:	4313      	orrs	r3, r2
 8004d92:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	4a11      	ldr	r2, [pc, #68]	; (8004ddc <TIM_OC4_SetConfig+0xa0>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d003      	beq.n	8004da4 <TIM_OC4_SetConfig+0x68>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	4a10      	ldr	r2, [pc, #64]	; (8004de0 <TIM_OC4_SetConfig+0xa4>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d109      	bne.n	8004db8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004daa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	695b      	ldr	r3, [r3, #20]
 8004db0:	019b      	lsls	r3, r3, #6
 8004db2:	697a      	ldr	r2, [r7, #20]
 8004db4:	4313      	orrs	r3, r2
 8004db6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	697a      	ldr	r2, [r7, #20]
 8004dbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	68fa      	ldr	r2, [r7, #12]
 8004dc2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	685a      	ldr	r2, [r3, #4]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	693a      	ldr	r2, [r7, #16]
 8004dd0:	621a      	str	r2, [r3, #32]
}
 8004dd2:	bf00      	nop
 8004dd4:	371c      	adds	r7, #28
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bc80      	pop	{r7}
 8004dda:	4770      	bx	lr
 8004ddc:	40010000 	.word	0x40010000
 8004de0:	40010400 	.word	0x40010400

08004de4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b087      	sub	sp, #28
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	60f8      	str	r0, [r7, #12]
 8004dec:	60b9      	str	r1, [r7, #8]
 8004dee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	f003 031f 	and.w	r3, r3, #31
 8004df6:	2201      	movs	r2, #1
 8004df8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dfc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	6a1a      	ldr	r2, [r3, #32]
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	43db      	mvns	r3, r3
 8004e06:	401a      	ands	r2, r3
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	6a1a      	ldr	r2, [r3, #32]
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	f003 031f 	and.w	r3, r3, #31
 8004e16:	6879      	ldr	r1, [r7, #4]
 8004e18:	fa01 f303 	lsl.w	r3, r1, r3
 8004e1c:	431a      	orrs	r2, r3
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	621a      	str	r2, [r3, #32]
}
 8004e22:	bf00      	nop
 8004e24:	371c      	adds	r7, #28
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bc80      	pop	{r7}
 8004e2a:	4770      	bx	lr

08004e2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b085      	sub	sp, #20
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d101      	bne.n	8004e44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e40:	2302      	movs	r3, #2
 8004e42:	e05a      	b.n	8004efa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2202      	movs	r2, #2
 8004e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	689b      	ldr	r3, [r3, #8]
 8004e62:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	68fa      	ldr	r2, [r7, #12]
 8004e72:	4313      	orrs	r3, r2
 8004e74:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	68fa      	ldr	r2, [r7, #12]
 8004e7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a20      	ldr	r2, [pc, #128]	; (8004f04 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d022      	beq.n	8004ece <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e90:	d01d      	beq.n	8004ece <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a1c      	ldr	r2, [pc, #112]	; (8004f08 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d018      	beq.n	8004ece <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a1a      	ldr	r2, [pc, #104]	; (8004f0c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d013      	beq.n	8004ece <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a19      	ldr	r2, [pc, #100]	; (8004f10 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d00e      	beq.n	8004ece <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a17      	ldr	r2, [pc, #92]	; (8004f14 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d009      	beq.n	8004ece <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a16      	ldr	r2, [pc, #88]	; (8004f18 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d004      	beq.n	8004ece <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a14      	ldr	r2, [pc, #80]	; (8004f1c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d10c      	bne.n	8004ee8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ed4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	68ba      	ldr	r2, [r7, #8]
 8004edc:	4313      	orrs	r3, r2
 8004ede:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	68ba      	ldr	r2, [r7, #8]
 8004ee6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ef8:	2300      	movs	r3, #0
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3714      	adds	r7, #20
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bc80      	pop	{r7}
 8004f02:	4770      	bx	lr
 8004f04:	40010000 	.word	0x40010000
 8004f08:	40000400 	.word	0x40000400
 8004f0c:	40000800 	.word	0x40000800
 8004f10:	40000c00 	.word	0x40000c00
 8004f14:	40010400 	.word	0x40010400
 8004f18:	40014000 	.word	0x40014000
 8004f1c:	40001800 	.word	0x40001800

08004f20 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b083      	sub	sp, #12
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f28:	bf00      	nop
 8004f2a:	370c      	adds	r7, #12
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bc80      	pop	{r7}
 8004f30:	4770      	bx	lr

08004f32 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f32:	b480      	push	{r7}
 8004f34:	b083      	sub	sp, #12
 8004f36:	af00      	add	r7, sp, #0
 8004f38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f3a:	bf00      	nop
 8004f3c:	370c      	adds	r7, #12
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bc80      	pop	{r7}
 8004f42:	4770      	bx	lr

08004f44 <__libc_init_array>:
 8004f44:	b570      	push	{r4, r5, r6, lr}
 8004f46:	2600      	movs	r6, #0
 8004f48:	4d0c      	ldr	r5, [pc, #48]	; (8004f7c <__libc_init_array+0x38>)
 8004f4a:	4c0d      	ldr	r4, [pc, #52]	; (8004f80 <__libc_init_array+0x3c>)
 8004f4c:	1b64      	subs	r4, r4, r5
 8004f4e:	10a4      	asrs	r4, r4, #2
 8004f50:	42a6      	cmp	r6, r4
 8004f52:	d109      	bne.n	8004f68 <__libc_init_array+0x24>
 8004f54:	f000 f822 	bl	8004f9c <_init>
 8004f58:	2600      	movs	r6, #0
 8004f5a:	4d0a      	ldr	r5, [pc, #40]	; (8004f84 <__libc_init_array+0x40>)
 8004f5c:	4c0a      	ldr	r4, [pc, #40]	; (8004f88 <__libc_init_array+0x44>)
 8004f5e:	1b64      	subs	r4, r4, r5
 8004f60:	10a4      	asrs	r4, r4, #2
 8004f62:	42a6      	cmp	r6, r4
 8004f64:	d105      	bne.n	8004f72 <__libc_init_array+0x2e>
 8004f66:	bd70      	pop	{r4, r5, r6, pc}
 8004f68:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f6c:	4798      	blx	r3
 8004f6e:	3601      	adds	r6, #1
 8004f70:	e7ee      	b.n	8004f50 <__libc_init_array+0xc>
 8004f72:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f76:	4798      	blx	r3
 8004f78:	3601      	adds	r6, #1
 8004f7a:	e7f2      	b.n	8004f62 <__libc_init_array+0x1e>
 8004f7c:	08004fd4 	.word	0x08004fd4
 8004f80:	08004fd4 	.word	0x08004fd4
 8004f84:	08004fd4 	.word	0x08004fd4
 8004f88:	08004fd8 	.word	0x08004fd8

08004f8c <memset>:
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	4402      	add	r2, r0
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d100      	bne.n	8004f96 <memset+0xa>
 8004f94:	4770      	bx	lr
 8004f96:	f803 1b01 	strb.w	r1, [r3], #1
 8004f9a:	e7f9      	b.n	8004f90 <memset+0x4>

08004f9c <_init>:
 8004f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f9e:	bf00      	nop
 8004fa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fa2:	bc08      	pop	{r3}
 8004fa4:	469e      	mov	lr, r3
 8004fa6:	4770      	bx	lr

08004fa8 <_fini>:
 8004fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004faa:	bf00      	nop
 8004fac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fae:	bc08      	pop	{r3}
 8004fb0:	469e      	mov	lr, r3
 8004fb2:	4770      	bx	lr
